{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Rocinante","text":""},{"location":"#introduction","title":"Introduction","text":"<p>This is the exercise journey to install a Linux distribution on a brand new, high performance PC build from a set of brand new independent components.</p> <p>Nearly all hardware development needs software these days and software runs on a PC, so it is for hardware enthusiasts a necessity to have a good and decent working PC. Speaking with colleagues, conculeagues and friends about PC things I learned that in a lot of cases this is a real issue.  Lot of them buy a ready made PC that comes pre-installed with Microsoft Windows and some of them go for Apple iOS (not discussed here).  because \"easy to configure and use\". Some install Linux in a Virtual Machine (VM) or the brave go for a dual boot machine because Linux is required for some task. Most stay with Microsoft because the VM and/or dual boot install didn't go smooth. A minority goes for a Linux distribution but complain about \"configuration, use, maintenance, and ...\".  It has been written already a lot times; Installing Linux is now-a-days easy. it's even easier than installing Microsoft Windows. Configuring and installing things afterwards is where most people have/get issues. </p> <p>The goal is to provide in following two documents an overview of install instructions with \"tips &amp; tricks\" to easily install, configure and \"turn it to your hand\" guide into Linux.</p> <p>As about every five years, I bought a set of components and assembled a new PC. In contrary to a ready build PC from the shop with installed OS, after the assembly  of the hardware, the OS and software needs to be installed. This method brings a customised top of the range PC alive. As OS the choice has always been Linux and in particular the Linux-Mint Cinnamon distribution.</p> <p>What I learned during the years is that when installing software on a new PC surprises are part of the deal. So I always write in short the how, what, from where and what issues popped up while installing and configuring a new PC. It really helps when switching to a new PC that needs installing and configuring. Now I will write the experience down with whistles and bells to possibly help other.</p> <p>This time, even with the notes from the previous installation, its a search and kind of try exercise. It was an even longer search and try due to the switch from Intel to the newest AMD CPU and switch from Nvidia to newest AMD graphics card. </p>"},{"location":"#linux-mint-ubuntu","title":"Linux Mint / Ubuntu","text":"<p>I started by installing Linux-Mint 21.3 because I'm a long time Linux-Mint Cinnamon user, but that didn\u2019t really work well since the new motherboard needed a distribution running Linux 6 and that is/was not yet supported. Downloaded the \u201cEdge\u201d version of Linux-Mint 21.3 because it\u2019s using Linux 6.5 but after install got issues with the downloaded graphics card driver from AMD. Installing the latest graphics driver did not work as it should, because it\u2019s seems that it is made for Ubuntu 22.04 and I guess it checks for that.</p> <p>Went to Ubuntu, searched through the different desktop versions, downloaded and installed the Ubuntu Cinnamon targeted version because it uses Linux 6.5 and the graphics driver should now have no issues. Found out that that Ubuntu version is not a Ubuntu Long Time Support (LTS). Got again issues with the AMD GPU software. Besides the GPU software issues, the Ubuntu Cinnamon version is missing a lot of good stuff compared to the Linux-Mint Cinnamon.</p> <p>Back to Ubuntu's web site and after checking it seemed that the latest version of vanilla Ubuntu 22.04 (22.04.4) after a first update also get Linux 6.5. as kernel. Thus downloaded and installed vanilla Ubuntu 22.04 with the latest AMD GPU drivers and that went smooth. After the update directly following the install the Linux kernel was version 6.5. For me, the vanilla Ubuntu comes with a far to graphically busy and mouse click rich desktop (GNOME). For me, my opinion, all desktop environments beside Cinnamon and Budgie, are to busy and/or to fancy (to much mouse clicks to do something that can be done with one click). Budgie looks out of the box too Apple what leaves Cinnamon. What I wanted is the Mint Cinnamon desktop back and that came with extra installation and tuning work as described in the RocinanteUbuntu document.</p> <p>Finally after install and tuning it all wasn't what I really wanted and things got stuck or where hanging, quite often.</p>"},{"location":"#manjaro","title":"Manjaro","text":"<p>Searching for what I really wanted brought me to Arch Linux and the Arch based, easy to install and maintain counterpart Manjaro. What really won me over is the the native Manjaro Cinnamon version and the fact that Manjaro is using a rolling update system (All Arch based systems are rolling update systems).  A rolling update Linux distribution works by updating the apps and services to the latest versions as soon as updates are available. The rolling update system works without all the repositories Ubuntu/Linux Mint need, so there is no hassle with repositories to keep installed tools up to date. Another advantage is that with the rolling update system it is easy to update to a newer kernel and that is a very plus in these Linux version 6.x days.</p> <p>Downloaded and installed Manjaro and all things worked out of the box.  The installer uses the latest stable Linux kernel and during the installation run a hardware configuration tool discovers the hardware components of the machine and installs all necessary drivers. Even the drivers for the AMD graphics card were installed out of the box.</p> <p>Manjaro: why didn't I discover this earlier?</p>"},{"location":"#the-reason-why","title":"The reason why:","text":"<p>Forgot to tell why the title: Rocinante. The PC is a work horse for me, so a suited name for the machine was/is required. </p> <ul> <li> <p>Rocinante is Don Quixote's horse in the novel by Miguel de Cervantes.</p> <ul> <li>Roc\u00edn in Spanish means a work horse. </li> <li>The suffix, -ante in Spanish is adverbial; rocinante refers to functioning as, or being, a roc\u00edn.</li> </ul> <p>In many ways, Rocinante is not only Don Quixote's horse, but also his double and there the name Rocinante, signifies the change from the \"old nag\" to the \"foremost\" steed.</p> </li> <li> <p>The Rocinante is in the series The Expanse a former Martian Congressional Republic Navy (MRCN)  Corvette-class light frigate. It turned-independent and is now capable of functioning, a a work horse, in multiple combat roles.</p> </li> </ul>"},{"location":"GTK_Wave_Installation/","title":"GTK-Wave","text":""},{"location":"GTK_Wave_Installation/#gtk-wave-installation","title":"GTK-Wave Installation","text":"<p>To install the latest version do this:</p> <ol> <li> <p>Unzip the .tar.gz file obtained from the GTK website.     This creates a new directory gtkwave (at time of writing it\u2019s -3.3.101). <li> <p>Start a terminal and create in the gtkwave- directory a build directory.     <code>cd ~/Downloads/gtkwave&lt;verion&gt;</code> and then <code>mkdir build</code>. <li> <p>Change directory into the build directory <code>cd build</code></p> </li> <li> <p>Run the command <code>../configure -\u2013prefix=/opt/GtkWave</code>     The command takes of and generates status text lines ending with an error about TCL.</p> <pre><code>checking for Tcl configuration... configure: error: Can't find Tcl configuration definitions. Use --with-tcl to specify a directory containing tclConfig.sh\n</code></pre> <p>The installation does not seem to have Tcl-Tk installed by default and that is confirmed after a check (type in the terminal tclsh and wish  to find out if Tcl and Tk are installed). Thus the first thing to do now is to install Tcl-Tk. Consult the description on how to do this somewhere else in this document. After install and testing of Tcl-Tk come back to this point 4 and run <code>../configure --prefix=/opt/GtkWave</code> again.</p> <p>After installation of Tcl-TK and running <code>../configure \u2013prefix=/opt/GtkWave</code> the same errors pops up. At least now Tcl-Tk is installed and we know it :-). The error complains about some tcl file that cannot be found. So give the path to the file with the configure command. Do the same for Tk.</p> <p><code>../configure --prefix=/opt/GtkWave --with-tcl=/opt/ActiveTcl-8.6/lib --with-tk=/opt/ActiveTcl-8.6/lib</code> After running configure with the above command a lot more status text is displayed in the terminal but it ends again with an new error message</p> <pre><code>configure: error: Couldn't find a usable gperf program.\nPlease install gperf which is available from\nftp://ftp.gnu.org/pub/gnu/gperf/\n</code></pre> <p>Install gperf as instructed but use apt to do it. Use this command line: <code>sudo apt install gperf</code></p> <p>Third time configure, good time? run the configure command again. No, it seems that the third time is not the good time because a new error ends configure.</p> <pre><code>checking for lzma_end in -llzma... no\nconfigure: error: LZMA support for VZT is enabled, but xz could not be found.\nPlease install the xz-devel package, see the http://tukaani.org/xz website, or use the --disable-xz flag.\n</code></pre> <p>A check shows that xz-utils are installed but it seems that the configure command cannot find it. Run the Synaptic tool and [Search] for <code>xz-dev</code> . Synaptic pops up a library: golang-xi2-x-xz-dev. Check that library for installation, right click and select ''Mark for Installation\", then hit [Apply]. This will pop up some other stuff that needs to be installed, allow it. <code>../configure --prefix=/opt/GtkWave --with-tcl=/opt/ActiveTcl-8.6/lib --with-tk=/opt/ActiveTcl-8.6/lib</code></p> <p>This new run end in yet another error</p> <pre><code>checking for GTK... no\nconfigure: error: Package requirements (gtk+-2.0 &gt;= 2.2.0) were not met:\n\nNo package 'gtk+-2.0' found\n</code></pre> </li> <p>Consider adjusting the PKG_CONFIG_PATH environment variable if you    installed software in a non-standard prefix.</p> <p>Alternatively, you may set the environment variables GTK_CFLAGS    and GTK_LIBS to avoid the need to call pkg-config. See the pkg-config man page for more details.</p> <p>The machine has everything for gtk-3 installed. A search how to get gtk-2 learns to run this command: <code>sudo apt install libgtk2.0-dev</code>. Running that command in a terminal seem to install a lot of stuff.</p> <p>Rerun the command: <code>../configure --prefix=/opt/GtkWave --with-tcl=/opt/ActiveTcl-8.6/lib --with-tk=/opt/ActiveTcl-8.6/lib</code> and now finally the process ends without warnings or errors.</p> <ol> <li> <p>Run <code>make</code></p> </li> <li> <p>Run the <code>sudo make install</code> command to install the GtkWave tool.</p> </li> <li> <p>Add GTKwave to the path.     Edit /home/\\&lt;user&gt;/.bash_aliases and add GtkWave to the PATH.</p> </li> </ol> <p>```</p>"},{"location":"GTK_Wave_Installation/#gtkwave-viewer","title":"GTKwave viewer","text":"<p>export GTKWAVE_ROOT=\"/opt/GtkWave\" export PATH=\\(PATH:\\)GTKWAVE_ROOT/bin  ```</p> <ol> <li> <p>Open a new terminal and check if GtkWave works; type <code>gtkwave</code> and watch what happens.     An error is what possibly happens.     The error:</p> <p>\u200b    gtkwave: error while loading shared libraries: libtcl8.6.so: cannot open shared object file: No such file or directory</p> <p>That library must be installed when ActiveState Tcl-Tk was installed and a search for it proves it\u2019s installed and available in: /opt/ActiveTcl-8.6/lib    How make GtkWave know that the library is available, well:    Open/edit the  /home//.bash_aliases or /home//.bash again and add following to the Tcl-Tk settings: <code>export LD_LIBRARY_PATH=$TCLTK_ROOT/lib</code> and save the file. <li> <p>Start a new terminal and run again: <code>gtkwave</code> and view the waveforms window popping up.</p> </li>"},{"location":"InstallEfinixTools/","title":"Efinix Tools Setup","text":""},{"location":"InstallEfinixTools/#installation","title":"Installation","text":"<ul> <li> <p>Browse to the Efinix web page, click the [Support] - [Support Home] tab.</p> <p>Note</p> <p>One must have a Efinix support account to download software, guides, application notes, ... The first thing to do is to create an account. [Register] and when allowed, log on to the page.</p> <p>When logging on do not forget to tick the \"I agree to Efinix's privacy policy and terms of use\" box.</p> </li> <li> <p>Click the download software box and download:</p> <ul> <li>The Ubuntu version of the Efinity IDE Full Release</li> <li>The Ubuntu version of the Efinity Patch</li> <li>The Linux version of the Efinity RISC-V Embedded Software IDE</li> </ul> </li> <li> <p>Save each downloaded files somewhere on disk and the start the installation of the tools.</p> </li> </ul>"},{"location":"InstallEfinixTools/#efinity-ide","title":"Efinity IDE","text":"<ul> <li> <p>Create a <code>/opt/Efinix</code> directory.</p> <ul> <li> <p>When creating sub-directories in <code>/opt</code> one needs to be root/sudo.     The created <code>Efinix</code> directory will thus be owned to root. This must be changed because the Effinix tool have issues when running from a root owned directory.</p> </li> <li> <p>Start a command terminal and:</p> <pre><code>cd /opt\nsudo chown &lt;user&gt; Efinix\nsudo chgrp &lt;user&gt; Efinix\n</code></pre> </li> </ul> <p>Note</p> <p>/opt (Optional Software): The /opt directory is used for optional software installed on the system. This directory can be used for installing software that is not included in the system\u2019s package manager and vendor supplied application programs.</p> </li> <li> <p>Uncompress the Efinity package into <code>/opt/Efinix</code>.</p> <ul> <li>Use a file browser as Nemo or Nautillus and open the directory where the tar.bz2 file is stored.</li> <li>Open the tar.bz2 file using the default installed \"File Roller\" tool and extract the contents to <code>/opt/Efinix</code>. A sub-directory <code>efinity</code> is created in <code>/opt/Efinix</code></li> </ul> </li> <li> <p>The <code>/opt/Efinix/efinity/2014.1/bin/setup.sh</code> script has a wrong command syntax and produces a  bad Substitution error for the SCRIPT_PATH  environment. Due to that the EFINITY_HOME environment is not set. Set the path to the tools in the .bash_aliases file. The .bash_aliases file looks as:</p> <pre><code>export EFINITY_VERSION=2024.1\nexport EFINITY_HOME=/opt/Efinix/efinity/$EFINITY_VERSION/\nexport PATH=$PATH:EFINITY_HOME/bin\n. /opt/Efinix/efinity/$EFINITY_VERSION/bin/setup.sh\n</code></pre> </li> </ul> <p>Important</p> <p>When the Efinix tools are the only FPGA tools installed modify the setup.sh scripts delivered by Efinix. The Efinix tools,as many 3th party tools and maybe all vendor tools drop their path settings in front of all other settings, making that using Python and some other development tools is not possible anymore. Python is by installation run from it's own environment, securing the system installed Python version, called pyenv. The first item of the path must point to pyenv else it will not work. Thus go and read about more environment settings</p> <ul> <li>When downloading the Efinity tool a patch was also available and downloaded     Use Nemo or Nautillus and File Roller to uncompress the <code>...ubuntu-x64-patch</code> in its own directory.</li> <li> <p>Start a command terminal (this also sets the Efinity environments)</p> <ul> <li>Change directory into the patch directory.</li> <li>Execute the run.sh script, type <code>./run.sh</code></li> </ul> </li> <li> <p>Start the Efinix tools from within a command terminal by typing: efinity &amp; </p> </li> </ul>"},{"location":"InstallEfinixTools/#risc-v-software-installation","title":"RISC-V software installation","text":"<ul> <li> <p>Make the efinity-riscv-ide--linux-x64.run file executable. <li> <p>Start a command terminal and browse to were the efinity ...-linux-x64.run file is stored.</p> </li> <li> <p>Run Efinity-riscv-ide-\\&lt;version&gt;-linux-x64.run and follow the on-screen instructions.</p> <pre><code>./efinity-riscv-ide-&lt;version&gt;-linux-x64.run\n</code></pre> <ul> <li> <p>Messages in the terminal when above command is executed     <pre><code>Verifying archive integrity...  100%   All good.\nUncompressing Efinity RISC-V Embedded Software IDE Installation  100%  \n</code></pre></p> <p>Note</p> <p>Getting these messages in the terminal takes some time. Be patient.</p> </li> <li> <p>After the last message the next message asks for the place to store the Efinix RISC-V IDE</p> <pre><code>Default Efinity RISC-V Embedded Software IDE installation path is /home/marc/efinity/efinity-riscv-ide-2024.1\nPress Enter to use the default path or provide the new path for Efinity RISC-V Embedded Software IDE installation\n</code></pre> </li> <li> <p>DO NOT press [enter], but give the path to the Efinix installation in the <code>/opt</code> directory.     Enter <code>/opt/Efinix/efinity-riscv-ide-2024.1</code></p> <p>The output in the terminal is: <pre><code>Installing Efinity RISC-V Embedded Software IDE at /opt/Efinix/efinity-riscv-ide-2024.1\nEfinity RISC-V Embedded Software IDE Installation successfully completed\n</code></pre></p> </li> </ul> </li> <li> <p>Finally add below line to the earlier set Efinix environment settings in the .bash_aliases file     <code>. /opt/Efinix/efinity-riscv-ide-$EFINITY_VERSION/setup.sh</code></p> <p>important</p> <p>When Efinix FPGA tools are the only FPGA tools installed, or if Efinix tools are installed with Xilinx FPGA tools read the More about environment settings chapter.</p> </li> <li> <p>Start the Efinix RISC-V tools from within a command terminal by typing: efinity-riscv-ide &amp;</p> </li>"},{"location":"InstallEfinixTools/#freertos","title":"FreeRTOS","text":"<p>When starting the Efinity RISC-V software it will ask for the path to the FreeRTOS installation. That is something not installed and/or not downloaded yet.</p> <ul> <li> <p>Download the FreeRTOS from https://www.freertos.org. Hit the [Download] tab at the top right of the screen.</p> </li> <li> <p>In the popup, select a version. The one presented is the latest stable version and hit [Download].     Save the downloaded file.</p> </li> <li> <p>Create a directory <code>FreeRTOS</code>in <code>/opt</code> <pre><code>cd /opt/Efinix\nmkdir FreeRTOS\n</code></pre></p> </li> <li> <p>Use file roller to uncompress the just downloaded FreeRTOS zip file into the just created <code>/opt/Efinix/FreeRTOS</code>directory. After the uncompress operation there will be a sub-directory FreeRTOS*\\* in the /opt/Efinix/FreeRTOS`directory. <li> <p>Each time when the RISC-V Efinix tool is started it will ask for the root directory of the FreeRTOS installation. To prevent this and set once and for all the FreeRTOS directory do:</p> <ul> <li> <p>Open with a text editor the setup.sh file in the `/opt/Efinix/efinity-riscv-ide-\\ directory. <li> <p>Comment ( put a # in front of each text line) all of following text      <pre><code> Prompt the user for the directory of freertos_src folder\necho \"Enter the directory of freertos_src folder \"\nread -p \" (Enter if no freertos src required): \" FREERTOS_DIR\n\n Check if the directory exists\n if [ -d \"$FREERTOS_DIR/FreeRTOS\" ]; then\n    echo \"Valid FreeRTOS Kernel input at $FREERTOS_DIR\"\n    export FreeRTOS_KERNEL_SRC=$FREERTOS_DIR\n   # Additional actions you want to perform if the directory exists\n else\n    echo \"Invalid FreeRTOS Kernel directory. \"\n    echo \"Ensure you inputted the correct directory. No FreeRTOS Kernel set.\"\n fi\n</code></pre></p> </li> <li> <p>Add after the commented text following lines and save the file.     <pre><code>FREERTOS_DIR=/opt/Efinix/FreeRTOS/FreeRTOS&lt;version&gt;\nexport FreeRTOS_KERNEL_SRC=$FREERTOS_DIR\necho \"Valid FreeRTOS Kernel input at $FREERTOS_DIR\"\n</code></pre></p> </li> <p>important</p> <p>When ever a new Efinix RISC-V IDE environment is installed or when a new FreeRTOS system is installed, the setup.sh file must be changed.</p>"},{"location":"InstallEfinixTools/#more-about-environment-settings","title":"More about environment settings","text":""},{"location":"InstallEfinixTools/#a-script-for-efinix","title":"A script for Efinix","text":"<p>As written before, the Efinix path settings are placed in front of all other path settings blocking normal Python development. Therefore a small script is created and source from the bash_aliases file.</p> <ul> <li> <p>Add following to the .bash_aliases file and save it afterwards</p> <pre><code># Source a script that sets environments for Efinix FPGA tools\n. .EfinixFpgaEnv.sh\n</code></pre> </li> <li> <p>Create in the users home directory a script. Start a text editor (Xed, Gedit, Code, ..), create a new text file and name it .EfinixFpgaEnv.sh or give it another name, but make the name understandable.</p> </li> <li> <p>Drop below text in the open text file and save it afterwards.</p> </li> <li> <p>Text for the script:     <pre><code>#!/bin/bash\n#\n# Arrive here from .bash_aliases to make a decide if the Efinix tools environment \n# variables are going to be set.\n########################################################\n#\nAskQuestion () {\n    read -p \" Use Efinix FPGA tools or No tools at all? (E/N) : \" Answr\n    if [ \"${Answr,,}\" == \"e\" ]; then\n        EnvsFor=Efnx\n    elif [ \"${Answr,,}\" == \"n\" ]; then\n        EnvsFor=Quit\n    else\n        echo \" Probably entered wrong answer! \"\n        AskQuestion\n    fi\n}\n#\nSetEfnxEnvs () {\n    # Efinity FPGA\n    export EFINITY_VERSION=2024.1\n    export EFINITY_VERSION=2024.1\n    export EFINITY_HOME=/opt/Efinix/efinity/$EFINITY_VERSION/\n    export PATH=$PATH:EFINITY_HOME/bin\n    . /opt/Efinix/efinity/$EFINITY_VERSION/bin/setup.sh\n    . /opt/Efinix/efinity-riscv-ide-$EFINITY_VERSION/setup.sh\n    echo \" Efinix Efinity tool is started by typingh: efinity &amp; \"\n    echo \" Efinityy-RISC-V tool is started by typing: efinity-riscv-ide &amp; \"\n    sleep 1\n}\n#\nSetNone () {\n    echo \" No FPGA environments are set. \"\n}\n#=====================================================================================\n# Start/run the script to create a new project or library\n#=====================================================================================\necho \" Set the environment variables for the Efinix FPGA tools \"\necho \" or do not set any FPGA tool variables at all. \"\n#\nsleep 1\nAskQuestion\nif [ \"$EnvsFor\" = \"Efnx\" ]; then\n    SetEfnxEnvs\nelif [ \"$EnvsFor\" = \"Quit\" ]; then\n    SetNone\nelse\n    AskQuestion \nfi\n#\n# The end\n</code></pre></p> </li> </ul>"},{"location":"InstallEfinixTools/#a-script-for-efinix-and-xilinx","title":"A script for Efinix and Xilinx","text":"<ul> <li> <p>When both Efinix and Xilinx FPGA tools installed make use of a sourced script in the bash_aliases file.      Add with a text editor following lines in the bash_aliases file</p> <pre><code># Source a script that sets environments following the used FPGA technology.\n# The script asks if Xilinx or Efinix FPGA are going to be used and set the\n# required environment variables accordingly.\n. .SelectFpgaEnv.sh\n</code></pre> </li> <li> <p>When both Efinix and Xilinx FPGA tools are installed vendor scripts doesn't need to be altered.</p> </li> <li> <p>Create in the users home directory a script. Start a text editor (Xed, Gedit, Code, ..), create a new text file and name it .SelectFpgaEnv.sh or give it another name, but make the name understandable.</p> </li> <li> <p>Drop below text in the open text file and save it afterwards.</p> </li> <li> <p>Text for the script:     <pre><code>#!/bin/bash\n#\n# Arrive here from .bash_aliases to make a selection on what \n# FPGA tools to set the environments for. This approach has been \n# taken because the Efinix tools are taking over the default \n# Python environment and that can not be tolerated.\n#\n########################################################\n#\nAskQuestion () {\n    read -p \" Use FPGA tools for Xilinx, Efinix or No tools at all? (X/E/N) : \" Answr\n    if [ \"${Answr,,}\" == \"x\" ]; then\n        EnvsFor=Xlnx\n    elif [ \"${Answr,,}\" == \"e\" ]; then\n        EnvsFor=Efnx\n    elif [ \"${Answr,,}\" == \"n\" ]; then\n        EnvsFor=Quit\n    else\n        echo \" Probably entered wrong answer! \"\n        AskQuestion\n    fi\n}\n#\nSetXlnxEnvs () {\n    # Xilinx Tools\n    export XILINX_VERSION=2024.1\n    #\n    export XILINX_VIVADO=/opt/Xilinx/Vivado/$XILINX_VERSION\n    export XILINX_HLS=/opt/Xilinx/Vitis_HLS/$XILINX_VERSION\n    export XILINX_VITIS=/opt/Xilinx/Vitis/$XILINX_VERSION\n    export XILINX_DOCNAV=/opt/Xilinx/DocNav\n    #\n    export PATH=$PATH:$XILINX_VIVADO/bin\n    export PATH=$PATH:$XILINX_HLS/bin\n    export PATH=$PATH:$XILINX_VITIS/bin\n    export PATH=$PATH:$XILINX_DOCNAV\n    #\n    # PetaLinux\n    . /opt/Xilinx/PetaLinux/$XILINX_VERSION/tool/settings.sh\n    echo \" Vivado is started by typing: vivado &amp; \"\n    echo \" Vitis is started by typing: vitis &amp; \"\n    echo \" PetaLinux settings done. \"\n    sleep 1\n}\n#\nSetEfnxEnvs () {\n    # Efinity FPGA\n    export EFINITY_VERSION=2024.1\n    export EFINITY_VERSION=2024.1\n    export EFINITY_HOME=/opt/Efinix/efinity/$EFINITY_VERSION/\n    export PATH=$PATH:EFINITY_HOME/bin\n    . /opt/Efinix/efinity/$EFINITY_VERSION/bin/setup.sh\n    . /opt/Efinix/efinity-riscv-ide-$EFINITY_VERSION/setup.sh\n    echo \" Efinix Efinity tool is started by typingh: efinity &amp; \"\n    echo \" Efinityy-RISC-V tool is started by typing: efinity-riscv-ide &amp; \"S\n    sleep 1\n}\n#\nSetNone () {\n    echo \" No FPGA environments are set. \"\n}\n#=========================================================================================\n# Start/run the script to create a new project or library\n#=========================================================================================\necho \" Set the environment variables for the Xilinx FPGA tools \"\necho \" or set the environment variables for the Efinix FPGA tools \"\necho \" or do not set any FPGA tool variables at all. \"\n#\nsleep 1\nAskQuestion\nif [ \"$EnvsFor\" = \"Xlnx\" ]; then\n    SetXlnxEnvs\nelif [ \"$EnvsFor\" = \"Efnx\" ]; then\n    SetEfnxEnvs\nelif [ \"$EnvsFor\" = \"Quit\" ]; then\n    SetNone\nelse\n    AskQuestion \nfi\n#\n# The end\n</code></pre></p> </li> <li> <p>When a command terminal is started, it will ask if Xilinx or Efinix or no tools are going to be used.     Answer X, E or N (not case sensitive).</p> </li> </ul>"},{"location":"InstallXilinxTools/","title":"Xilinx Tools Setup","text":""},{"location":"InstallXilinxTools/#overview","title":"Overview","text":"<p>This guide will work you through the process of setting up Vivado, Vitis and PetaLinux.</p> <p>Note</p> <p>The guide provides a global Xilinx/AMD tools installation but the first goal is/was to run Bare-Metal designs, Linux and Pynq designs on the Zynq 7000 Eclypse board.</p>"},{"location":"InstallXilinxTools/#installation","title":"Installation","text":"<p>Installing Xilinx/AMD tools can be done after downloading a binary installation file from the software download center of the XIlinx/AMD web site. Download the Linux Self Extracting installer (~220 MB) and save it.</p> <p>Important</p> <p>A Xilinx User Account is required to be able to do this.</p> <p>Self Extracting File</p> <ul> <li>Check if the downloaded file is executable and when it is:</li> <li>Start a command terminal and change directory to where the software installer file is saved.</li> <li> <p>Start the installer: <code>sudo ./&lt;File_name&gt;_Lin64.bin</code> and hit [Enter]</p> </li> <li> <p>Follow the installer and tell what needs to be installed.</p> </li> <li>At a point the installer shows the default installation directory (/tools/Xilinx) where it\u2019s going to create the installation. This is not following UNIX or Linux rules as optional or vendor software tools should be installed in the /opt directory. Thus change the proposed install directory to: /opt/Xilinx</li> </ul> <p>Note</p> <p>/opt (Optional Software): The /opt directory is used for optional software installed on the system. This directory can be used for installing software that is not included in the system\u2019s package manager. Optional files such as vendor supplied application programs should be located here.</p> <p>Important</p> <p>It is not possible to install multiple tools at the same time. If multiple tools need to be installed, the binary installer needs to be run once for each tool that needs to be installed.</p>"},{"location":"InstallXilinxTools/#setup","title":"Setup","text":"<p>important</p> <ol> <li> <p>Manjaro installation     When starting one of the tools (Vivado or Vitis) the tool will try to start but error out with this error     <code>\"/path/to/vivado/unwrapped/lnx64.o/vivado\" error while loading shared libraries:</code>     libcrypt.so.1: cannot open shared object file: No such file or directory`.</p> <ul> <li>The solution is to start PAMAC</li> <li>Click the magnifying glass and type in teh search bar: <code>libcrypt</code></li> <li>Select libxcrypt and libxcrypt-compat and click [Apply] to install the libraries.</li> </ul> <p>After installation of above libraries starting Vivado or Vitis pops up a second error </p> <p><code>application-specific initialization failed: couldn't load file \"librdi_commontasks.so\": libtinfo.so.5: cannot open shared object file: No such file or directory</code></p> <ul> <li>The solution is to start PAMAC</li> <li>Click the magnifying glass and type in teh search bar: <code>ncurses5</code></li> <li>Select ncurses5-compat-libs (AUR) and click [Apply] to install the library.</li> </ul> <p>Vitis and/or Vivado will now start without issues.</p> </li> <li> <p>Xilinx/AMD provides in AMD solution 73286 a script that can be used before PetaLinux is installed to check if all PetaLinux dependencies are met. If a dependency is not met, the script will install the tool or library. The script checks only supported OSses as Ubuntu and Red-Hat. Since this guide is written for a machine running Linux Mint (A full Ubuntu derivative) I\u2019ve adapted the script so that the Linux Mint user can also work safely. The adapted \u201cplnx-env-setup.sh\u201d script is available here.</p> </li> <li> <p>The shell used by the PetaLinux tools is the bash shell ( Bourne Again Shell). The script from  AMD solution 73286 and the modified script that goes with the user guide check if bash is the default shell. If not (sometimes the shell is set to dash) the shell is changed by the script to bash. The modified script can be downloaded form here.</p> </li> </ol> <p>The script used in point 2 calls the script used in point 3. Download both scripts in the same directory and run the script form poin 2 in order to fit also point 3.</p> <p>important</p> <p>Despite that after the script is executed and the shell is possibly changed from <code>dash</code> to <code>bash</code>, starting a command terminal (after .bash_aliases has been setup for Xilinx environments) might report back that bash is not the default shell. </p> <ul> <li>To get rid of this and be able to work, do in the command terminal:</li> <li>Type <code>ln -l /bin/sh</code>. The answer in the terminal should be /bin/sh -&gt; bash. When that is not the case, the return is /bin/sh -&gt; dash, the symbolic link must be moved manually.</li> <li>To manually change the symbolic link type in the command terminal <code>sudo ln -sf bash /bin/sh</code></li> <li>Type <code>ln -l /usr/bin/sh</code>. In most cases the return is No such file or directory (1), but it might be that the returned text is  /usr/bin/sh -&gt; bash (2) or  /usr/bin/sh -&gt; dash (3). <ol> <li>Everything is OK, nothing to change.</li> <li>Everything is OK, nothing to change.</li> <li>Make the link point to the bash shell, type in the command terminal <code>sudo ln -sf bash /usr/bin/sh</code></li> </ol> </li> <li>Close the terminal and re-open a new command terminal. The text should be as in \u201cEnvironment Settings for Vivado Vitis and PetaLinux\u201d.</li> </ul>"},{"location":"InstallXilinxTools/#environment-settings-for-vivado-vitis-and-petalinux","title":"Environment Settings for Vivado, Vitis and PetaLinux","text":"<p>As earlier written, it is assumed that the user is using a bash environment. When Vivado, Vitis and PetaLinux tools are all installed make a system setup so that tools can easily be started from the command line in a terminal Each of the Xilinx tools has a settings64.sh file. Sourcing that file sets all environment variables for the installed tools. Thus each time the Xilinx tools are going to be used one needs to source the setting64.sh script. Easier is to declare all the settings in the .bash_aliases file acting as a .bashrc companion file. </p> <p>Note</p> <ul> <li> <p>do not Put environment or other settings for installed tools in the main .bashrc file, but use a companion file that is automatically sourced by the .bashrc file. The companion file to use is the  .bash_aliases file.</p> </li> <li> <p>As pyenv is installed as Python development environment, protecting the system Python installation from being altered, its path needs to be in the absolute front of the system path.  Every installed vendor tool want to be in the front of the path and that is something that is prevented in below showed .bash_aliases text.</p> </li> </ul> <p>Open in the users home directory, using a text editor (xed, gedit, vim, code or ...), the \u201c.bash_aliases\u201d file and add</p> <pre><code># Xilinx Tools\nexport XILINX_VERSION=2024.1\n#\nexport XILINX_VIVADO=/opt/Xilinx/Vivado/$XILINX_VERSION\nexport XILINX_HLS=/opt/Xilinx/Vitis_HLS/$XILINX_VERSION\n#export XILINX_VITIS=/opt/Xilinx/Vitis/$XILINX_VERSION\n#\nexport PATH=$PATH:$XILINX_VIVADO/bin\nexport PATH=$PATH:$XILINX_HLS/bin\n#export PATH=$PATH:$XILINX_VITIS/bin\n#\necho \" Vivado, Vitis-HLS and Vitis settings done.\"\n#\n# PetaLinux\n. /opt/PetaLinux/settings.sh\n#\n</code></pre> <p>Save the .bash_aliases file.</p> <p>When starting a command terminal the .bash_aliases file is read after the main .bash file is read and all settings are done so that Vivado/Vitis/PetaLinux and other tools can be started.</p> <p>tip</p> <p>When the Efinix FPGA tools are installed or are going to be installed drop the Xilinx/AMD and Efinix environment settings in their own script file (example: .SelectFpgaEnv.sh). Make the file executable and call it from withing .bash_aliases. An example is provided in the \"More about environment settings\" chapter in the document discussing the Efinix FPGA tools installation.</p> <p>When new versions of the Xilinx/AMD tools must be installed, then:</p> <ul> <li>Rename the directory of the current installed tools. Example <code>/opt/Xilinx</code> to <code>/opt/Xilinx_Old</code>.</li> <li>Install the new Xilinx tools and set the install directory to be <code>/opt/Xilinx</code>.</li> <li>When the tools are installed, the only thing to change to get back up and running is the XILINX_VERSION environment in the .bash_aliases file or in the .SelectFpgaEnv.sh script.</li> </ul>"},{"location":"InstallXilinxTools/#development-boards","title":"Development Boards","text":"<p>When setting up a Vivado project one must select a FPGA family, part, package and speed range or select a board from a list of Xilinx and/or third party boards. When the tools are installed a list of boards is installed and from those a selection can be made.</p> <p>When the boards tab is selected, as showed in figure 2, a table with by Vivado recognised board is presented. When the files representing a board are installed, the column Status will show \u201cInstalled\u201d, when the board is not installed the \u201cStatus\u201d column will show a \u201cdown pointing arrow\u201d indicating that a mouse click on the arrow will download the board files.</p> <p>When a board is not present in the table list, one can hit the [Refresh] button in an attempt to update the table with the latest board information from Xilinx/AMD and partners.</p> <p>Another way to get boards installed is:</p> <ul> <li> <p>Xilinx and partners or even unrelated to Xilinx FPGA board manufactures publish on the GitHub page or on a dedicated own web page Vivado Board files for download.</p> </li> <li> <p>An example: </p> <ul> <li> <p>Digilent publishes on GitHub a set of all available Digilent boards for download.</p> </li> <li> <p>Download the file (vivado-boards-master.zip), store it and unzip it in a directory on the PC.</p> </li> <li> <p>Delete all files and directories, except the directory vivado-boards-master/new/board_files and its contents.</p> </li> <li> <p>Make a new directory with meaningful name, like Digilent_Boards and copy the content of the board_files directory in here.</p> </li> <li> <p>Using a file browser (Nemo), go to the users home directory, make all hidden directories and files visible (CTRL-H)</p> </li> <li> <p>Look for the directory .Xilinx</p> </li> <li> <p>Change into its sub-directory Vivado</p> </li> <li> <p>Create with a text editor a file Vivadi_init.tcl and let the content of the file be:</p> <pre><code>set_param board.repoPaths [list \"Path/to/the/board/directory\"]\n</code></pre> </li> <li> <p>If there are multiple directories with board files, like own made board files, separate the different path using \u201c \u201d. Like : </p> <pre><code>set_param board.repoPaths [list \"Path One\" \"Path Two\" \"...\"]\n</code></pre> </li> </ul> </li> </ul>"},{"location":"Install_Manage_Pyenv/","title":"PYENV & Python","text":""},{"location":"Install_Manage_Pyenv/#appendix-e-install-and-manage-pyenv-python","title":"Appendix E: Install and Manage Pyenv &amp; Python","text":"<ul> <li> <p>Before being able to flawless install pyenv some build dependencies need to be installed.     Installing pyenv means building it up from source. That process needs specific tools installed in the OS.</p> </li> <li> <p>Run below in a terminal for all pyenv Ubuntu/Mint build dependencies</p> <pre><code>sudo apt install -y make build-essential libssl-dev zlib1g-dev \\\nlibbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev \\\nlibncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python-openssl\n</code></pre> </li> <li> <p>When above dependencies are installed it's time to install pyenv itself.     Run below in a terminal (pyenv and Python are installed as user, so no need for sudo anymore):</p> <pre><code>curl https://pyenv.run | bash\n</code></pre> <p>Pyenv will be installed with a few useful plugins:</p> <ol> <li><code>pyenv</code>: The actual <code>pyenv</code> application</li> <li><code>pyenv-update</code>: Plugin for updating <code>pyenv</code></li> <li><code>pyenv-doctor</code>: Plugin to verify that <code>pyenv</code> and build dependencies are installed</li> <li><code>pyenv-which-ext</code>: Plugin to automatically lookup system commands</li> <li><code>pyenv-virtualenv</code>: Plugin for <code>pyenv</code> and virtual environments</li> </ol> <p>Finally the install will show something like this in the terminal</p> <pre><code>WARNING: seems you still have not added 'pyenv' to the load path.\n# Load pyenv automatically by adding\n# the following to ~/.bashrc:\nexport PATH=\"$HOME/.pyenv/bin:$PATH\"\neval \"$(pyenv init -)\"\neval \"$(pyenv virtualenv-init -)\"\n</code></pre> <p>Edit the <code>.bash_aliases</code>file in the users home directory and add the below given lines.</p> <pre><code># Pyenv Python installer, Python and other Python stuff goes below\nexport PYENV_ROOT=$HOME/.pyenv\nexport PATH=$PYENV_ROOT/bin:$PATH\neval \"$(pyenv init -)\"\neval \"$(pyenv virtualenv-init -)\"\n</code></pre> <p>As extra install the pyenv pip-migrate plugin. This plugin makes it easy to take libraries and packages installed with pip from one Python version into another.</p> <pre><code>git clone https://github.com/pyenv/pyenv-pip-migrate.git $(pyenv root)/plugins/pyenv-pip-migrate\n</code></pre> </li> <li> <p>Pyenv knows a lot of commands, the most used are listed here:</p> <ul> <li>help        Display help for a command</li> <li>version     Show the current Python version and its origin     --version   Display the version of pyenv</li> <li> <p>install     Install a Python version using python-build</p> </li> <li> <p>uninstall   Uninstall a specific Python version</p> </li> <li>local       Set or show the local application-specific Python version</li> <li>global      Set or show the global Python version</li> <li>migrate     Migrate pip packages from a Python version to another</li> </ul> <p>For all other pyenv command just type <code>pyenv</code> in a terminal or command window.</p> </li> </ul>"},{"location":"Install_Manage_Pyenv/#install-python","title":"Install Python","text":"<ul> <li>First find out what Python versions are available. This allows that the most recent version or the version required can be installed and use. From the list of versions several can be picked and installed.     In a terminal type: <code>pyenv install --list | grep \" 3\\.[6789]\"</code>     The terminal will output a list of available Python versions.     When omitting the <code>grep</code> the result will be a very long list!</li> <li>Find the version needed and install it as: <code>pyenv install -v 3.8.0</code>     Pyenv will install Python version 3.8.0 and the -v (verbose) will list a lot of text while installing and building Python. Remove the -v to get rid of most text lines.</li> <li>pyenv Installs each Pyhton version in its own directory under the pyenv umbrella.     The 3.8.0 version will be installed in <code>./home/&lt;user&gt;/.pyenv/versions/3.8.0</code>     When a second Python version is installed, let's say 3.7.4, it will reside in <code>~/.pyenv/versions/3.7.4</code>.</li> <li>Packages installed with pip (the pip belonging to the python version) are also installed under the directory ."},{"location":"Install_Manage_Pyenv/#use-a-installed-python-version","title":"Use a installed Python version","text":"<ul> <li> <p>Type in a terminal: <code>pyenv versions</code></p> </li> <li> <p>The output will most likely be something like:</p> <pre><code>* system (set by &lt;path/to/the/system/python)\n  2.7.15\n  3.7.4\n  3.8.0\n</code></pre> <p>The ***** shows what Python version is in use.</p> </li> <li> <p>To use one of the just installed Python versions type: <code>pyenv global 3.8.0</code>     Running <code>pyenv versions</code> will now have a ***** in front of 3.8.0 indicating that this is now the version used by you as user.</p> </li> <li> <p>To check if the installation went OK and is working fully type <code>python -m test</code> in the terminal.     This will run a long list of Python checks and test, assuring at the end everything works OK.     This command will take a long time as a lot of tests are run (interrupt with CTRL-C).</p> </li> <li> <p>Everything is ready now to start using Python.     But better first install some packages that make a programmers life easier.     Go to Python Libraries/Packages.</p> </li> </ul>"},{"location":"Install_Manage_Pyenv/#upgrade-a-python-installation","title":"Upgrade a Python installation","text":"<p>Every minor version of Python, that is any 3.x version, will install side-by-side with other versions on your computer. Only patch versions will upgrade existing installations.</p> <p>As for PyPI packages, every Python installation comes with its own folder where modules are installed into. So if you install a new version and you want to use modules you installed for a previous version, you will have to install them first for the new version.</p>"},{"location":"Install_Manage_Pyenv/#python-librariespackages","title":"Python libraries/packages","text":"<p>Python add-on libraries or packages are there to make life easier. When in need for something, in a lot of cases somebody already developed it. Those add-ons can be download from the PyPi website. PyPi is a huge database/repository of community developed and shared software utilities.</p> <p>PyPi packages are installed in a terminal/command window using pip (pip works the same for Linux and Microsoft).</p> <p>Remark:</p> <p>Using a Python version allows that a set of packages/libraries for/with that version are installed and used. The packages are installed in the same pyenv directory containing the Python version.</p> <p>When a new Python version is installed all in a previous version installed packages are gone. The remain installed with the old Python version.</p> <p>To get all previous used packages back into the new Python version use the pyenv-pip-migrate tool. <code>pyenv migrate &lt;old_version&gt; &lt;new_version&gt;</code> Like: pyenv migrate 3.7.4 3.8.0</p>"},{"location":"Install_Manage_Pyenv/#useful-stuff","title":"Useful Stuff","text":"<p>It is not that all what is mentioned and discussed below is you-need-to-have-this-or-else ... Below is just a set of packages I have installed and use.</p>"},{"location":"Install_Manage_Pyenv/#numpy","title":"Numpy","text":"<ul> <li> <p>NumPy is the fundamental package for scientific computing with Python. It contains     among other things:</p> <ul> <li>A powerful N-dimensional array object.</li> <li>Sophisticated (broadcasting) functions.</li> <li>Tools for integrating C/C++ and Fortran code.</li> <li>Useful linear algebra, Fourier transform, and random number capabilities.     Besides its obvious scientific uses, NumPy can also be used as an efficient multi-dimensional container of generic data. Arbitrary data-types can be defined. This allows NumPy to seamlessly and speedily integrate with a wide variety of databases.</li> </ul> </li> <li> <p>The numpy web site with documentation and more can be found here:</p> <ul> <li>https://numpy.org</li> </ul> </li> <li> <p><code>pip install numpy</code></p> </li> </ul>"},{"location":"Install_Manage_Pyenv/#matplotlib","title":"Matplotlib","text":"<ul> <li> <p>Matplotlib is a Python 2D plotting library which produces publication quality figures in a variety of hardcopy formats and interactive environments across platforms. Matplotlib can be used in Python scripts, the Python and |Python shells, the |: yr notebook, web application servers, and four graphical user interface toolkits.</p> </li> <li> <p>Matplotlib tries to make easy things easy and hard things possible. You can generate plots, histograms, power spectra, bar charts, errorcharts, Scatterplots, \u00a2 etc., with just a few lines of code. For examples, see the sample plots and thumbnail gallery For simple plotting the pyplot module rovides : a , MATLAB- like interface, \u201cparticularly when combined with IPython. For the power user, you have full control of line styles, font properties, axes properties, etc, via an object oriented interface or via a set of     functions familiar to MATLAB users.</p> </li> <li> <p>The matplotlib documentation can be found here:</p> <ul> <li>https://matplotlib.org</li> </ul> </li> <li> <p><code>pip install matplotlib</code></p> </li> </ul>"},{"location":"Install_Manage_Pyenv/#pandas","title":"Pandas","text":"<ul> <li> <p>Pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with structured (tabular, multidimensional, potentially heterogeneous) and time series data both easy and intuitive. It aims to be the fundamental high-level building block for doing practical, real world data analysis in Python.</p> </li> <li> <p>Pandas is well suited for many different kinds of data:</p> <ul> <li>Tabular data with heterogeneously-typed columns, as in an SQL table or Excel spreadsheet.</li> <li>Ordered and unordered (not necessarily fixed-frequency) time series data.</li> <li>Arbitrary matrix data (homogeneously typed or heterogeneous) with row and column labels</li> <li>Any other form of observational / statistical data sets. The data actually need not be labelled at all to be placed into a pandas data structure.</li> </ul> </li> <li> <p><code>pip install pandas</code></p> </li> </ul> <p>Above tools are all installed to make working with MyHdl easy. Jupyter allows one to write code and document it. Myhdl can create from a described hardware system verilog and/or vhdl files so that the system can be implemented in an FPGA using Vivado (Synthesis and implementation). On other side the output of MyHdl can be any other format that can be created by using python. Therefore the numpy, matplotlib and pandas python libraries can be used. Extra waveform help for those working with Jupyter notebook is offered with the MyHdlPeek library.</p>"},{"location":"Install_Manage_Pyenv/#jupyter","title":"Jupyter","text":"<ul> <li> <p>The Jupyter Notebook is an open-source web application that allows you to create and share documents that contain live code, equations, visualisations and narrative text. Uses include: data cleaning and transformation, numerical simulation, statistical modelling, data visualisation, machine learning, and much more. The next generation of Jupyter is called JupyterLabs and can be installed the same way as the classic Jupyter.</p> </li> <li> <p>The jupyter web site with documentation, tutorial and more can be found here:</p> <ul> <li>https://jupyter.org</li> </ul> </li> <li> <p><code>pip install jupyter     or     pip install jupyterlab</code></p> </li> </ul> <p>Remark: Use Jupyter notebook with VS code editor (or Atom)</p> <ul> <li> <p>Start VS Code</p> </li> <li> <p>Click the Marketplace button in the left vertical menu.</p> </li> <li>Type in the search bar Jupyter and install<ul> <li>Jupyter</li> <li>Jupyter Slide Show</li> <li>Jupyter Keymap</li> <li>Jupyter Notebook renderers</li> <li>Jupyter Cell Tags</li> </ul> </li> </ul>"},{"location":"Install_Manage_Pyenv/#myhdl","title":"MyHdl","text":"<ul> <li> <p>MyHDL turns Python into a hardware description and verification language, providing hardware engineers with the power of the Python ecosystem.</p> </li> <li> <p>The MyHdl documentation can be found here:</p> <ul> <li>https://myhdl.org</li> <li>https://doc.myhdl.org/en/stable</li> </ul> </li> <li> <p><code>pip install myhdl</code></p> </li> </ul>"},{"location":"Install_Manage_Pyenv/#myhdlpeek","title":"MyHdlPeek","text":"<ul> <li> <p>Why should or can you use this.</p> </li> <li> <p>In most designs the test bench is written out as a VCD file. This file format can be viewed by a waveform viewer as GtKwave, a free available tool for waveform viewing. The VCD file can also be displayed in the waveform viewer of Vivado[^1] or in Mentor Modelsim/Questasim[^2] when one or all of those are available or in other third party waveform viewers [<sup>3][</sup>4].</p> </li> <li> <p>MyHdlPeek provides a waveform viewer in the Jypiter notebook so that documenting notebooks with waveforms no longer require screen captures of waveform viewer windows. MyHdlPeek is a module that lets you monitor signals in a MyHDL digital system simulation and display them as wave-forms in a Jupyter notebook.</p> </li> <li> <p>Myhdlpeek implements a Peeker object that monitors a signal and records the time and value when it changes. Just add multiple Peekers where you want to monitor something (even at sub-levels of a hierarchical design) and then view the collected timing wave-forms with a single command. You can also select which signals are shown, set the beginning and ending times of the display, and set other options.</p> </li> <li> <p>Documentation can be found here:</p> <ul> <li>https://xesscorp.github.io/myhdlpeek/docs/_build/singlehtml/index.html</li> </ul> </li> <li> <p><code>pip install myhdlpeek</code></p> </li> </ul> <p>Below are two bonus Python libraries one can install to do more than just hardware system design. Pyside2 allows the use of QT for generating professional looking GUI tools and Urubu allows quick generation of static web pages.</p>"},{"location":"Install_Manage_Pyenv/#pyside","title":"PySide","text":"<ul> <li> <p>Qt for Python is the project that provides the official set of Python bindings (PySide2) that will supercharge your Python applications. While the Qt APIs are world renowned, there are more reasons why you should consider Qt for Python. The first official release of the PySide2 module is available now! But what is Qt (Qute)?</p> </li> <li> <p>Qt is a platform to create high-performance, intuitive (if they are designed to be) UI, applications and other for embedded, desktop and all kind of other platforms. Qt appears in our homes, our cars, our workplaces and our pockets smart devices. Qt makes sure you can create unique &amp; modern connected devices that stand out from the crowd.</p> </li> </ul>"},{"location":"Install_Manage_Pyenv/#installation","title":"Installation:","text":"<ul> <li> <p>Open a web browser and go to:     https://download.qt.io/snapshots/ci/pyside</p> </li> <li> <p>Double click the latest stable version, let\u2019s say 6.6/, and then double click latest</p> </li> <li> <p>Download the shiboken ** and **PySide files with manylinux and x86_64 in the filename.</p> </li> <li> <p>Save the downloaded wheel file.     All filenames have the .whl (wheel) extension.</p> </li> <li> <p>Open a command window and type:</p> <pre><code>pip install &lt;drive&gt;:/&lt;Path&gt;/To/Downloaded/wheel/File\n</code></pre> </li> </ul>"},{"location":"Install_Manage_Pyenv/#remark","title":"Remark:","text":"<ul> <li>To do stuff with PySide, the Qt tools must be installed. That is subject for another text.</li> <li>Qt (cute) is basically an aid to give to C/C++ easy graphical possibilities.</li> <li>Due to that PySide has dependencies to a C/C++ parser clang.</li> </ul> <p>A complete Python IDE that can be installed using pip:</p>"},{"location":"Install_Manage_Pyenv/#spyder","title":"Spyder","text":"<ul> <li> <p>Spyder is a kind of all in one tool for Python development.</p> </li> <li> <p>Spyder is a powerful scientific environment written in Python, for  Python, and designed by and for scientists, engineers and data analysts. It offers a unique combination of the advanced editing, analysis,  debugging, and profiling functionality of a comprehensive development  tool with the data exploration, interactive execution, deep inspection,  and beautiful visualization capabilities of a scientific package.</p> <p>Beyond its many built-in features, its abilities can be extended even further via its plugin system and API. Furthermore, Spyder can also be  used as a PyQt extension library, allowing developers to build upon its functionality and embed its components, such as the interactive  console, in their own PyQt software.</p> </li> <li> <p>Web site:</p> <ul> <li>https//www.spyder-ide.org</li> </ul> </li> <li> <p>Before installation these dependencies MUST be installed.</p> <ul> <li> <p>Python 2.7 or &gt;=3.3        DO NOT USE Python 2 ANYMORE, please!</p> </li> <li> <p>PyQt5 &gt;=5.5</p> </li> <li> <p>Qtconsole &gt;=4.2.0 \u2013 for an enhanced Python interpreter.</p> </li> <li> <p>Rope &gt;=0.9.4 and Jedi &gt;=0.9.0 \u2013 for code completion, go-to-definition and calltips in the Editor.</p> </li> <li> <p>Pyflakes  \u2013 for real-time code analysis.</p> </li> <li> <p>Sphinx \u2013 for the Help pane rich text mode and to get our documentation.</p> </li> <li> <p>Pygments &gt;=2.0 \u2013 for syntax highlighting and code completion in the Editor of all file types it supports.</p> </li> <li> <p>Pylint  \u2013 for static code analysis.</p> </li> <li> <p>Pycodestyle \u2013 for style analysis.</p> </li> <li> <p>Psutil  \u2013 for memory/CPU usage in the status bar.</p> </li> <li> <p>Nbconvert \u2013 to manipulate Jupyter notebooks on the Editor.</p> </li> <li> <p>Qtawesome &gt;=0.4.1 \u2013 for an icon theme based on FontAwesome.</p> </li> <li> <p>Pickleshare \u2013 To show import completions in the Editor and Consoles.</p> </li> <li> <p>PyZMQ \u2013 To run introspection services in the Editor asynchronously.</p> </li> <li> <p>QtPy &gt;=1.2.0 \u2013 To run Spyder with different Qt bindings seamlessly.</p> </li> <li> <p>Chardet &gt;=2.0.0\u2013 Character encoding auto-detection in the Editor.</p> </li> <li> <p>Numpydoc Used by Jedi to get return types for functions with Numpydoc docstrings.</p> </li> <li> <p>Cloudpickle Serialize variables in the IPython kernel to send them to Spyder.</p> <p>Optional Modules</p> </li> <li> <p>Matplotlib &gt;=1.0 \u2013 for 2D and 3D plotting in the consoles.</p> </li> <li> <p>Pandas &gt;=0.13.1 \u2013 for viewing and editing Series and DataFrames in the Variable Explorer.</p> </li> <li> <p>Numpy \u2013 for viewing and editing two or three dimensional arrays in the Variable Explorer.</p> </li> <li> <p>Sympy &gt;=0.7.3 \u2013 for working with symbolic mathematics in the IPython console.</p> </li> <li> <p>Scipy \u2013 for importing Matlab workspace files in the Variable Explorer.</p> </li> <li> <p>Cython &gt;=0.21 \u2013 to run Cython files or Python files that depend on Cython libraries in the IPython console.</p> </li> </ul> </li> <li> <p>Install now Spyder</p> <ul> <li><code>pip install spyder</code></li> </ul> </li> <li> <p>After installation, launch Spyder and customise it to your needs.</p> </li> <li> <p>Something that might be useful in Spider is Kite.</p> <p>Kite</p> <ul> <li>Kite is a plugin for Spyder.</li> <li>Kite is a free AI-powered autocomplete for Python developers. Code faster with the Kite plugin for your code editor, featuring Intelligent Snippets, Line-of-Code Completions, Python docs, and cloudless processing.</li> <li>Read also this article before you start:<ul> <li>https://qz.com/1043614/this-startup-learned-the-hard-way-that-you-do-not-piss-off-open-source-programmers/</li> </ul> </li> <li>Web site:<ul> <li>https://kite.com/</li> </ul> </li> <li>Install Kite<ul> <li>When Spyder is launched the first time, it is possible that a popup appears asking to install Kite. Thus, just follow the installation procedure.</li> <li>If no popup appear or not using Spyder but Atom and want Kite, go to the Kite web site and follow the install procedure.</li> </ul> </li> </ul> </li> </ul>"},{"location":"Numlockx/","title":"Numlockx","text":""},{"location":"Numlockx/#numlockx","title":"Numlockx","text":"<p>If there is no file 55numlockx in the directory path /etc/X11/Xsession.d, create in that directory a file called 55numlockx with content as showed below.</p> <p><code>sudo gedit /etc/X11/Xsession.d/55numlockx</code></p> <pre><code># X session startup script: /etc/X11/Xsession.d/55numlockx\n\n# Initial settings\nNUMLOCK=auto\n\n# Load configuration\ncf=/etc/default/numlockx\n[ ! -r $cf ] || . $cf\n\n# Toggle numlock if we're not removed\nnlx=/usr/bin/numlockx\n[ ! -x $nlx ] || {\n    case $NUMLOCK in\n        # 'keep' is an undocumented state (see `man 1 numlockx'), though\n        # /etc/default/numlockx mentions it; do nothing\n        keep)\n            return 0\n            ;;\n        off|on|toggle)\n            ;;\n        *)\n            NUMLOCK=on\n            if [ -x /usr/sbin/laptop-detect ];then\n                ltd=/usr/sbin/laptop-detect\n            else\n                ltd=/usr/bin/laptop-detect\n            fi\n            [ ! -x $ltd ] || ! $ltd || NUMLOCK=off\n            # Enable numlock for USB keyboard on laptop\n            if [ -f /bin/udevadm ] ; then\n                for kbd in `udevadm trigger --dry-run --verbose --property-match=ID_INPUT_KEYBOARD=1` ; do\n                    if udevadm info --query=env --path=$kbd | grep -q '^DEVNAME=' ; then\n                        continue\n                    fi\n                    if udevadm info --query=env --path=$kbd | grep -q '^ID_USB_DRIVER=usbhid' ; then\n                        NUMLOCK=on\n                    fi\n                done\n            fi\n            ;;\n    esac\n    $nlx $NUMLOCK || :\n}\n# EOF\n</code></pre>"},{"location":"Remove_SNAP/","title":"Remove SNAP","text":""},{"location":"Remove_SNAP/#remove-snap","title":"Remove SNAP","text":"<ul> <li> <p>Open a terminal and view the list of SNAP packages installed in your system by typing <code>snap list</code> at the command line. The command shows the snap packages such as Firefox, Software store, themes and other core packages installed by default.</p> </li> <li> <p>Remove the snap packages in the following order.</p> <ol> <li> <p>sudo snap remove --purge firefox</p> </li> <li> <p>sudo snap remove --purge snap-store</p> </li> <li> <p>sudo snap remove --purge gnome-\\&lt;version&gt;</p> </li> <li> <p>sudo snap remove --purge gtk-common-themes</p> </li> <li> <p>sudo snap remove --purge snapd-desktop-integration</p> </li> <li> <p>sudo snap remove --purge bare</p> </li> <li> <p>sudo snap remove --purge core*\\* <li> <p>sudo snap remove --purge snapd</p> </li> <li> <p>Finally, emove the snap daemon per: <code>sudo apt remove --autoremove snapd</code></p> </li> <li> <p>That\u2019s not all. The sudo apt update command brings back SNAP if the apt trigger is not stopped.     Create the new file nosnap.pref in /etc/apt/preferences.d/ to stop snap from being brought back.     <code>sudo -H gedit /etc/apt/preferences.d/nosnap.pref</code></p> <p>Note</p> <p>The <code>gedit</code>text editor can be replaced by every on the system available editor as there are: vim, code, xed, gnome-text-editor, ...</p> </li> <li> <p>Add the following lines to the just created and empty file and save the file.</p> <pre><code>Package: snapd\nPin: release a=*\nPin-Priority: -10\n# Pin-Priority: -10 means preventing a package from installation\n</code></pre> <p>Run now: <code>sudo apt update</code> Done and getting rid of the snap.</p> </li> <li> <p>Re-install the removed snap tools the start of this journey</p> <ul> <li> <p>Install the apt version of the Gnome Software.     <code>sudo apt install --install-suggests gnome-software</code></p> <p>Important</p> <p>Make sure to use \u2018\u2019--install-suggests\u2019. Otherwise, it will install the snap version again.</p> </li> <li> <p>Install the not snap version of Firefox (use the official PPA).</p> <pre><code>sudo add-apt-repository ppa:mozillateam/ppa\nsudo apt update\nsudo apt install -t 'o=LP-PPA-mozillateam' firefox\n</code></pre> <ul> <li> <p>Enable automatic Firefox updates</p> </li> <li> <p><code>echo 'Unattended-Upgrade::Allowed-Origins:: \"LP-PPA-mozillateam:${distro_codename}\";' | sudo tee /etc/apt/apt.conf.d/51unattended-upgrades-firefox</code></p> </li> <li> <p>Last but not least, create a preference file for Firefox to give super high priority to the above PPA while running apt.     Omitting this pulls back Firefox snap and brings back all snap packages.</p> </li> <li> <p>Create, as sudo/root, a new file mozillateamppa in /etc/apt/preferences.d/</p> </li> <li> <p>Add following lines into the new file</p> <pre><code>Package: firefox*\nPin: release o=LP-PPA-mozillateam\nPin-Priority: 501\n</code></pre> </li> </ul> </li> </ul> </li>"},{"location":"Rocinante-LinuxMint/","title":"Rocinante-Linux Mint","text":""},{"location":"Rocinante-LinuxMint/#introduction","title":"Introduction","text":"<p>Installing Linux Mint or Ubuntu is for both performing and following nearly the same mouse clicks and typing the same command terminal lines. Searching and starting tools in Ubuntu is done by hitting the [show apps] button and then start typing \"name of the tool or tool function that needs to be started ...\". While typing the name or function of the required tool a list is presented so one can click the tool icon most of the time after a few typed letters.</p> <p>Searching and starting tool in Linux Mint goes nearly the same, but here one needs to click the bottom left screen corner main Linux mint menu icon. Then start typing \"name of the tool or tool function that needs to be started ...\". While typing the name or function of the required tool a list is presented so one can click the tool icon most of the time after a few typed letters.</p>"},{"location":"Rocinante-LinuxMint/#install-linux-mint","title":"Install Linux Mint","text":"<ul> <li> <p>Download the Linux-Mint regular or edge ISO, at time of writing; version 21.3, and write it to a USB thumb-drive</p> </li> <li> <p>Boot form the thumb-drive and select Try or install Linux-Mint (1<sup>st</sup> choice) from the GRUB menu.</p> <ul> <li>Double click the CD-like Install Linux Mint icon.</li> <li>Select the language for the installation</li> <li>Select the keyboard and it's variant</li> <li>Vote to install extra multi-media codecs</li> </ul> </li> <li> <p>Tell how Linux Mint should be installed and chose for the:</p> <ul> <li> <p>\"Erase disk and install Linux Mint\" when you want an installation when the installer makes the partitioning choice. A pane will pop up telling that the entire disk is going to be used for the installation.</p> </li> <li> <p>\"Something else\" when you want to partition the disk(s) yourself before installing the whole shebang. When this option is chosen, the installer will show a screen were the disks can be partitioned, named and formatted.</p> <p>Tip</p> <p>Before partitioning the disk(s) make a list, for the disk setup of your system, as the one given in the Rocinante document. This will get rid of a lot of possible (most likely) frustration.</p> </li> </ul> </li> <li> <p>Follow the install pages and provide the correct answers.</p> </li> </ul> <p>Go and have a cup of coffee, hot chocolate or cup of thee with coffee corner chat and upon return Linux Mint is going to be installed. The installer is asking to remove the USB thumb drive and hit [Enter]. Do it to reboot in Ubuntu.</p>"},{"location":"Rocinante-LinuxMint/#after-the-first-reboot","title":"After the First Reboot","text":"<p>Important</p> <p>During the evolution of the text, software can and will be installed. Installing, updating and/or upgrading software requires root access.  When the Installation, update and/or upgrade is done using GUI type of tools a popup will be presented asking for the root password. When installing, updating and/or upgrading software in a command terminal root access is obtained by the sudo keyword (sudo followed by a command). The command line interface will ask for the root password.</p>"},{"location":"Rocinante-LinuxMint/#updates","title":"Updates","text":"<ul> <li> <p>This is an important part of the whole text!     Updates and backups are life savers!</p> </li> <li> <p>Check if the installer tool implemented the latest updates/upgrades for the OS and pre-installed software tools.</p> </li> <li> <p>Hit the [Linux Mint] icon in the left screen bottom, start typing \"update ...\". While typing the list of possible installed tools will get smaller and after having typed the word \"update \" select the Update Manager</p> </li> <li>When all updates are installed the tool displays: Your system is up to date</li> <li>Anyway, while here it's time to configure the Update Manager tool.</li> <li> <p>Hit the [Linux Mint] icon in the left screen bottom, type \"update ...\". Select Software Sources</p> <ul> <li>Official Repositories<ul> <li>Click Mirrors Main and afterwards click Mirrors Base. Select for each the mirror at the top of the list (The one with the lowest ping)</li> </ul> </li> <li>PPAs, Additional Repositories and Authentication Keys<ul> <li>These items will be at first empty. When installing tools, the GUI tool installer will add here the repository address and authentication key of the tool so that it gets automatically updated. A command line install, using apt, will get as first a command line to add the repository address and  authentication key. Afterwards thos things are found here.</li> </ul> </li> <li>Maintenance<ul> <li>If ever the updater has issues with repositories and/or authentication keys, this menu tab can solve, mostly, the issue. Use one after the other the first four buttons to get things back on the rails. </li> </ul> </li> </ul> </li> <li> <p>It might be that when closing the tool a window pops up telling that the information gathered is out of date. Check that all modifications work by clicking [Refresh].</p> </li> </ul>"},{"location":"Rocinante-LinuxMint/#backups","title":"Backups","text":"<ul> <li> <p>Timeshift is the Linux equivalent of Apple's Time Machine. Thus Timeshift is the must have tool. Linux-Mint has this tool installed by default,  Timeshift is be available from the [Linux Mint] icon in the left screen bottom but also from the command line then it will work without GUI interface. </p> <ul> <li> <ul> <li> <p>Hit the [Linux Mint] icon in the left screen bottom, start typing \"timeshift\".         Double click the timeshift icon to start the GUI version of Timeshift</p> <ul> <li> <p>Click [Settings]</p> <ul> <li> <p>[Location]: indicate where Timeshift can drop it's backups of the system </p> <p>Note</p> <p>At least 1 TB to 2 TB is required as a decent backup space. The Timeshift storage location can be set onto the NAS drive (setup is discussed later in this document) as that device has most of the time lots of space. Another option is, like in the the provided partition table shown, to install a 2 TB drive only for Timeshift backups.</p> </li> <li> <p>[Schedule]: Tell the system when to backup and how many backups to keep.     Example: hourly, 1 backup and daily 2 backups.</p> </li> <li> <p>[Filters]: Tell the system what, and what not to backup.</p> </li> <li> <p>Click [OK]</p> </li> </ul> </li> <li> <p>Click [Create] to make the first set of backups.</p> </li> </ul> </li> <li> <p>Close the Timeshift tool</p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"Rocinante-LinuxMint/#logs","title":"Logs","text":"<ul> <li>One thing to know; if warnings and/or errors are listed here, it means they are not blocking or at first harmful to the Linux and desktop environment. That does not mean that the listed items don't need to be solved. </li> <li>After a start or reboot of the PC and Linux, do start the Logs tool and solve any listed item.</li> <li> <p>Type Hit the [Linux Mint] icon in the left screen bottom and start typing \"Logs\", select the Logs tool.</p> <ul> <li>When the tool is started, under Important all warnings and errors that need attention are listed. </li> <li>One of the listed items can be the warning about the /tmp discussed in the main Rocinante document. Go to the tmp_fstab_Issue document and solve the problem.</li> </ul> </li> <li> <p>Reboot and again type \"Logs\" Hit the[Linux Mint] icon in the left screen bottom and start the logs tool.     It is possible that a warning message appears about \u201csomething ... casper\u201d.     This casper tool is not of any use when not porting Linux and can thus be disabled.     Do this as:</p> <p><code>sudo sysemctl disable casper-md5check.service</code></p> </li> <li> <p>Possible the next and only warning left will be about gkr-pam.      This message can safely be ignored.</p> </li> <li> <p>If there are other warnings or errors listed, select the text and copy it in a browser to search for possible solution on the WWW.</p> </li> </ul>"},{"location":"Rocinante-LinuxMint/#graphics","title":"Graphics","text":"<ul> <li> <p>For the AMD GPU graphics card installation do:</p> <ul> <li> <p>Download and safe the latest AMD graphical and GPU driver software: \u201camdgpu-install_6.0.60002-1_all.deb\u201c     <code>sudo apt install ./amdgpu-install_6.0.60002-1_all.deb</code></p> </li> <li> <p>Setup the GPU software     <code>amdgpu-install --opencl=rocr --vukan=pro --usecase=workstation</code></p> <p>Note</p> <p>Do not run this command as sudo</p> <ul> <li> <p>Add the \\&lt;user&gt; to the \u201cvideo\u201d group     <code>sudo usermod -a -G video &lt;user&gt;</code></p> </li> <li> <p>Change the configuration file:<code>/etc/udev/rules.d/70-amdgpu.rules</code></p> <p>Change: \u201cgroup == video\u201d to \u201cgroup = video\u201d</p> </li> <li> <p>Add: <code>export PATH=$PATH:/opt/amdgpu:/opt/amdgpu-pro:/opt/rocm</code> to the .bash-aliases file.</p> <p>Note</p> <p>Do not alter the default .bashrc file but use a .bash-aliases file for all bash customisation. The .bashrc file automatically looks for an existing bash-aliases file. When there is one, it uses it when not is just continues.</p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"Rocinante-LinuxMint/#games","title":"Games","text":"<ul> <li>If you don't play simple games, remove all pre-installed games.</li> </ul>"},{"location":"Rocinante-LinuxMint/#kernel","title":"Kernel","text":"<ul> <li> <p>Linux-Mint is a conservative user of Ubuntu Linux kernels.      The latest available 21.3 version uses Ubuntu 22.04, 5.15. ... kernel </p> </li> <li> <p>Maybe it is worth to upgrade Linux kernel 6.5 or newer.      To install the Linux kernel easily:</p> <ul> <li>Start a command terminal.     Type Hit the [Linux Mint] icon in the left screen bottom and start typing \"terminal\" select the Terminal tool.</li> <li>Type following lines, press [Enter] after each line to execute the command     <code>sudo add-apt-repository ppa:cappelikan/ppa -y</code> <code>sudo apt update</code>sudo apt install mainline`</li> <li>To upgrade to a new Linux kernel use the graphical mainline tool.     Type Hit the [Linux Mint] icon in the left screen bottom and start typing \"mainline\" select the Mainline tool.</li> </ul> <p>\u200b       If possible use a \u201cgeneric\u201d core instead of a \u201dHWE\u201d core.</p> </li> </ul>"},{"location":"Rocinante-LinuxMint/#numlockx","title":"Numlockx","text":"<p>Useful to have installed is \"numlockx\". It makes the numeric keypad of a keyboard available without the need to push the [Numlock] key.</p> <p><code>sudo apt install numlockx</code></p> <p>After installation check <code>/etc/X11/Xsession.d</code> for a file called <code>55numlockx</code> If the file exist, everything will work If the file does not exist, go to the Numlockx document and create a file as is discussed in the text..</p>"},{"location":"Rocinante-LinuxMint/#remove-snap","title":"Remove SNAP","text":"<p>There is no need to remove SNAP, as it is not installed by Linux Mint. Why Linux Mint does not support SNAP is explained here.</p>"},{"location":"Rocinante-LinuxMint/#nas-devices","title":"NAS devices","text":"<p>When having a NAS device connected to the network, enable access to its directories</p> <ul> <li> <p>Install the NFS clients software, the NAS is normally the host, which provides NFS functionality without including any server components</p> <pre><code>sudo apt update\nsudo apt install nfs-common\nsudo apt install nfs-kernel-server\n</code></pre> </li> <li> <p>Add the user(s) to the netdev group     <code>sudo usermod -a -G groupname username</code> or for user marc and netdev: <code>sudo usermod -a -G netdev marc</code></p> </li> <li> <p>Add the different users and their directories to the fstab file. The NAS drive users and their directories are mounted, using NFS, as if they were regular drives locally to the computer, this makes it look as if the NAS drive is part of the drives in the PC</p> </li> <li> <p>Open with a text editor the /etc/fstab file     <code>sudo gedit /etc/fstab</code></p> <ul> <li>gedit can be every other text editor as: gnome-text-editor, code, xed, vi, ...</li> </ul> </li> <li> <p>Add the NAS drive and its user directories to the file and provide a mount point for ec     <pre><code>&lt;NAS IP&gt;/&lt;Volume&gt;/&lt;User&gt; /mnt/&lt;NAS Directory&gt; nfs4 &lt;nfs options&gt; 0 0\n</code></pre></p> <p>example:</p> <pre><code>NAS-IP:/volume1/Marc /mnt/Marc nfs4 x-systemd.automount,_netdev,noacl,nocto,rsize=32768,wsize=32768 0   0\n</code></pre> </li> <li> <p>Restart to let the modified fstab file be read.     It will create directories at the given mount points and with the given names.     Example: If the NAS drive/directory is in the fstab file coupled to /mnt/Marc then; after reboot there will be a /Marc directory under the /mnt system directory.</p> </li> <li> <p>It is possible, most likely, that the created files and possible directories are owned by root and that the content of the directories is not accessible by the user of the machine.     To get this solved do:</p> <ul> <li>Disable the nfs NAS mount points in the fstab file. Put a # in front of each line.</li> <li>Reboot the machine.</li> <li>It is possible, most likely, that the created files and possible directories are owned by root and that therefore the content of the directories is not accessible by the user of the machine.     To get this solved do:<ul> <li>Disable the nfs NAS mount points in the fstab file (Put a # in front of each line).</li> <li>Reboot the machine.</li> <li>After boot go to the /mnt system directory (the earlier created directories are still there) and change the owner, group and access permissions of the directories, these directories are constructed by nfs due to the execution of the root owned fstab at the first boot.</li> <li>Enable the nfs NAS mount lines in the fstab file (remove the #).</li> <li>Reboot the machine.</li> <li>Now accessing the NAS directories should work.</li> </ul> </li> </ul> </li> <li> <p>Directories and other stuff created on the NAS might be owned by a user user. Therefore it might be necessary to make the Linux user part of the group users, by:      <code>sudo usermod -a -G users &lt;user&gt;</code></p> <p>Other groups the user might be part of</p> <ul> <li>When planning to use openvpn add the user to nm-openvpn</li> <li>When planning to use one or more virtual machines under VirtualBox, make the user part of vboxsf and vboxusers. Since VirtualBox is not installed yet, the two groups must be created first: <code>sudo groupadd groupname</code></li> <li>I\u2019ve had in the past troubles with Bluetooth. Some of those were solved by making the user part of the Bluetooth group</li> </ul> </li> </ul>"},{"location":"Rocinante-LinuxMint/#enhancements","title":"Enhancements","text":"<ul> <li> <p>Install Ubuntu enhancements and codex with ubuntu-restricted-extras     Ubuntu Restricted Extras is a software package that enhances the user experience on Ubuntu desktops by providing a set of important utilities and codex that are typically not included in the standard installation. This includes media codex necessary to play various audio and video files, support for playing DVDs, and Microsoft TrueType fonts. These are called \u201crestricted\u201d because they are not included with Ubuntu by default due to legal and copyright restrictions in various countries.</p> <p><code>sudo apt update`` sudo apt install ubuntu-restricted-extras</code></p> </li> <li> <p>If the PC is going to be used for software development or an eventual compilation of source code, the ubuntu-essential meta-package can be useful to have. The meta-package contains the GNU Compiler Collection (GCC), being a collection of compilers and libraries for C, C++, Objective-C, Fortran, Ada, Go , and D programming languages. A lot of open-source projects, including the Linux kernel and GNU tools, are compiled using GCC.     <code>sudo apt update</code> <code>sudo apt install build-essential</code> <code>sudo apt-get install manpages-dev</code></p> </li> </ul>"},{"location":"Rocinante-LinuxMint/#bluetooth","title":"Bluetooth","text":"<p>All, 99.9 %, of all new motherboards is equipped with Bluetooth capabilities and the Bluetooth hardware is normally default enabled in the BIOS. But in my experience with several motherboards, making the on-board Bluetooth work is a real pain. </p> <p>Maybe the first thing one should do is to check if the motherboard is equipped with Bluetooth and it is indeed default enabled in the BIOS. </p> <ul> <li> <p>For a ASUS motherboard; boot or reboot the machine and keep hitting the [DEL] or [F2] key to get the BIOS pages. Check for Bluetooth.</p> </li> <li> <p>Try first to use the on-board Bluetooth, go to 1.</p> <ol> <li> <p>Remove all Bluetooth related tools (<code>sudo apt purge bluetooth bluez bluez-tools rfkill blueman blueman-manager</code> </p> </li> <li> <p>Rebooted the PC, then reinstall Bluetooth stuff as indicated. </p> <pre><code>sudo apt-get install bluetooth bluez bluez-tools rfkill\nsudo apt-get install blueman &amp;&amp; blueman-manager\nsudo rfkill list\nsudo rfkill unblock bluetooth\nsudo service bluetooth start\n</code></pre> </li> <li> <p>Now, normally, Bluetooth should work. If not search for warning or error messages in the logs and search for solutions.</p> </li> </ol> </li> <li> <p>If Bluetooth still doesn't work decently, disable the on-board Bluetooth and plug a Bluetooth dongle in one of the many USB ports. Try to use a USB port on the front or top of the computer case (exposure of the dongle).</p> <p>Note</p> <p>These days motherboards seem to have also on-board WIFI. Disable it!.</p> <p>A desktop computer needs to connect to wired Ethernet</p> </li> <li> <p>Check if the Bluetooth dongle is recognised by one of the on-board USB switches.</p> <ul> <li>Start a command terminal and enter <code>lsusb</code></li> <li>One of the returned line can be something as:     <code>Bus 009 Device 003: ID 0a12:0001 Cambridge Silicon Radio, Ltd Bluetooth Dongle (HCI mode)</code>      This is the Bluetooth dongle signature.</li> </ul> </li> <li> <p>Restart from point 1 above and normally Bluetooth should work now.</p> </li> </ul> <p>If Bluetooth don't work or don't decently work or stops working or ... with or without bluetooth dongle, these things can be done to find a possible cause.</p> <ul> <li> <p>Open a command terminal and:</p> <ul> <li> <p>Check the Bluetooth blocking status , enter <code>sudo rfkill list</code></p> <ul> <li>The correct returned answer is no  for soft and hard blocked Bluetooth.</li> <li>If one or both return yes, unblock it by typing <code>sudo rfkill unblock bluetooth</code></li> </ul> </li> <li> <p>Check the Bluetooth service status, enter <code>sudo systemctl status bluetooth.service</code></p> <ul> <li>If the Bluetooth is inactive, start it with: <code>sudo systemctl start bluetooth.service</code></li> </ul> </li> <li> <p>The bluez daemon is the orchestrating Bluetooth part and when that is not up to date all kind of weird issues can pop up. </p> <ul> <li>Check the current version of bluez: <code>sudo apt-show-versions bluez</code></li> <li>Update the bluez daemon: <code>sudo apt install bluez</code></li> </ul> </li> <li> <p>Make Bluetooth persistent</p> <ul> <li> <p>Start a text editor as sudo with a file name bluetooth-restore.service</p> </li> <li> <p>Save the empty file in: /etc/systemd/system</p> </li> <li> <p>Add following lines to the empty file</p> <pre><code>[Unit]\nDescription=Restart Bluetooth after suspend\nAfter=suspend.target \n\n[Service]  \nType=simple\nExecStart=/usr/bin/bash -c \"rfkill unblock bluetooth ; systemctl start bluetooth\"\n\n[Install]  \nWantedBy=suspend.target\n</code></pre> </li> <li> <p>Save the file and close the text editor.</p> </li> <li> <p>Start the just created service: <code>sudo systemctl enable bluetooth-restore.service</code></p> </li> </ul> </li> <li> <p>If audio quality sucks</p> <ul> <li> <p>install, with Add/Remove Software, the bluetoothctl command line tool </p> <p>Command line install: <code>sudo apt install bluetoothctl</code></p> </li> <li> <p>Run the tool, to get device info, by typing in the command terminal: <code>bluetoothctl</code></p> <ul> <li>When having run earlier <code>sudo systemctl status bluetooth.service</code> the Bluetooth device MAC address has been displayed. Run now, from the bluetoothctl prompt:      <code>info &lt;MAC address&gt;</code></li> <li>There should be a mentioning of A2DP in all obtained information.     If it's not displayed and the device support high-quality audio then, force A2DP.</li> </ul> </li> <li> <p>exit the bluetoothctl tool by typing: <code>quit</code></p> <ul> <li> <p>Start a text editor with /etc/bluetooth/main.conf as file to open.</p> </li> <li> <p>Add under the General section:</p> <pre><code>Enable=Source,Sink,Media\nDisable=Socket\n</code></pre> </li> <li> <p>Save the file and restart the daemon: <code>sudo systemctl restart bluetooth</code>.     That explicitly permits A2DP while stopping HFP.</p> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"Rocinante-LinuxMint/#display-manager-dm","title":"Display Manager (DM)","text":"<p>No need to install a new Display Manager as the default display manager is LightDM.</p>"},{"location":"Rocinante-LinuxMint/#install-cinnamon","title":"Install Cinnamon","text":"<p>No need to install the Cinnamon desktop as the Cionnamon desktop is the signature desktop of Linux Mint.</p>"},{"location":"Rocinante-LinuxMint/#tuning-cinnamon","title":"Tuning Cinnamon","text":"<p>Tuning is user's choice or otherwise said, it's the problem\u201d of the user. Thus as user, do with it what you like but find here the tuning experiment to make Cinnamon running on Ubuntu as a close copy of the Linux-Mint Cinnamon desktop on other (older) PCs. It will never be exactly the same and it does not need to be, but it must have the looks and feel for let's say 90%.</p> <p>Note</p> <p>One need to be root or operate as sudo to execute most of the commands explained below</p> <p>After the reboot and selection of Cinnamon as desktop, it already looks a bit as Cinnamon but needs settings for:</p> <ul> <li> <p>Background</p> <ul> <li>The typical Linux-Mint background is; dark gray Linux Mint eDesigner with LM sign in left bottom quadrant of the screen.</li> <li> <p>For the eDesigner background, you\u2019ll need a Linux-Mint system in the neighbourhood.</p> <ul> <li>Go to a machine running Linux-Mint<ul> <li>Browse to \u201c/usr/share/backgrounds\u201d (This is the directory with all system backgrounds).</li> <li>Copy, to a USB drive, the \u201clinuxmint\u201d directory.</li> </ul> </li> <li>Plug the USB drive into the new machine and copy or move the \u201clinuxmint\u201d directory to \u201c/usr/share/backgrounds\u201d</li> <li>Open SystemSettings - Backgrounds and add (+) the \u201c/usr/share/backgrounds/linuxmint\u201d directory to the backgrounds list (left size). Select and click \u201clinuxmint\u201d and make a choice in the right pane.</li> </ul> </li> <li> <p>If no Linux-Mint machine is available, find beautiful and stylish backgrounds here:     https://wallpapersafari.com/linux-mint-wallpaper-hd/</p> </li> </ul> </li> <li> <p>Fonts and themes.</p> <ul> <li> <p>Go to: https://github.com/orgs/linuxmint/repositories</p> <ul> <li>Select the \u201cmint-y-Icons\u201d repository and download the zip file</li> <li>Select the \u201cmint-themes\u201d repository and download the zip file.</li> </ul> <p>Open the \u201cmint-y-icons-master.zip\u201d file and extract the contents of \u201c/usr/share/icons\u201d directory to the \u201c/usr/share/icons\u201d directory of the machine. Open the \u201cmint-themes-master.zip\u201d file and extract the contents of \u201c/files/usr/share/themes\u201d directory to the \u201c/usr/share/themes\u201d directory of the machine.</p> </li> <li> <p>Themes</p> <ul> <li>Window borders: Mint-Y</li> <li>icons: Mint-Y</li> <li>Controls: Mint-Y</li> <li>Mouse pointer: DMZ-white</li> <li>Desktop: Mint-Y-black</li> </ul> </li> </ul> </li> <li> <p>Preferences</p> <ul> <li>Applets: Selected (turned on) are:<ul> <li>Sticky Notes , Calendar (select the configuration wheel and enter the custom date format \u201c%H:%M:%S %n %d %b %y\u201d), Grouped Window List, Menu, Network Manger, Notifications, Power Manger</li> <li>Printers, Removable Drives, Rubbish Bin, Sound, System Tray, Workspaces Switcher, XApp Status Applet</li> </ul> </li> <li>Date and Time<ul> <li>Network Time</li> <li>24h clock, with date and seconds</li> <li>First day of the week : Monday</li> </ul> </li> <li>Desktop<ul> <li>Nothing is selected here. There are thus no desktop icons.</li> </ul> </li> <li>Panel<ul> <li>Always show panel</li> <li>Panel Height is 40</li> <li>Left, centre and right zone font size is 7.0 with a coloured optimally sized to the panel.</li> </ul> </li> <li>Privacy<ul> <li>Recent files and check connectivity are on.</li> </ul> </li> <li>Screensaver<ul> <li>Turns on after 10 minutes.</li> <li>The machine locks immediately when going to sleep and when the screen-saver starts.</li> </ul> </li> </ul> </li> <li> <p>Program and tool settings</p> <ul> <li> <p>Copy the play and listen list for Rhythmbox from the previous PC to the new.     These things can be found in:</p> <pre><code>~/.local/share/rhythmbox\n</code></pre> <p>Copy the content of above directory from one PC to the other.</p> </li> </ul> </li> </ul>"},{"location":"Rocinante-LinuxMint/#installing-user-software","title":"Installing user software","text":"<p>The software installed on a PC is the choice of the user. If you have a machine like the one discussed here, there is plenty of room for all kinds of software. Provided here is a list of software tools installed on my machines. These tools are not used daily but let\u2019s say at least ones an week and certainly more of the tools are used weekly.</p> <p>The tool install instructions are provided as command lines and are expressed as a  bubble.  Start a command terminal by hitting the  [Linux Mint] icon in the left screen bottom and then start typing \"terminal\". When it's displayed hit [Enter]. In the terminal type and execute, [Enter], each given command line to install a software tool.</p>"},{"location":"Rocinante-LinuxMint/#system","title":"System","text":""},{"location":"Rocinante-LinuxMint/#timeshift","title":"Timeshift","text":"<p>Timeshift is default installed on Linux Mint. This is just a guide to give a hint how to setup Timeshift.</p> <ul> <li>Start Timeshift from the menu (start typing timeshift and when it's displayed hit enter).</li> <li>Select the snapshot type : RSYNC</li> <li>It starts estimating the snapshot size and then comes back with a list of disks. During install of Ubuntu the 4 TB WDC siak has been reserved for timeshift. It got the name TimeMachine and is mounted as /mnt/TimeMachine. Select that disk and click[Next].</li> <li>Set the snapshot levels you want (Monthly, Weekly, Daily, Hourly, Boot) and determine how many snapshots to keep. Example: Daily: 3 and Hourly: 6.</li> <li>Determine what to backup and what not.</li> <li>[Finish], hit the [Create] tab to get the first snapshot.</li> </ul> <p>Note</p> <p>It is a good idea to make a new snapshot when all tools are installed and configured.</p>"},{"location":"Rocinante-LinuxMint/#appimagelauncher","title":"AppImageLauncher","text":"<p>Integrate AppImages to your application launcher with one click, and manage, update and remove them from there. Double-click AppImages to open them, without having to make them executable first.</p> <p><pre><code>sudo add-apt-repository ppa:appimagelauncher-team/stable\nsudo apt update\nsudo apt install appimagelauncher\n</code></pre> An appimage file  is kind of a compressed directory containing all files and directories required bij the tool the appimage file is representing. The only thing an appimage file has not is the files representing the customisation of the tool. Customisation of tools can be found in the users home directory under .config and .local directories.</p> <p>Installing and removing tools using appimages is thus very easy. download the tools appimage file (\\&lt;File_Name&gt;.appimage) and pass it through AppImageLauncher. Removing a tool is done by deleting the appimage file.</p>"},{"location":"Rocinante-LinuxMint/#configure-appimagelauncher","title":"Configure AppImageLauncher","text":"<ul> <li> <p>Create, as root/sudo, in /opt a directory AppImages and change the owner, group and properties of the directory. Use a file browser (Nemo) to do that or use a command line terminal.</p> <ul> <li><code>cd /opt     sudo chown &lt;user&gt; AppImages     sudo chgrp &lt;user&gt; AppImages     sudo chmod 775 AppImages</code></li> <li>Click the [Menu] button in the left bottom corner of the screen and start typing appimagelauncher. The first presented option is: AppImageLauncher Settings, select it.</li> </ul> </li> <li> <p>[AppimageLauncher] tab</p> <ul> <li>Tick the box left of \"Ask whether to move AppImage files ... \"</li> <li>Set the location were to store the appimage files and were to execute them from to     /opt/AppImages</li> </ul> </li> <li> <p>[AppimageLauncherd] tab</p> <ul> <li>Tick the box left of \"Auto start auto-integration ... \"</li> </ul> </li> <li> <p>Click [OK]</p> </li> </ul> <p>How to run a tool disguised as appimage </p> <ul> <li> </li> <li>Right click the appimage file and select \"Open with AppImageLauncher\" (Double click the file also works).</li> <li>A pop-up pane will ask (2 buttons): [Run Once] - [Integrate and run]     Chose for [Integrate and run] as then the tool will become available in the general menu of the system.</li> <li>The installed tool is, GUI or apt, installed tools available in the [Linux Mint] icon in the left screen bottom  and updates for the tool are going to be handled by the AppImageLauncher.</li> </ul>"},{"location":"Rocinante-LinuxMint/#download-the-tool-appimage-file-and-save-it-somewhere-on-disk","title":"Download the tool .appimage file and save it somewhere on disk","text":""},{"location":"Rocinante-LinuxMint/#gdebi","title":"GDebi","text":"<p>According to the utility's official documentation: \"GDebi lets you install local deb packages resolving and installing its dependencies. apt does the same, but only for remote (http, ftp) located packages.\". Normally it is pre-installed but in case it is not:</p> <pre><code>sudo apt install gdebi\n</code></pre>"},{"location":"Rocinante-LinuxMint/#bitwarden","title":"Bitwarden","text":"<p>Best password storage and sharing tool. The best Password storage and sharing application. It's a desktop tool (Windows/Linux/IOS), a phone app (Android/IOS) and a browser plugin. Thus when used passwords are available from any and for any system. It is possible to sync the PC version with the web browser version, this is easy to keep things nicely arranged.</p> <ul> <li>Download as Appimage file from the Bitwarden web site, </li> <li>Save the file on disk</li> <li>Double click the saved file and for the popped-up pane click the [Integrate and Run] button</li> <li>Bitwarden will start and ask for credentials.</li> </ul> <p>What happened is; the saved appimage file is copied to the /opt/AppImages directory and the AppImageLauncher created an input for the [Manjaro main] menu so that when clicking the [Memu] button one can type bitwarden and launch bitwarden from the menu structure. The AppImageLauncher tool will also take care of regularly updating the Bitwarden tool.</p> <p>Tip</p> <p>In case of ... On regularly base export the vault, using the PC version, of all passwords as csv or json file and store that file somewhere safe (in another personal vault).</p>"},{"location":"Rocinante-LinuxMint/#dropbox","title":"Dropbox","text":"<p>Keep everything that\u2019s important to you and your family shareable and safe in one place. Back up files in the cloud, share photos and videos, and more.</p> <p><pre><code>https://www.dropbox.com/install\ndropbox_2024.01.22_amd64.deb\n</code></pre> After downloading the .deb file install it with the GDebi Package Installer</p>"},{"location":"Rocinante-LinuxMint/#pyenv","title":"Pyenv","text":"<p>Manage Multiple Python Versions With pyenv. Use another Python environment to play with than the system installed Python so you cannot break anything in your system.</p> <p>For a in depth discussion about installing and using pyenv read the Install and Manager Pyenv document Discussed with the installation of pyenv the installation and configuration of the required/wanted Python version(s) and packages is discussed.</p>"},{"location":"Rocinante-LinuxMint/#administration","title":"Administration","text":""},{"location":"Rocinante-LinuxMint/#bleachbit","title":"BleachBit","text":"<p>Keep the computer clean and sane use BleachBit. BleachBit guards privacy. With BleachBit you can free cache, delete cookies, clear Internet history, shred temporary files, delete logs, and discard junk you even didn't know was there. Designed for Linux and Windows systems, it  wipes clean thousands of applications including Firefox, Internet  Explorer, Adobe Flash, Google Chrome, Opera, Safari,and more.  Beyond simply deleting files, BleachBit includes advanced features such as shredding files to prevent recovery, wiping free disk space to hide traces of files deleted by other applications, and vacuuming Firefox to make it faster. Better than free, BleachBit is open source.</p> <pre><code>sudo apt install bleachbit\n</code></pre> <p>Note</p> <p>Do not run sudo or root functions, in deep-scan and system, in the user or non-sudo version of the tool. There is a dedicated sudo version of the tool and both are installed at the same time.</p>"},{"location":"Rocinante-LinuxMint/#gparted","title":"Gparted","text":"<p>GNOME partition editor (Hard Disk management tool). This tool can help managing partitions, add disks and/or portable disks and USB drives.</p> <pre><code>sudo apt install gparted\n</code></pre>"},{"location":"Rocinante-LinuxMint/#dconf-editor","title":"dconf Editor","text":"<p>dconf  is a low-level configuration system, the configuration system is based  on keys, which stores the settings for most applications. The  configuration keys are in the unstructured database (keys are logically  interconnected grouped into categories), the key database is stored in a  binary file located:</p> <pre><code>sudo apt install dconf-editor\n</code></pre>"},{"location":"Rocinante-LinuxMint/#sound-video","title":"Sound &amp; Video","text":""},{"location":"Rocinante-LinuxMint/#obs-studio","title":"OBS Studio","text":"<p>OBS Studio, also known as Open Broadcaster Software Studio, serves content creators, streamers, and video professionals as top-tier open-source software.</p> <pre><code>sudo apt update\nsudo add-apt-repository ppa:obsproject/obs-studio -y\nsudo apt install obs-studio -y\n</code></pre>"},{"location":"Rocinante-LinuxMint/#vlc-media-player","title":"VLC Media Player","text":"<p>VLC is a free and open-source multimedia player. It supports a wide range of multimedia formats such as MKV, MP4, MPEG, MPEG-2, MPEG-4, DivX, MOV, WMV, QuickTime, WebM, FLAC, MP3, Ogg/Vorbis files, BluRays, DVDs, VCDs, podcasts, and multimedia streams from various network sources.</p> <pre><code>sudo apt update\nsudo apt install vlc\nsudo apt install vlc-plugin-access-extra\n</code></pre>"},{"location":"Rocinante-LinuxMint/#pulse-audio-volume-control-pavu","title":"Pulse Audio Volume Control (PAVU)","text":"<p>PulseAudio Volume Control (pavucontrol) is a simple GTK+ based volume control tool (mixer) for the PulseAudio sound server. In contrast to classic mixer tools this one allows you to control the volume of hardware devices and of each playback stream separately. It also allows you to redirect a playback stream to another output device without interrupting playback.</p> <pre><code>sudo apt update\nsudo apt -y install pavucontrol\n</code></pre>"},{"location":"Rocinante-LinuxMint/#programming","title":"Programming","text":""},{"location":"Rocinante-LinuxMint/#git","title":"GIT","text":"<p>Git for use with GitHub.</p> <pre><code>sudo apt update\nsudo apt install git-cola\n</code></pre>"},{"location":"Rocinante-LinuxMint/#visual-studio-code","title":"Visual Studio Code","text":"<p>Installing Visual Studio Code is a fundamental step for anyone looking to create a powerful coding environment. Visual Studio Code, often abbreviated as VS Code, is a by Microsoft re-owned code editor (Git atom) appreciated for its lightweight nature and extensible.  Good to know is:</p> <ul> <li>That Visual Studio Code is a distribution of the Code - OSS repository with Microsoft specific customisation released under a traditional Microsoft product license.</li> <li>Code - OSS is an open source project without any proprietary code.</li> </ul> <p>Both can be installed and used, but below instructions are for the Microsoft version</p> <ul> <li> <p>Add the GPG key   <code>curl -sSL https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -</code></p> </li> <li> <p>Two issues will pop up: curl is not installed and key format is deprecated. </p> </li> <li>Install curl: <code>sudo apt install curl</code></li> <li> <p>Bring the gpg key up to date. </p> <p>Read details about this in the Updating Keyring Files document</p> </li> <li> <p>Add the Visual Studio Code repository   <code>sudo add-apt-repository \"deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main\"</code></p> </li> <li> <p>update the system's package lists.   <code>sudo apt update</code></p> </li> <li> <p>Install Vs-Code   <code>sudo apt install code</code></p> </li> </ul> <p>Since code is a flexible text editor there are lots of extensions available making it a versatile and specialised  text and code editor for general and (very) specific tasks. The list of all current extensions is hidden under the, on the left side showed, extensions button or after pressing [CTRL]+[SHIFT]+X. Click an extension, browse to its web site and maybe install it.</p>"},{"location":"Rocinante-LinuxMint/#meld","title":"Meld","text":"<p>Files and directories comparison is the task that is often required, Meld takes this job seriously and is considered one of the best tools to perform comparisons between files, directories, and version control projects. It is widely used by Linux desktop users and app developers to cater their daily comparison needs. Here are some of the noteworthy features of this application.</p> <pre><code>sudo apt update\nsudo apt install meld\n</code></pre> <p>Meld is installed because a extension installed in the code editor is using it.</p>"},{"location":"Rocinante-LinuxMint/#qt-qute","title":"QT (QuTe)","text":"<p>All the tools you need for creating software applications or embedded devices, from planning and design to development, testing, and future-proofing your products. QT is a tool that needs to be purchased and licensed, but there is a open source version available for the non-commercial developer (Hobby or home user). the rules are described here: <pre><code>https://www.qt.io/download-open-source\n</code></pre></p> <p>READ the page about what can/must be done and cannot be done using the open source license. Download the online installer here:</p> <pre><code>https://doc.qt.io/qt-6/qt-online-installation.html#2-download-qt-online-installer\n</code></pre> <p>Select the option to go for the open-source version.</p>"},{"location":"Rocinante-LinuxMint/#tcl-tk","title":"Tcl-Tk","text":"<p>Tcl (Tool Command Language) is a powerful, open source, business-friendly and easy to learn programming language. Tcl is a mature yet evolving language that is truly cross platform, easily deployed and highly extensible. It is suitable for a very wide range of uses, including web and desktop applications, networking, administration, testing and many more.</p> <p>Tk is a graphical user interface toolkit that act as the standard GUI for not only Tcl but for many other languages It can can produce rich, native applications that run unchanged across Windows, Mac OS X, Linux and more.</p> <ul> <li>Normally both TCL and TK are default installed (run tclsh and type <code>info patchlevel</code>)</li> <li>The main Tcl-Tk web can be found here</li> <li>On the software page of the Tcl-Tk web page several ways to get and install the software are presented. The Tcl-Tk version preferably used is that from ActiveState and can be downloaded here.     ActiveState actively maintains the latest version and updates of Tcl-Tk, but to keep up withe new version releases of the language one must regularly visit the ActiveState web page, download and install new versions when required.</li> </ul> <p>Find here beside software; tutorials, manuals and links to all kind of other related stuff.</p> <ul> <li> <p>A full development system with the latest version of the Tcl-Tk software can be downloaded from the ActiveState web side (Probably you\u2019ll need to make an account in order to get it).</p> </li> <li> <p>Save the download on the machine.</p> </li> <li> <p>Uncompress the file in the /Download directory.     A directory ActiveTcl--x86_64-linux-glibc- will be created. <li> <p>start a terminal and change into the above given directory.     <code>cd ActiveTcl-8.6.9.8609.2-x86_64-linux-glibc-2.5-dcd3ff05d</code></p> </li> <li> <p>Run the install.sh script as root (sudo) and install the Tcl-Tk tooling in /opt/ActiveState.</p> <ul> <li> <p>Accept the list of what is going to be installed, hit [enter].</p> </li> <li> <p>Accept the license of ActiveState by typing [A]</p> </li> <li> <p>Provide the path where ActiveState Tcl-Tk will be installed or accept the default value.     The default value is /opt/ActiveTcl-8.6     Hit [enter]cd ..</p> </li> </ul> <p>-</p> <ul> <li> <p>Provide the path where demo design will dropped or accept the default. Hit [enter]</p> </li> <li> <p>Specify the runtime installation or accept the default given value. Hit [enter]</p> </li> <li> <p>Hit [enter] to start the installation.</p> </li> <li> <p>At the end of the installation some settings are provided.     Open the .bash_aliases or .bashrc file with a text editor <code>~/.bash_aliases</code> .</p> </li> <li> <p>Add following lines to one of the files.</p> <pre><code># TCL-TK settings (ActiveState)\nexport TCLTK_ROOT=/opt/ActiveTcl-8.6\nexport PATH=$PATH:$TCLTK_ROOT/bin:$TCLTK_ROOT/lib\nexport MANPATH=$TCLTK_ROOT/man\n</code></pre> </li> </ul> </li>"},{"location":"Rocinante-LinuxMint/#office","title":"Office","text":""},{"location":"Rocinante-LinuxMint/#typora","title":"Typora","text":"<p>Typora provides a seamless experience as both a Markdown reader and a writer. It removes the preview window, mode switcher, syntax symbols of markdown source code, and all other unnecessary distractions of other markdown readers &amp; writers.</p> <p>Note</p> <p>Typora is no longer a free tool. The cost is $15. But it\u2019s worth it.  Pay the money, get a license it and download it.</p> <pre><code>sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE\nwget -qO - https://typora.io/linux/public-key.asc | sudo tee /etc/apt/trusted.gpg.d/typora.asc\n</code></pre> <p>Add Typora's repository to the list of repositories</p> <pre><code>sudo add-apt-repository 'deb https://typora.io/linux ./'\n</code></pre> <p>Install Typora <pre><code>sudo apt-get update\nsudo apt-get install typora\n</code></pre></p>"},{"location":"Rocinante-LinuxMint/#pandoc","title":"Pandoc","text":"<p>Pandoc is a universal document text converter. Typora is using it to support file import/export features for several file types (pdf, html, docx, ...). If ever using it, the GitHub Atom text edit is also using it.</p> <p><code>sudo apt install pandoc</code></p>"},{"location":"Rocinante-LinuxMint/#texlive-latex","title":"TexLive - Latex","text":"<p>TeX Live is an easy way to get up and running with the TeX document production system.</p> <ul> <li> <p>Start a web browser and go to: https://tug.org/texlive/acquire-netinstall.html</p> </li> <li> <p>Click on the download for a install-tl.zip file and save it (/Downloads)</p> </li> <li> <p>Extract the zip file. The result will be a directory called install-tl-\\&lt;invers-date&gt;</p> </li> <li> <p>Launch a terminal and change into the directory created by the unzip operation.</p> </li> <li> <p>Run the install script <code>./install-tl -gui</code></p> <ul> <li>The most important in the install script is the install location .</li> <li>Provide the install directory <code>/opt/TexLive/&lt;year&gt;</code></li> </ul> </li> <li> <p>Installing TexLive will take a while, so be patient.</p> </li> <li> <p>........ (waiting)</p> </li> <li> <p>When installed, or even during install, add the TexLive installation to the path.</p> <ul> <li> <p>In the user home directory, open with a edit, xed, the .bash_aliases file.</p> </li> <li> <p>Add following lines to the file and save it afterwards.</p> </li> </ul> <pre><code>export TL_ROOT=/opt/TexLive/2024\nexport PATH=$PATH:TL_ROOT/bin/x86_64-linux\n</code></pre> </li> </ul>"},{"location":"Rocinante-LinuxMint/#latexdraw","title":"LatexDraw","text":"<p>LaTeXDraw is a graphical drawing editor for LaTeX. LaTeXDraw can be used to:</p> <ul> <li>Generate PSTricks code</li> <li>Directly create PDF or PS pictures.</li> </ul> <pre><code>sudo apt update\nsudo apt install latexdraw\n</code></pre>"},{"location":"Rocinante-LinuxMint/#texmaker","title":"TexMaker","text":"<p>Texmaker is a free, modern and cross-platform LaTeX editor for linux systems that integrates many tools needed to develop documents with LaTeX, in just one application. It includes unicode support, spell checking, auto-completion, code folding and a built-in pdf viewer with synctex support and continuous view mode. Texmaker is easy to use and to configure. Texmaker is released under the GPL license .</p> <ul> <li>In a web browser go to: https://www.xm1math.net/texmaker/download.html</li> <li>Select, download and save the Linux Package for Ubuntu 22.04</li> <li>Double click the saved texmaker_... .deb file.</li> <li>Gdebi will start and install TexMaker.</li> <li>For updates, a timely visit to the Texmaker website or click the [Help] tab in Textmaker selecting [Check for Updates].</li> </ul>"},{"location":"Rocinante-LinuxMint/#sozi","title":"Sozi","text":"<p>Sozi is a piece of software for creating animated presentations. It is generally used to make visual aids for lectures or meetings. With Sozi, a presentation is not organised as a sequence of slides, but rather as a succession of viewpoints on a map that you explore.</p> <p>The Sozi web page can be found here: http://sozi.guide/en/about-sozi.html</p> <p>Go to this page for the installation: http://sozi.guide/en/installation.html</p> <p>Double click the downloaded file from GitHub to install with Gdebi the tool.</p>"},{"location":"Rocinante-LinuxMint/#freeplane","title":"Freeplane","text":"<p>This is a mind mapping tool</p> <p>Maybe don\u2019t install it immediately (Unless you need such tool of course) Install it when required.</p>"},{"location":"Rocinante-LinuxMint/#foxit-reader","title":"Foxit Reader","text":"<p>Foxit Reader is a fast, free, lightweight alternative to Adobe Reader for opening and displaying PDF files. It's also feature-packed. I've been using Foxit Reader since back in the day\u2026 The day when Adobe Reader had become a fat slob of a program that took forever to boot and load files. Adobe has improved greatly, but so has Foxit Reader.</p> <ul> <li>Go to: https://www.foxit.com/downloads/</li> <li>Click the Foxit PDF Reader button</li> <li>Save the downloaded file somewhere on the system</li> <li>Extract the \"FoxitReader.enu.setup..x64.run.tar.gz\" file. <li>Open a terminal and change directory to /Downloads when the extracted file is stored there.</li> <li>Rename the extracted file to FoxitReader.enu.setup.\\&lt;version&gt;.x64.run     Remove the number between the ( )</li> <li>Type: <code>sudo ./FoxitReader.enu.setup.&lt;version&gt;.x64.run</code></li> <li>Follow the install GUI!<ul> <li>Install the Foxit PDF reader in \"/opt/Foxitsoftware/FoxitReader\"</li> <li>Accept the license</li> <li>Wait till Foxit is installed and click [Finish].</li> </ul> </li> <li>Start Foxit Reader and set the preferences; [Edit]-[Preferences]     There is a Foxit Reader icon in the Linux-Mint Menu - Office</li>"},{"location":"Rocinante-LinuxMint/#pdfsam","title":"PdfSam","text":"<p>PDFsam Visual PDFsam Visual is a powerful tool to visually compose PDF files, reorder pages, delete pages. Split PDF files into individual pages, delete or rotate pages, easily merge PDF files together or edit and modify PDF files. A free and open source application, a powerful visual tool or a professional PDF editor, join thousands of happy users, we have the solution you are looking for.</p> <ul> <li>Go to: https://pdfsam.org</li> <li>Click the [Download] button/tab.</li> <li>Download the .deb file of the PDFsam Basic.</li> <li>Save the downloaded file.</li> <li>Open a file browser and open the directory were the file is saved.</li> <li>Double click the \"pdfsam_\\&lt;version&gt;_amd64.deb\" file to make Gdebi start and load the file for installation.</li> <li>Let GDebi install the tool.</li> </ul>"},{"location":"Rocinante-LinuxMint/#internet","title":"Internet","text":""},{"location":"Rocinante-LinuxMint/#eid-electronic-id-belgium","title":"eid (Electronic ID Belgium)","text":"<p>The Belgian eID is an essential element in the chain of trust that provides a framework for safe digital exchanges. By its virtue of certifying the identity of the person doing the exchange and protecting access to citizens' data, the Belgian eID card actively participates in the success of e-Government policy. Go to:</p> <pre><code>https://eid.belgium.be/en/block/18/popup?width=970&amp;height=570&amp;top=10\n</code></pre> <p>Select the \u201cDownload for Linux\u201d button and download: eid-archive.deb</p> <p>When the .deb file is saved, install it (double click the file and allow GDebi to install it).</p> <pre><code>sudo apt update (the terminal output should include repositories for Eid)\nsudo apt install eid-mw\nsudo apt install eid-viewer\n</code></pre> <ul> <li>Attach a card reader or use the build in card reader.</li> <li>Restart the computer.</li> <li>Go to the main menu or show apps button and start the eid-viewer.</li> <li>Plug your eid card into the reader.</li> <li>Normally, when everything is working the eid-viewer should show the data on the eid card.</li> <li>Leave the card in the reader.</li> <li> <p>Finally go to this site: https://iamapps.belgium.be/tma/?lang=en</p> <ul> <li>Hit [Start test]</li> <li>Hit [Log in]</li> <li>Click [OK] for the user certificate</li> <li>Provide the passcode</li> <li>Wait for \"Log in Successful\"</li> <li>Click the [Sign Out] button and close the web browser.</li> </ul> </li> </ul>"},{"location":"Rocinante-LinuxMint/#thunderbird","title":"Thunderbird","text":"<p>Maybe, perhaps the best mail client available. It is default installed when Ubuntu is installed. Normally one will use the installed Thunderbird software but here mail needed to be stored on an external network connected drive and then it was better to completely remove Thunderbird and install it again in the /opt directory. To do this and put all mail on a NAS or network drive do:</p> <ul> <li> <p>Browse to: https://www.thunderbird.net</p> </li> <li> <p>Hit the [download] button and save the downloaded \u201cthunderbird-\\&lt;version&gt;.tar.bz2\u201d</p> </li> <li> <p>In a command terminal do:</p> <pre><code>sudo apt remove --purge thunderbird\n</code></pre> </li> <li> <p>Un-compress the .tar.bz2 file, as sudo, in the /opt directory. After the operation there will be a /opt/thunderbird directory available.</p> </li> <li> <p>Add \u201c/opt/thunderbird\u201d  to the path.     Open .bash-aliases with a text editor and add</p> <pre><code># Thunderbird mail client settings\nexport PATH=$PATH:/opt/thunderbird.\n</code></pre> </li> <li> <p>Of course there is now no menu clickable entry for Thunderbird, create one by:</p> <ul> <li>Right click the menu in the left corner and select \u2018configure\u2019.</li> <li>In the pop up menu select the [Menu] tab and the hit the [Open the menu editor] button.</li> <li>Select [Internet] in the left menu and then hit [New Item] in the right menu.<ul> <li>Name: Thunderbird Mail</li> <li>Command: [Browse] go to /opt/thunderbird and pick thunderbird. Add a space and \u201c%U\u201d.</li> <li>Comment: Send and receive mail with Thunderbird</li> <li>Click the icon and in the popup go to /opt/thunderbird/chrome/icons/default.     Pick an icon from the listed, like default24.png</li> <li>[OK]</li> </ul> </li> </ul> </li> <li> <p>Assume Thunderbird is started for the first time and mail need to be stored on a NAS drive. Thunderbird cannot do it by default ,  but:</p> <ul> <li> <p>**Do this when Thunderbird is closed / not running! **</p> </li> <li> <p>Thunderbird creates a .thunderbird directory in a users home directory.     If there in no such directory yet, start Thunderbird and the close it again.</p> </li> <li> <p>Copy that entire directory to a default mounted directory on the NAS, rename it to thunderbird (remove the \u201d.\u201d).</p> </li> <li> <p>A precaution rename the .thunderbird directory in the users home to something like thunderbird_Org.</p> </li> <li> <p>Open a command terminal in the users home directory and create a symbolic link to the NAS Thunderbird directory.</p> <pre><code>ln -s /mnt/MainNasDir/thunderbird .thunderbird\n</code></pre> <p>A directory link .thunderbird  is created in the user home directory. The link shows all directories and files copied earlier to the Thunderbird NAS directory.</p> </li> <li> <p>Now Thunderbird can be started and used. all mail will nbe stored on the NAS drive.</p> </li> </ul> </li> </ul>"},{"location":"Rocinante-LinuxMint/#vivladi","title":"Vivladi","text":"<p>Get a browser with unrivalled customisation options and built-in features for better performance, productivity, and privacy.</p> <ul> <li>Go to: https://vivaldi.com/download/</li> <li>Click the \u201cVivaldi x.x for Linux DEB\u201d button</li> <li>Save te file and let GDebi install the browser.</li> </ul>"},{"location":"Rocinante-LinuxMint/#signal","title":"Signal","text":"<p>Say \"hello\" to a different messaging experience. An unexpected focus on privacy, combined with all of the features you expect</p> <ul> <li>Install the official public software signing key:</li> </ul> <pre><code>wget -O- https://updates.signal.org/desktop/apt/keys.asc | gpg --dearmor &gt; signal-desktop-keyring.gpg\ncat signal-desktop-keyring.gpg | sudo tee /usr/share/keyrings/signal-desktop-keyring.gpg &gt; /dev/null\n</code></pre> <ul> <li>Add the repository to the list of repositories:</li> </ul> <pre><code>echo 'deb [arch=amd64 signed-by=/usr/share/keyrings/signal-desktop-keyring.gpg] https://updates.signal.org/desktop/apt xenial main' | sudo tee /etc/apt/sources.list.d/signal-xenial.list\n</code></pre> <ul> <li>Update the package database and install Signal:</li> </ul> <pre><code>sudo apt update\nsudo apt install signal-desktop\n</code></pre> <ul> <li>Add signal to the startup applications BUT first:<ul> <li>Make it run minimised and stored in the system tray. To do so:</li> <li>Right click the menu in the left corner and select \u2018configure\u2019.</li> <li>In the pop up menu select the [Menu] tab and the hit the [Open the menu editor] button.</li> <li>Select [Internet] in the left menu, select \u201cSignal\u201d in the right menu and then click the [Properties] button.</li> <li>Add to the Command: line: <code>--no-sandbox --use-tray-icon</code></li> <li>Do the same when adding Signal to the startup applications.</li> </ul> </li> </ul>"},{"location":"Rocinante-LinuxMint/#deluge","title":"Deluge","text":"<p>Deluge is one of the most used torrent downloaders. It\u2019s stable and easier to use as any other torrent client but the team makes it more stable by providing fix updates.</p> <pre><code>sudo add-apt-repository ppa:deluge-team/ppa\nsudo apt update\nsudo apt install deluge\n</code></pre>"},{"location":"Rocinante-LinuxMint/#graphics_1","title":"Graphics","text":""},{"location":"Rocinante-LinuxMint/#inkscape","title":"Inkscape","text":"<p>Inkscape is professional quality vector graphics software which runs on Windows, Mac OS X and GNU/Linux. It is used by design professionals and hobbyists worldwide, for creating a wide variety of graphics such as illustrations, icons, logos, diagrams, maps and web graphics. Inkscape uses the W3C open standard SVG (Scalable Vector Graphics) as its native format, and is free and open-source software.</p> <p>With below install Inkscape 1.3.2</p> <pre><code>sudo add-apt-repository ppa:inkscape.dev/stable\nsudo apt update\nsudo apt install inkscape\n</code></pre> <p>I've all kind of issues with this latest version of Inkscape so I go back to the previous version and use it as appimage. Go to the Inkscape website, select the [Download] tab and then [Current Stable Version]. At the right under Versiona select 1.2. The screen refreshes for version 1.2.2. Click the [GNU/Linux] button and then the [An Executable file for Linux] button. Save the downloaded appimage file. Right click the file, select appimagelauncher, start it and select [Integrate and Run]</p> <p>Tutorials and guides:</p> <ul> <li>http://goinkscape.com/</li> <li>https://daviesmediadesign.com/inkscape-tutorials/</li> </ul>"},{"location":"Rocinante-LinuxMint/#freecad","title":"FreeCad","text":"<p>Freedom to build what you want. FreeCAD is an open-source parametric 3D modeler made primarily to           design real-life objects of any size. Parametric modeling allows you to easily modify your design by going back into your model history and changing its parameters. Create 3D from 2D &amp; back. FreeCAD allows you to sketch geometry constrained 2D shapes and use them as a base to build other objects. It contains many components to adjust dimensions or extract design details from 3D models to create high quality production ready drawings.</p> <p>It can be installed as appimage and that seems the favourite choice of the developers, but it can alse be installed from PPA.</p> <pre><code>sudo add-apt-repository ppa:freecad-maintainers/freecad-stable\nsudo apt update\nsudo apt install freecad\n</code></pre> <ul> <li> <p>Find all information about FreeCad here.</p> </li> <li> <p>A basics tutorial can be found here.</p> </li> <li> <p>Video tutorials on YouTube can be found here, (this is the first tutorial of a series).</p> </li> </ul>"},{"location":"Rocinante-LinuxMint/#odafileconverter","title":"ODAfileConverter","text":"<p>ODA DWG-DXF CONVERTER For converting between different versions of .dwg and .dxf Useful when used with FreeCad</p> <ul> <li>Click the (DEB) button in the Downloads area</li> <li>Save the downloaded file.</li> <li>Double click the file and let GDebi install the tool</li> </ul>"},{"location":"Rocinante-LinuxMint/#darktable","title":"Darktable","text":"<p>Darktable is an open source photography workflow application and raw developer. A virtual lighttable and darkroom for photographers. It manages your digital negatives in a database, lets you view them through a zoom-able lighttable and enables you to develop raw images and enhance them.</p> <pre><code>sudo add-apt-repository ppa:pmjdebruijn/darktable-release\nsudo apt-get update\nsudo apt install darktable\n</code></pre> <p>Find darktable stuff here</p>"},{"location":"Rocinante-LinuxMint/#electronics","title":"Electronics","text":""},{"location":"Rocinante-LinuxMint/#virtualbox","title":"VirtualBox","text":"<p>VirtualBox is a general-purpose full virtualizer for x86 hardware, targeted at server, desktop and embedded use. Download VirtualBox from here. Click the Ubuntu 22.04 version and save the downloaded file. Download the VirtualBox Extension pack from here.  Double click the downloaded .deb file to allow Gdebi to install the tool.</p> <p>Note</p> <p>For several hardware projects, experiments are done with Linux. Download the 21.3 Cinnamon edition form Linux-Mint . Save the downloaded ISO image somewhere on disk and setup and install a virtual machine. Read the details in the Virtualbox document.</p>"},{"location":"Rocinante-LinuxMint/#putty","title":"PuTTY","text":"<p>PuTTY is an SSH and telnet client, developed originally by Simon Tatham for the Windows platform. PuTTY is open source software that is available with source code and is developed and supported by a group of volunteers.</p> <pre><code>sudo apt update\nsudo apt install putty\n</code></pre>"},{"location":"Rocinante-LinuxMint/#cutecom","title":"CuteCom","text":"<p>CuteCom is a graphical serial terminal. Currently it runs on Linux, FreeBSD and Mac OS X. It is aimed mainly at hardware developers or other people who need a terminal to talk to their devices. It is free software and distributed under the GNU General Public License Version 2, which can find in the file COPYING. It is written using the Qt library by Trolltech. Follow this link to visit the sourceforge project page. CuteCom doesn't use the autotools (autoconf, automake, libtool, etc.) Instead \"configure\" is simply a wrapper script which calls qmake. To uninstall CuteCom simply delete the file \"cutecom\" and the file \"cutecom.desktop\" and you're done. The config file is ~/.config/CuteCom/CuteCom.conf (was ~/.qt/cutecomrc in the Qt3-based versions).</p> <pre><code>sudo apt update\nsudo apt install cutecom\n</code></pre>"},{"location":"Rocinante-LinuxMint/#gtkwave","title":"GTKwave","text":"<p>GTKWave is a fully featured GTK+ based wave viewer for Unix, Win32, and Mac OSX which reads LXT, LXT2, VZT, FST, and GHW files as well as standard Verilog VCD/EVCD files and allows their viewing.</p> <p>Documentation can be found here as PDF file.</p> <p>There is NO repository for GTK-wave, thus for updates a timely visit to the gtkwave web site is required. That visit is necessary when the most up to date version is wanted because earlier (older) versions are available in Ubuntu repositories and can simply be installed by typing:</p> <pre><code>sudo apt update\nsudo apt install gtkwave\n</code></pre> <p>The more extended way, when the latest version is required, to install it is described in GTK Wave Installation. With this extended install it is also possible to install GtkWave in a chosen directory.</p>"},{"location":"Rocinante-LinuxMint/#logisim-evolution","title":"Logisim-Evolution","text":"<p><code>Logisim-evolution</code> is educational software for designing and simulating digital logic circuits. <code>Logisim-evolution</code> is free, open-source, and cross-platform.</p> <p>Project highlights:</p> <ul> <li>easy to use circuit designer,</li> <li>logic circuit simulations,</li> <li>chronogram (to see the evolution of signals in your circuit),</li> <li>electronic board integration (schematics can be simulated on real hardware),</li> <li>VHDL components (components behavior can be specified in VHDL!),</li> <li>TCL/TK console (interfaces between the circuit and the user),</li> <li>huge library of components (LEDs, TTLs, switches, SoCs),</li> <li>supports multiple languages,</li> <li>and more!</li> </ul> <p>To install it go to the GitHub page</p> <pre><code>https://github.com/logisim-evolution/logisim-evolution\n</code></pre> <p>Logisim-evolution is a Java application it can thus run on any operating system supporting the Java runtime enviroment. It requires Java 16 (or newer).</p> <p>Click the following platform specific packages, they include the Java runtime and do not require it to be installed separately:</p>"},{"location":"Rocinante-LinuxMint/#kicad","title":"KiCad","text":"<p>KiCad EDA is A Cross Platform and Open Source Electronics Design Automation Suite</p> <pre><code>sudo add-apt-repository ppa:kicad/kicad-8.0-releases\nsudo apt update\nsudo apt install kicad\n</code></pre>"},{"location":"Rocinante-LinuxMint/#kicad-libraries","title":"KiCad Libraries","text":"<p>Libraries are included along with KiCad installation. Downloading the libraries is only necessary when a newer version is required than the one offered with the installed KiCad version. Libraries can be kept up to date with the latest additions by cloning the library repositories using Git. Tracking the library repositories using Git means that only the changes to the libraries need to be downloaded, rather than retrieving the entire library set each time. It is also a good idea to download the libraries and keep them up to date in case there is no internet connection available.</p> <ul> <li>Schematic symbols: https://kicad.github.io/symbols</li> <li>PCB footprints: https://kicad.github.io/footprints</li> <li>3D models: https://kicad.github.io/packages3d</li> <li>Library data are updated weekly, and track the KiCad GitHub repositories.</li> </ul> <p>There are also third party libraries available form:</p> <ul> <li>Digi-Key maintains an atomic parts library for KiCad on their GitHub page. These libraries are licensed under an agreement similar to the official libraries.</li> <li>SparkFun Electronics provide KiCad library files for many of their products on their GitHub page. These libraries are based on the SparkFun Eagle libraries.</li> <li>SnapEDA provides KiCad symbol and footprint libraries for their customers.  The libraries are freely available and can be found on their KiCad library page.  The library license can be found on their terms of service page.</li> </ul>"},{"location":"Rocinante-LinuxMint/#xilinx-tools","title":"Xilinx Tools","text":"<p>This is the big name in Field Programmable Gate Array (FPGA). Install the tools as described in the Xilinx Tools Setup document.</p>"},{"location":"Rocinante-LinuxMint/#efinix-tools","title":"Efinix tools","text":"<p>A very promising low cost FPGA vendor. Install and configure the software as described in Efinix_Installation document.</p>"},{"location":"Rocinante-Manjaro/","title":"Rocinante-Manjaro","text":""},{"location":"Rocinante-Manjaro/#introduction","title":"Introduction","text":"<p>After finding Arch-Linux and discovering that it had all whistles and bells I needed but then reading all the comments about the heavy install procedure, It was a refreshing discovery that Manjaro popped up to the rescue.</p> <p>Manjaro installs as easy as Linux Mint and/or Ubuntu but offers all Arch Linux offers and It must be said, It works perfect and without hassle. Yes there are things like settings, tuning and installs that need to be done manually but that's also the case for Mint and Ubuntu. After that and when getting used to the small differences with the other distros, two things run smooth (Bluetooth now even connects automatically the Edifier bookshelf speakers what never happened with Mint and Ubuntu).</p>"},{"location":"Rocinante-Manjaro/#install-manjaro","title":"Install Manjaro","text":"<ul> <li> <p>Download the Manjaro ISO image from Manjaro.org.</p> </li> <li> <p>Select after pushing the [Download] button, chose to download the Cinnamon Desktop Manjaro version or select a different desktop. Know that the Cinnamon version is community managed while there are also three official desktop (KDE, Xfce, Gnome) versions.     At time of writing this text the download is: majaro-cinnamon-24.0.0.240710-linux69.iso</p> </li> <li> <p>Write the downloaded ISO to a USB thumb drive and then boot the new PC from that drive.</p> </li> <li> <p>At the first booted Manjaro screen tell to boot with:</p> <ul> <li>Open source drivers (this is the default and also used here as no proprietary driver is required)</li> <li>Proprietary drivers (select this when using Nvidia graphics cards or special Ethernet setups)</li> </ul> </li> <li> <p>Double click the Install Manjaro Linux icon on the desktop to start the install tool.</p> </li> <li> <p>Select the installation language and click [Next]</p> </li> <li> <p>Chose the region and zone the PC with Manjaro Linux is going to be in.</p> </li> <li> <p>Select the keyboard and it's variant.     Try the specialist keys of the keyboard out in the trial area.</p> </li> <li> <p>Select in the partition selection:</p> <ul> <li>\"Erase Disk - SWAP(with Hibernate)\" for a Microsoft Windows-isch installation when the installer does the complete job of partitioning and installing.</li> <li> <p>\"Manual partitioning\" for a own partitioning scheme as the one provided in the main Rocinante document. </p> <p>Tip</p> <p>The partitioning table in the main Rocinante is that for the new PC I have constructed, but most likely another new PC will require a different partitioning table. Thus make a similar table for your new machine before starting the installation. This will overcome a lot of frustration during and after installation.</p> </li> </ul> </li> <li> <p>Follow the install pages and provide the correct answers.</p> </li> <li> <p>Indicate during the installation to also do software updates but don\u2019t ask to load proprietary software as none is required for the given hardware setup.</p> </li> </ul> <p>Go and have a cup of coffee, hot chocolate or cup of thee with coffee corner chat and upon return Ubuntu Linux is going to be installed. The installer is asking to remove the USB thumb drive and hit [Enter]. Do it to reboot in Manjaro.</p>"},{"location":"Rocinante-Manjaro/#after-the-first-reboot","title":"After the First Reboot","text":"<p>Important</p> <p>Installing, updating and/or upgrading software requires root access.  When the Installation, update and/or upgrade is done using GUI type of tools a popup will be presented asking for the root password. When installing, updating and/or upgrading software in a command terminal root access is obtained by the sudo keyword (sudo followed by a command). The command line interface will ask for the root password.</p>"},{"location":"Rocinante-Manjaro/#updates","title":"Updates","text":"<p>Completely different than Linux Mint and Ubuntu, Manjaro is on a rolling release cycle, so you never have to download a new version of Manjaro or worry about your current install reaching its end of life. Keeping Manjaro up to date is then a very important necessity!</p> <p>Manjaro does not function the Ubuntu and Mint way of using repositories either. official Arch Linux and Manjaro repositories are installed by default and can easily be accessed. Launch the software center and install or update/upgrade tools. Manjaro know one extra repository called the Arch User Repository (AUR). Find here all software Mint and Ubuntu need multiple repositories.</p> <p>During daily use, updating can be done with a few clicks via GUI or a few keystrokes via the command line <code>sudo pacman -Syu</code>, and is very simple to do. Since Manjaro is on a rolling release schedule, updating Manjaro is just a matter of instructing the package manager to install all the latest versions of the software on your system. Package dependencies, conflicts, and outdated software are taken care of automatically. </p> <p>Here it's a first startup after the installation of Manjaro, thus make sure all new stuff is installed and functional before continuing anything else.</p> <p>Let's start the first check if everything is up to date and functioning</p> <ul> <li> <p>Hit the [Menu] button in the left bottom corner of the screen, start typing \"update ...\".      While typing one tool is showed; Add/Remove Software. Click it to start the tool.</p> <p>Important</p> <p>The tool showing up in the Manjaro main menu structure as Add/Remove Software is in reality called PAMAC. From now on Add/Remove Software will be referred to as PAMAC.</p> <p>Note</p> <p>Manjaro only knows one tool to do it all. Installing, removing, updating, upgrading and OS related things are all done using PAMAC.</p> </li> <li> <p>Set up of the PAMAC tool</p> <ul> <li> <p>Click the thee small horizontal lines at the right top of the tools pane (left of the minimise, maximise and close buttons).</p> </li> <li> <p>In the drop down menu select [Preferences] (requires root password).</p> <ul> <li> <p>[General] - [Updates] tab:</p> <ul> <li>Check for updates should be default ON, if not turn it on</li> <li>Update check frequency, change it if wanted but default it's set to every day</li> <li>Check the other options and maybe change them else leave the rest as is.</li> </ul> </li> <li> <p>[General] - [Downloads] tab:</p> <ul> <li>I've set the number of parallel downloads to 6</li> </ul> </li> <li> <p>[General] - [Official Repositories]</p> <ul> <li>Leave it to: Worldwide</li> </ul> </li> <li> <p>[General] - [Cache] tab:</p> <ul> <li>I've set \"keep package versions\" to 2</li> </ul> <p>Tip</p> <p>Come here on a regularly base and hit the [Clean] button to clear the cache.</p> </li> <li> <p>[Advanced] tab:</p> <ul> <li>Turn the slider for chack available disk space to ON.</li> <li>Do the same for required dependencies</li> </ul> </li> <li> <p>[Third Party] tab:</p> <ul> <li>Turn the slide for \"Enable AUR support\" to ON.</li> </ul> <p>Tip</p> <p>Come here on a regularly base and hit the [Clean] button to clear the tmp</p> </li> <li> <p>The tool is configured, close the pane and return to the main pane.</p> </li> </ul> </li> <li> <p>Click the [Updates] button on top of the tool pane.</p> <ul> <li>When everything i updated and running it shows: Your system is up to date</li> <li>Hit the [Regresh] button to check and when it tool comes back with the above message everything is really up to date.</li> <li>If there are things that need updated, they will be presented and a button click will update the things.</li> </ul> </li> </ul> </li> </ul> <p>The updater will set itself, as a little shield, in the bottom right panel and after the \"every day\" check, it's possible that updates need to be applied. The little shield will turn red.</p>"},{"location":"Rocinante-Manjaro/#logs","title":"Logs","text":"<p>Let this be the first software package to install with the PAMAC tool. When booting, stopping or running drivers and software, log files are created. In Manjaro there is no one place to show all log messages of the system as in Linux Mint can be done. But it is possible to install the tool that does the job in Linux Mint, called; gnome logs.</p> <ul> <li> <p>In the PAMAC tool, search bar type logs</p> </li> <li> <p>The top of the list shows a magnifying glass with title Logs (gnome-logs) and some brief comments.</p> </li> <li> <p>Hit the blue square with white down pointing arrow to install the logs tool.</p> <p>Important</p> <p>When a tool is installed the blue square with white down pointing arrow is changed into a red square with rubbish bin graph.</p> <p>To remove a tool from the system, click the red square with rubbish bin graph. The tool and all its dependencies is removed from the system.</p> </li> </ul> <p>One thing to know; if warnings and/or errors are listed here, it means they are not blocking or at first harmful to the Linux and desktop environment. That does not mean that the listed items don't need to be solved.</p> <ul> <li> <p>After a start or reboot of the PC and Linux, do start the Logs tool and solve any listed item.</p> </li> <li> <p>When the tool is started, under Important all warnings and errors that need attention are listed. </p> <ul> <li> <p>A suddenly listed item was about the keyboard, a Logitech Logi keyboard and mouse are used and the warning showing up was:     <pre><code>systemd-udevd[298]: event3: Failed to call EVIOCSKEYCODE with scan code 0x7c, and key code 190: Invalid argument\n</code></pre></p> </li> <li> <p>After searching teh web, this explication came </p> </li> <li> <p><code>Most keyboards report a single usb device 'interface' for the keyboard (some have separate interface(s) for builtin mice or other non-keyboard stuff). However, your keyboard reports two separate 'interfaces' for your single keyboard. Unfortunately, both of the interfaces it reports use the exact same vendor and product id, so there's no way for systemd to tell which is which, from the bus/vendor/product info.     However these warning log messages are only produced for the second interface which doesn't actually support or provide the scancodes in question. So, this logged warning is completely harmless and you can ignore it.</code></p> </li> <li> <p>The the reported issue is harmless but annoying in the logs.     It need a solution, so it wont pop up again</p> </li> <li> <p>Solve it by blacklisting the eeepc-wmi module.     To blacklist, create the file <code>/etc/modprobe.d/blacklist.conf</code> and add the following      line: <code>blacklist eepc-wmi</code></p> </li> </ul> </li> <li> <p>Reboot and again type \"Logs\" Hit the [Menu] button and start the logs tool.</p> </li> <li>Possible the next and only warning left will be about gkr-pam.      This message can safely be ignored.</li> </ul>"},{"location":"Rocinante-Manjaro/#backups","title":"Backups","text":"<ul> <li> <p>As for the two other discussed disti, having a system backup is required. Timeshift is the Linux equivalent of Apple's Time Machine. Thus Timeshift is the must have tool. </p> </li> <li> <p>Install the tool:</p> <ul> <li> <p>Hit the [Menu] button in the left bottom corner of the screen, start typing \"software ...\".      While typing one tool is showed; Add/Remove Software. Click it to start the tool.</p> </li> <li> <p>Click the magnifying glass in the left top of the tool pane and enter in the [Search   ] bar timeshift.</p> </li> <li> <p>The Timeshift tool is presented as an icon with some brief comments and at the right side a blue square with white down pointing arrow.</p> </li> <li> <p>Hit the blue square with white down pointing arrow and then hit the [Apply] button at the bottom of the pane to install Timeshift</p> <p>Important</p> <p>When a tool is installed the blue square with white down pointing arrow is changed into a red square with rubbish bin icon.</p> <p>To remove a tool from the system, click the red square with rubbish bin graph. The tool and all its dependencies is removed from the system.</p> </li> <li> <p>After installation Timeshift will be available from the [Manjaro Menu] button at the left bottom of the screen and also from the command line but then it will work without GUI interface. </p> <ul> <li> <p>Hit the [Manjaro Menu] button, and start typing \"timeshift\".     Double click the appearing timeshift icon to start the GUI version of Timeshift</p> <ul> <li> <p>Click [Settings]</p> <ul> <li> <p>[Location]: indicate where Timeshift can drop it's backups of the system </p> <p>Note</p> <p>At least 1 TB to 2 TB is required as a decent backup space. The Timeshift storage location, like in the base Rocinante document provided partition table shown, can be set to a installed and dedicated 2 TB hard disk. Timeshift backups can be set onto the NAS drive (setup of a NAS drive is discussed later in this document) as that device has most of the time lots of space. </p> </li> <li> <p>[Schedule]: Tell the system when to backup and how many backups to keep.     Example: hourly, 1 backup and daily 2 backups.</p> </li> <li> <p>[Filters]: Tell the system what, and what not to backup.</p> </li> <li> <p>Click [OK]</p> </li> </ul> </li> <li> <p>Click [Create] to make the first set of backups.</p> </li> </ul> </li> <li> <p>Close the Timeshift tool</p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"Rocinante-Manjaro/#graphics","title":"Graphics","text":"<ul> <li>Thanks to the hardware scanner part of the Manjaro installer the GPU tools are installed automatically.</li> </ul>"},{"location":"Rocinante-Manjaro/#games","title":"Games","text":"<ul> <li>No games are installed, thus no need to remove them.</li> </ul>"},{"location":"Rocinante-Manjaro/#kernel","title":"Kernel","text":"<ul> <li> <p>As all Linux Arch based systems Manjaro comes with the latest available stable kernel version. </p> </li> <li> <p>If a newer stable version is available when Manjaro is installed an update run will install that newer kernel.</p> </li> <li> <p>The installed Manjaro system will always use the latest available stable kernel.     Manually installing a new kernel is as easy as:</p> <ul> <li> <p>Click the [Manjaro Menu] icon in the left bottom of the screen.</p> </li> <li> <p>Start typing settings</p> </li> <li> <p>From the presented options list, select Manjaro Settings Manager</p> </li> <li> <p>Double click the Kernel (Penguin) icon</p> </li> <li> <p>A list of all, at that moment, available kernels is presented.</p> <ul> <li>The one running the system is indicted as [Running] - [Installed]</li> <li>Select the wanted kernel and hit the [Install] button.     The selected kernel is installed and will be used at next boot.</li> </ul> <p>At time of writing, the 6.5.3-1 kernel was changed for the 6.6.40-1 kernel. The 6.5.3-1 kernel is left [Installed] as possible fall-back kernel in case of ...</p> </li> </ul> <p>!!!! Note \"Important\"     To keep a stable system, use only kernels indicated as [LTS] and [Recommended]</p> </li> </ul>"},{"location":"Rocinante-Manjaro/#possible-reboot-issue","title":"Possible Reboot Issue","text":"<p>It is possible that after a reboot in \u201clogs\u201d a warning message appears about \u201csomething ... casper\u201d. This casper tool is not of any use when not porting Linux and can thus be disabled. Do this as:</p> <ul> <li>Start a command terminal</li> <li>Enter: <code>sudo sysemctl disable casper-md5check.service</code></li> </ul>"},{"location":"Rocinante-Manjaro/#numlockx","title":"Numlockx","text":"<p>Useful to have installed is \"numlockx\". It makes the numeric keypad of keyboard available without the need to push the [Numlock] key.</p> <p>Install the tool:</p> <ul> <li> <p>Hit the [Menu] button in the left bottom corner of the screen, start typing \"software ...\".      While typing one tool is showed; Add/Remove Software. Click it to start the tool.</p> </li> <li> <p>Click the magnifying glass in the left top of the tool pane and enter in the [Search   ] bar numlockx.</p> </li> <li> <p>The numlockx tool is presented as an icon with some brief comments and at the right side a blue square with white down pointing arrow.</p> </li> <li> <p>Hit the blue square with white down pointing arrow and then hit the [Apply] button at the bottom of the pane to install numlockx</p> </li> <li> <p>Change directory to the /etc/lightdm directory (this is for the Cinnamon install).</p> </li> <li>Open as root with a text editor the lightdm.conf file<ul> <li>Search for a text line staring with #greeter-setup-script=</li> <li>Remove the # and add after the = /usr/bin/numlockx on</li> <li>Save the file</li> </ul> </li> <li>Next time the numeric keypad will be available from boot.</li> </ul>"},{"location":"Rocinante-Manjaro/#nas-devices","title":"NAS devices","text":"<p>When having a NAS device connected to the network, enable access to its directories</p> <ul> <li> <p>Add the different users and their directories to the fstab file. The NAS drive users and their directories are mounted, using NFS, as if they were regular drives to make it look as if the NAS drive is part of the drives of the PC</p> </li> <li> <p>Open with a text editor, as root/sudo, the /etc/fstab file</p> </li> <li> <p>Add the NAS drive and users to the file.     <pre><code>&lt;NAS IP&gt;/&lt;Volume&gt;/&lt;User directory&gt; /mnt/&lt;Mount Directory&gt; nfs4 &lt;nfs options&gt; 0 0\n</code></pre></p> <p>example:</p> <pre><code>IP_address:/volume/VolumeName /mnt/MountName nfs4 x-systemd.automount,_netdev,noacl,nocto,rsize=32768,wsize=32768   0   0\n</code></pre> <ul> <li> <ul> <li>The NAS is a networked device, accessed by its IP_address</li> <li>A NAS can have several volumes (volume)and every volume can be used by several people, each having their own directory (VolumeName). This data is available when logging in to the NAS-es control and configuration web page.</li> <li>The NAS device is mounted onto the Linux OS and the place to do that is the /mnt directory.</li> <li>Each users NAS drive is mimicked in the Linux mount by it's own dedicated name (MountName)</li> </ul> </li> </ul> </li> <li> <p>After installation of Manjaro check in the PAMAC tool if nfs-utils  and nfsidmap are installed. If they are just enable nfs, if they are not install the tools and then enable nfs.</p> <ul> <li>Check if both tools are installed, start Add/Remove Software from the main Manjaro menu.</li> <li>Click the magnifying glass (top left of the GUI pane) and type in the search bar  <code>nfs</code></li> <li>The two above mentioned tools should be installed (Have a red square with waste bin at the right).   If not (A blue square with white down arrow) install both tools.</li> <li>Start a command terminal and type: <code>systemctl enable --now nfs-client.target</code></li> </ul> </li> <li> <p>Add the user(s) to the netdev group     <code>sudo usermod -a -G groupname username</code> or for user marc and netdev: <code>sudo usermod -a -G netdev marc</code></p> </li> <li> <p>Restart the PC to let the modified fstab file be activated/read.     It will create directories at the given mount points and with the given names.     Example: </p> <ul> <li>If the \\/\\/\\ /mnt/\\ is in the fstab file, after boot the system /mnt directory will have a sub directory /\\ that mimics the contents of the \\/\\/\\ directory on the NAS device. <li> <p>It is possible, most likely, that the created files and possible directories are owned by root and that therefore the content of the directories is not accessible by the user of the machine.     To get this solved do:</p> <ul> <li>Disable the nfs NAS mount points in the fstab file (Put a # in front of each line).</li> <li>Reboot the machine.</li> <li>After boot go to the /mnt system directory (the earlier created directories are still there) and change the owner, group and access permissions of the directories, these directories are constructed by nfs due to the execution of the root owned fstab at the first boot.</li> <li>Enable the nfs NAS mount lines in the fstab file (remove the #).</li> <li>Reboot the machine.</li> <li>Now accessing the NAS directories should work.</li> </ul> </li> <li> <p>Directories and other stuff created on the NAS might be owned by a user user. Therefore it might be necessary to make the Linux user part of the group users, by: <code>sudo usermod -a -G users &lt;user&gt;</code></p> </li>"},{"location":"Rocinante-Manjaro/#bluetooth","title":"Bluetooth","text":"<p>All, 99.9 %, of all new motherboards is equipped with Bluetooth capabilities and the Bluetooth hardware is normally default enabled in the BIOS. But in my experience with several motherboards, making the on-board Bluetooth work is a real pain. </p> <p>Maybe the first thing one should do is to check if the motherboard is equipped with Bluetooth and it is indeed default enabled in the BIOS. </p> <ul> <li> <p>For a ASUS motherboard; boot or reboot the machine and keep hitting the [DEL] or [F2] key to get the BIOS pages. Check for Bluetooth.</p> </li> <li> <p>Try first to use the on-board Bluetooth, go to 1.</p> <ol> <li> <p>Remove all Bluetooth related tools, reboot the PC, then reinstall Bluetooth stuff. </p> <ul> <li>Start the PAMAC tool</li> <li>Click the magnifying glass at the left top of the GUI pane.</li> <li>Type in the search bar: rfkill<ul> <li>A util-linux package should show up as installed (red square with waste bin).</li> <li>Click the red squared waste bin, will turn into a red square with V.</li> </ul> </li> <li>Type now in the search bar: blue<ul> <li>Following utilities should show up as installed: blueman, bluez, bluez-libs and bluez-utils</li> <li>Click for each if these the red squared waste bin</li> </ul> </li> <li>Finally type in the search bar: blueman<ul> <li>Click  the red squared waste bin right of the blueman utility.</li> </ul> </li> <li>Click now at the right bottom of the GUI pane the [Apply] button to remove all tools and libraries.</li> <li>Reboot the PC (shut down and restart)</li> <li>Start the PAMAC tool and install all previous removed utilities.      That can be done the same way as removing, click the blue square with white down arrow (turns into a blue square with **V*), do the same for the other utilities and at the end hit the [Apply] button in the right bottom corner.</li> </ul> <p>Note</p> <p>Above removal and re-installation of Bluetooth utilities can be done from the command line with pacman, but there is chosen to organise it thru the GUI based Add/Remove tool so one gets quickly acquainted to the tool and the easiness of it.</p> </li> <li> <p>Now, normally, Bluetooth should work. If not search for warning or error messages in the logs and search for solutions.</p> </li> </ol> </li> <li> <p>If Bluetooth still doesn't work decently, disable the on-board Bluetooth and plug a Bluetooth dongle in one of the many USB ports. Try to use a USB port on the front or top of the computer case to expose the dongle to the world.</p> <p>!!!! Note     These days motherboards seem to have also on-board WIFI. Disable it!.     A desktop computer doesn't need WIFI but needs to connect to wired Ethernet</p> </li> <li> <p>Check if the Bluetooth dongle is recognised by one of the on-board USB switches.</p> <ul> <li>Start a command terminal and enter <code>lsusb</code></li> <li>One of the returned lines can be something as:     <code>Bus 009 Device 003: ID 0a12:0001 Cambridge Silicon Radio, Ltd Bluetooth Dongle (HCI mode)</code>      This is the Bluetooth dongle signature.</li> </ul> </li> <li> <p>Restart from point 1 above and normally Bluetooth should work now.</p> </li> </ul> <p>If Bluetooth don't work or don't decently work or stops working or ... with or without bluetooth dongle, these things can be done to find a possible cause.</p> <ul> <li> <p>Open a command terminal and:</p> <ul> <li> <p>Check the Bluetooth blocking status , enter <code>sudo rfkill list</code></p> <ul> <li>The correct returned answer is no  for soft and hard blocked Bluetooth.</li> <li>If one or both return yes, unblock it by typing <code>sudo rfkill unblock bluetooth</code></li> </ul> </li> <li> <p>Check the Bluetooth service status, enter <code>sudo systemctl status bluetooth.service</code></p> <ul> <li>If the Bluetooth is inactive, start it with: <code>sudo systemctl start bluetooth.service</code></li> </ul> </li> <li> <p>The bluez daemon is the orchestrating Bluetooth part and when that is not up to date all kind of weird issues can pop up. </p> <ul> <li>Check the current version of bluez: <code>pacman -Qi bluez | grep -i version</code></li> <li>Update the bluez daemon: <code>sudo pacman -Syu bluez</code></li> </ul> </li> <li> <p>Make Bluetooth persistent</p> <ul> <li> <p>Start a text editor as sudo with a file name bluetooth-restore.service</p> </li> <li> <p>Save the empty file in: /etc/systemd/system</p> </li> <li> <p>Add following lines to the empty file</p> <pre><code>[Unit]\nDescription=Restart Bluetooth after suspend\nAfter=suspend.target \n\n[Service]  \nType=simple\nExecStart=/usr/bin/bash -c \"rfkill unblock bluetooth ; systemctl start bluetooth\"\n\n[Install]  \nWantedBy=suspend.target\n</code></pre> </li> <li> <p>Save the file and close the text editor.</p> </li> <li> <p>Start the just created service: <code>sudo systemctl enable bluetooth-restore.service</code></p> </li> </ul> </li> <li> <p>If audio quality sucks</p> <ul> <li> <p>install, with PAMAC, the bluetoothctl command line tool </p> <p>Command line install: <code>sudo pacman -S bluetoothctl</code></p> </li> <li> <p>Run the tool, to get device info, by typing in the command terminal: <code>bluetoothctl</code></p> <ul> <li>When having run earlier <code>sudo systemctl status bluetooth.service</code> the Bluetooth device MAC address has been displayed. Run now, from the bluetoothctl prompt:      <code>info &lt;MAC address&gt;</code></li> <li>There should be a mentioning of A2DP in all obtained information.     If it's not displayed and the device support high-quality audio then, force A2DP.</li> </ul> </li> <li> <p>exit the bluetoothctl tool by typing: <code>quit</code></p> <ul> <li> <p>Start a text editor with /etc/bluetooth/main.conf as file to open.</p> </li> <li> <p>Add under the General section:</p> <pre><code>Enable=Source,Sink,Media\nDisable=Socket\n</code></pre> </li> <li> <p>Save the file and restart the daemon: <code>sudo systemctl restart bluetooth</code>.     That explicitly permits A2DP while stopping HFP.</p> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"Rocinante-Manjaro/#printer-scanner","title":"Printer / Scanner","text":"<p>The attached printer is an all-in-one (printer, scanner, fax) Brother MFC-J6720DW device, but what's discussed here applies for other printer/scanners too.</p>"},{"location":"Rocinante-Manjaro/#printer","title":"Printer","text":"<p>The printer was automatically recognised but to make it print decently these things needed to be done:</p> <ul> <li>Open the System Settings tool and double click the Printers icon in the hardware section.</li> <li>Click the [Server] tab and select Settings.<ul> <li>Vote for  Publish shared printers ...</li> <li>Hit [OK]</li> </ul> </li> <li>Select the printer, right click:<ul> <li>Tick the voting box in front of Enabled and in front of Shared </li> <li>Select Properties from the fall down menu<ul> <li>Her lot of things can be set or unset.</li> <li>Under [Printer Options] the [Media Size] needed to be set to A4 (Borderless) in order to be able to use the full paper size.</li> </ul> </li> </ul> </li> </ul>"},{"location":"Rocinante-Manjaro/#scanner","title":"Scanner","text":"<p>The printer was automatically recognised but not so the scanner. A small and easy to use scanner tool (Document Scanner) is automatically installed with the Manjaro install but it needs software te be able to connect to a scanner.</p> <p>Install, using the PAMAC tool (AUR repository) the brscan-key and brscan4 utilities to make the scanner software work.</p>"},{"location":"Rocinante-Manjaro/#tuning-cinnamon","title":"Tuning Cinnamon","text":"<p>Cinnamon is the desktop environment of the Manjaro installation, so no special tuning need to be done. Anyway, if one want to change background, font type and or size, window behavioural, ... start the System Settings tool and modify [Appearance], [Preferences], [Hardware] and/or [Administration].</p> <p>Soem stuff that might be helpful when puitting the installation into the users wanted shape.</p> <ul> <li> <p>Calendar, date and time settings can be entered as: %H:%M:%S %n %d%b%y</p> </li> <li> <p>Checking and changing the shell (best use BASH):</p> <ul> <li>Check shelll: <code>ps -p $$</code></li> <li>Set shell: <code>sudo chsh -s /bin/bash \\&lt;user&gt;</code></li> </ul> </li> <li> <p>Nemo the file browser can be customised and all custom settings are written and kept in <code>/home/&lt;user&gt;/.config/dconf</code>. It is often see that when customising Nemo for the root user, all customisation are lost adn it is not really possible to customise the file browser for the root user.     The solution is to copy, as rooy/sudo, the dconf directory in .config to the .config directory of the root user. By default it seems that the root user doesn't have a dconf directory and therefore it is not possibl eto customise the file browser.</p> </li> <li> <p>If there is a previous PC running Linux and Rhythmbox is used as radio/podcast player, copy the /home//.local/share/rhythmbox directory over from the old to the new PC. This way all presets are immediately available and set for the new machine as they were customised for the old PC. <li> <p>Provide the user with extra group permissions</p> <ul> <li> <p>Hit the [Manjaro Menu] button and start typing users. Click Users and Groups</p> </li> <li> <p>In the new popped-up pane select the user. On the right side the users credentials are displayed together with the Groups the user belongs to. </p> </li> <li> <p>Click the summary of the groups and a new target list will pop up.</p> </li> <li> <p>In that list select or leave selected: </p> <ul> <li> <p>adm, audio, bluetooth, crontab, lp, \\, network,      openvpn, power, root, scanner, sys, systemd-journal,      users, vboxsf, vboxusers, vieo, wheel. <li> <p>If one of these groups doesn't exist, click the [Groups] tab and [Add] the missing group.</p> </li>"},{"location":"Rocinante-Manjaro/#installing-user-software","title":"Installing user software","text":"<p>Since Manjaro is a rolling release update system, automatically the system is going to be equipped with the latest versions of installed software. Installing, removing and updating software is all done using the PAMAC tool. No need to add repositories or keys or work in a command terminal with the apt cli tool since everything is distributed from the same place.  Unless explicitly mentioned, below discussed software installations are installed from the PAMAC tool . The only good reason to install software manually is to install the software in a user dedicated directory.</p> <p>Manually installing software can be done using:</p> <ul> <li>A command terminal and the pacman CLI tool.</li> <li>Using AppImage files.     AppImage files are kind of compressed files for a single application. Everything the application requires is packed in the compressed file and the tool can thus be run by executing it. A tool make software life easier is AppImageLauncher (more later).</li> </ul> <p>To install software, click the [Menu Manjaro] button in the left bottom corner of the screen and start typing software. The first presented option is: Add/Remove Software, select it. Add/Remove Software is the fancy name for the PAMAC tool. The preference for the tool have been set in the Updates chapter of this document. If not already done, go there to set everything up and then come back here.</p> <p>To install software;</p> <ul> <li> <p>Click the magnifying glass at the top left corner of the GUI</p> </li> <li> <p>Type or start typing the name or function of the tool that needs to be installed. </p> </li> <li> <p>Hit [Enter] and a list with possibilities is presented, showing most likely the tool to install on top.</p> <ul> <li>If the tool is already installed as red square with waste bin is shown right of the tools title</li> <li>Remove an installed tool by clicking the red squared waste bin, will turn into red squared V</li> <li>If the tool is not yet installed a blue square with white down arrow is showed.</li> <li>Install a tool by clicking the blue squared white down arrow, it will turn into a blue squared V.</li> <li>Hit then the [Apply] button in the bottom right corner of the GUI pane and enter credentials.</li> </ul> </li> </ul> <p>Note</p> <p>All later in the document discussed software tools have a line \"Use PAMAC to ...\". It just installs the discussed tool using PAMAC snd nothing else. Multiple tools can be installed at once by selecting (clicking the blue squared white down arrow button) each tool and when all required software tools are selected hit the  [Apply] button in the bottom right corner of the GUI pane and enter credentials.</p>"},{"location":"Rocinante-Manjaro/#system","title":"System","text":""},{"location":"Rocinante-Manjaro/#timeshift","title":"Timeshift","text":"<p>A tool I liked to appreciate in Linux-Mint. It saved me a couple of times from getting a stroke. Timeshift is a tool to take automatically backups of the system. It can take hourly and daily backups and store several backups on disk (use an external disk!).</p> <p>Use PAMAC to install Timeshift</p> <p>After installing the tool, take a first snapshot of the system till now.</p> <ul> <li>Start Timeshift from the menu (start typing timeshift and when it's displayed hit enter).</li> <li>Select the snapshot type : RSYNC</li> <li>It starts estimating the snapshot size and then comes back with a list of disks. During install of Ubuntu the 4 TB WDC siak has been reserved for timeshift. It got the name TimeMachine and is mounted as /mnt/TimeMachine. Select that disk and click[Next].</li> <li>Set the snapshot levels you want (Monthly, Weekly, Daily, Hourly, Boot) and determine how many snapshots to keep. Example: Daily: 3 and Hourly: 6.</li> <li>Determine what to backup and what not.</li> <li>[Finish], hit the [Create] tab to get the first snapshot.</li> </ul> <p>Tip</p> <p>It is a good idea to make a new snapshot when all tools are installed and configured.</p>"},{"location":"Rocinante-Manjaro/#appimagelauncher","title":"AppImageLauncher","text":"<p>Integrate AppImages to your application launcher with one click, and manage, update and remove them from there. Double-click AppImages to open them, without having to make them executable first.</p> <p>Use PAMAC to install appimagelauncher from the AUR repositories</p> <p>Configure the Appimagelauncher tool so all used appimage files are managed from, one place.</p> <ul> <li> <p>Create, as root/sudo, in /opt a directory AppImages and change the owner, group and properties of the directory. Use a file browser (Nemo) to do that or use a command line terminal.</p> <ul> <li><code>cd /opt     sudo chown &lt;user&gt; AppImages     sudo chgrp &lt;user&gt; AppImages     sudo chmod 775 AppImages</code></li> </ul> </li> <li> <p>Click the [Menu Manjaro] button in the left bottom corner of the screen and start typing appimagelauncher. The first presented option is: AppImageLauncher Settings, select it.</p> </li> <li> <p>[AppimageLauncher] tab</p> <ul> <li>Tick the box left of \"Ask whether to move AppImage files ... \"</li> <li>Set the location were to store the appimage files and were to execute them from to     <code>/opt/AppImages</code></li> </ul> </li> <li> <p>[AppimageLauncherd] tab</p> <ul> <li>Tick the box left of \"Auto start auto-integration ... \"</li> </ul> </li> <li> <p>Click [OK]</p> </li> </ul> <p>How to run a tool disguised as appimage </p> <ul> <li>Download the tools .appimage file and save it somewhere on disk</li> <li>Right click the appimage file and select \"Open with AppImageLauncher\" or double click the file to autoload it with AppImageLauncher.</li> <li>A pop-up pane will ask (2 buttons): [Run Once] - [Integrate and run]     Chose for [Integrate and run] as then the tools appimage file will be moved to the directory set in the preferences and it will become available in the main menu of the system.</li> </ul>"},{"location":"Rocinante-Manjaro/#bitwarden","title":"Bitwarden","text":"<p>The best Password storage and sharing application. It's a desktop tool (Windows/Linux/IOS), a phone app (Android/IOS) and a browser plugin. Thus when used passwords are available from any and for any system. It is possible to use PAMAC to install Bitwarden but then it's installed somewhere on disk under control of the PAMAC Bitwarden build files.</p> <p>Better is to download it because then it can be installed in a custom place under control of the user.</p> <ul> <li>Download as Appimage file from the Bitwarden web site, </li> <li>Save the file on disk</li> <li>Double click the saved file and for the popped-up pane click the [Integrate and Run] button</li> <li>Bitwarden will start and ask for credentials.</li> </ul> <p>What happened is; the saved appimage file is copied to the /opt/AppImages directory and the AppImageLauncher created an input for the [Manjaro main] menu so that when clicking the [Memu] button one can type bitwarden and launch bitwarden from the menu structure. The AppImageLauncher tool will also take care of regularly updating the Bitwarden tool.</p> <p>Tip</p> <p>In case of ... do export on regularly base the vault, using the PC version, of all passwords as csv or json file and store that file somewhere safe (in another personal vault).</p>"},{"location":"Rocinante-Manjaro/#dropbox","title":"Dropbox","text":"<p>Keep everything that\u2019s important to you and your family shareable and safe in one place. Back up files in the cloud, share photos and videos, and more.</p> <p>Use PAMAC to install Dropbox</p> <p>Note</p> <p>One needs to have a DropBox account in order to be able to use this tool. If no dropBox account is available this tool is of no use.</p>"},{"location":"Rocinante-Manjaro/#pyenv","title":"Pyenv","text":"<p>Managing Multiple Python Versions With pyenv.</p> <p>Pyenv can be installed from the PAMAC tool but then everything is installed following the PAMAC installation scripts and without user control.</p> <p>To install and manage Pyenv and Python read and follow the Install_Manage_Pyenv document. With the installation of pyenv, also install the required/wanted Python version(s) and packages.</p>"},{"location":"Rocinante-Manjaro/#java","title":"Java","text":"<p>Many installed applications use JAVA. The latest JAVA version is installed when Manjaro was installed but it was a version from the AUR repositories and installing some applications encountered issues and therefore did not install. To get the things working as they should do:</p> <ul> <li> <p>Start  Add/Remove Software (PAMAC) and type in the search bar openjdk.</p> </li> <li> <p>A list of OpenJDK tools is presented, scroll down until an installed version shows up (red square with aste bin).</p> </li> <li> <p>Remove the installed openjdk applications </p> <ul> <li> <p>After ticking the, in this case three, red squares with waste bin they will turn in red squares with V.</p> </li> <li> <p>Click in the right bottom corner [Apply]</p> </li> <li> <p>A warning will pop-up telling something about dependencies, in this case about applications maven, beanshell and Freeplane. When clicking [OK] nothing is going to be installed because of the dependencies conflicts.</p> <p>Note</p> <p>Possibly in this stage of the installation there will be no warnings about dependencies because it is the start of the Linux configuration and tuning. If there is a warning pop-in up do as above written, remove the applications and then continue. </p> </li> <li> <p>Remove first the listed applications.</p> </li> <li> <p>Remove now the openjdk tools</p> </li> </ul> </li> <li> <p>Check if things are really removed.</p> <ul> <li>Start a command terminal </li> <li>type <code>java --version</code> and after this <code>which java</code>     Both command should return a negative answer/</li> </ul> </li> <li> <p>Go back to   Add/Remove Software (PAMAC) and type in teh search bar openjdk</p> </li> <li> <p>A list of OpenJDK tools is presented. The top of that list are OpenJDK tools from the Official Repositories. Pick here the OpenJDK tools with the highest number (latest version).</p> <ul> <li>OpenJDK Java 21 Shell (jdk21-openjdk)</li> <li>OpenJDK Java 21 Console (jdk21-openjdk)</li> </ul> <p>and install them.</p> </li> <li> <p>It is maybe not a bad idea to also install an earlier JAVA version in case of ... (you never know).</p> <ul> <li>Pick and select and earlier OpenJDK version supported in the Official Repositories</li> <li>OpenJDK Java 11 Shell (jdk11-openjdk)</li> <li>OpenJDK Java 11 Console (jdk11-openjdk)</li> </ul> <p>and install them.</p> </li> <li> <p>Check now what JAVA version is used as default</p> <ul> <li> <p>In the command terminal type <code>archlinux-java status</code></p> </li> <li> <p>The answer in teh terminal should be</p> <pre><code>Available Java environments\n    java-11-openjdk\n    java-21-openjdk (default)\n</code></pre> </li> <li> <p>When the latest java version installed in not the default, type following command in the command terminal <code>sudo archlinux-java set java-21-openjdk</code> and run  <code>archlinux-java status</code>again.</p> </li> </ul> </li> <li> <p>Install the removed tools using PAMAC</p> <ul> <li>install maven</li> <li>install beanshell</li> <li>install Freeplane </li> </ul> </li> </ul>"},{"location":"Rocinante-Manjaro/#administration","title":"Administration","text":""},{"location":"Rocinante-Manjaro/#bleachbit","title":"BleachBit","text":"<p>Clean Your System and Free Disk Space. Better than free, BleachBit is open source.</p> <p>Use PAMAC to install BleachBit (bleachbit)**</p> <p>The Bleachbit installed this way is a \"user\" version. A admin or root user version, bleachbit-admin, is also available for installation via PAMAC</p> <p>Note</p> <p>Do not run sudo or root functions, as cleaning apt, in the user or non-sudo version of the tool. There is a dedicated sudo version of the tool and both are installed at the same time..</p>"},{"location":"Rocinante-Manjaro/#gparted","title":"GParted","text":"<p>GNOME partition editor (Hard- Disk management tool). This tool can help managing portable disks and USB drives.</p> <p>Use PAMAC to install GParted Partition Editor (gparted)</p>"},{"location":"Rocinante-Manjaro/#dconf-editor","title":"dconf Editor","text":"<p>dconf  is a low-level configuration system, the configuration system is based  on keys, which stores the settings for most applications. The  configuration keys are in the unstructured database (keys are logically  interconnected grouped into categories), the key database is stored in a  binary file located:</p> <p>Use PAMAC to install the DconfEditor (dconf-editor)</p>"},{"location":"Rocinante-Manjaro/#fonts","title":"Fonts","text":"<p>Use PAMAC to install the Font Manager 9font-manager) As extra the Font Viewer (font-manager tool is automatically installed </p> <p>To install new free fonts go to: https://fonts.google.com Select wanted font families and the download them all at once. Download is a .zip file.</p> <p>Uncompress the file into: <code>/home/&lt;user&gt;/.local/share/fonts</code></p> <p>Start font manager to see all new installed fonts.</p> <p>Tip</p> <p>Good fonts to use for web ralated items are NOTO fonts as they are used al over the WWW</p>"},{"location":"Rocinante-Manjaro/#sticky-notes","title":"Sticky Notes","text":"<p>This is a goodie vor daily use. The electronic version of yellow notes on the PC screen. Very handy for TODO list, quick notes, ideas, ...</p> <p>Use PAMAC to install the sticky</p> <p>It install itself in the right panel, but needs configuration to be useful.</p> <ul> <li>Right click the icon in the right panel and select [Manage Notes]     This starts a screen pane showing all notes. In the beginning this pane will be empty.</li> <li>Click the three horizontal lines in the left top of the pane.</li> <li>Select [Preferences]<ul> <li>[General : turn the switch for Tray icon on]</li> <li>[Notes: Set the initial size, colour, position and font for future notes]</li> <li>[Backups : Leave it off]</li> <li>[Automatic start : turn the automatic start on]</li> </ul> </li> </ul> <p>Note</p> <p>The file keeping the notes text can be found in <code>/home/&lt;user&gt;/.config/sticky/notes.json</code></p>"},{"location":"Rocinante-Manjaro/#sound-video","title":"Sound &amp; Video","text":""},{"location":"Rocinante-Manjaro/#obs-studio","title":"OBS Studio","text":"<p>OBS Studio, also known as Open Broadcaster Software Studio, serves content creators, streamers, and video professionals as top-tier open-source software.</p> <p>Use PAMAC to install OBS Studio (obs-studio)</p>"},{"location":"Rocinante-Manjaro/#vlc-media-player","title":"VLC Media Player","text":"<p>VLC is a free and open-source multimedia player. It supports a wide range of multimedia formats such as MKV, MP4, MPEG, MPEG-2, MPEG-4, DivX, MOV, WMV, QuickTime, WebM, FLAC, MP3, Ogg/Vorbis files, BluRays, DVDs, VCDs, podcasts, and multimedia streams from various network sources.</p> <p>Use PAMAC to install VLC (vlc)</p>"},{"location":"Rocinante-Manjaro/#pulse-audio-volume-control-pavu","title":"Pulse Audio Volume Control (PAVU)","text":"<p>PulseAudio Volume Control (pavucontrol) is a simple GTK+ based volume control tool (mixer) for the PulseAudio sound server. In contrast to classic mixer tools this one allows you to control both the volume of hardware devices and of each playback stream separately. It also allows you to redirect a playback stream to another output device without interrupting playback.</p> <p>Use PAMAC to install Volume Control (pavucontrol)</p>"},{"location":"Rocinante-Manjaro/#programming","title":"Programming","text":""},{"location":"Rocinante-Manjaro/#git-git-cola","title":"GIT - Git-Cola","text":"<p>Git Cola is a sleek and powerful graphical user interface for Git and It is mainly for use with GitHub. Git Cola is free software and written in Python.</p> <p>Use PAMAC to install git Use PAMAC to install git-cola  (this comes out of the AUR repository)</p>"},{"location":"Rocinante-Manjaro/#visual-studio-code","title":"Visual Studio Code","text":"<p>Visual Studio Code, often abbreviated as VS Code, is a Microsoft re-owned code editor (Git atom) appreciated for its lightweight nature and extensible possibilities for customisation. </p> <p>Use PAMAC to install Code - OSS (code)</p> <p>As written, Visual Studio Code is a distribution of the Code - OSS repository with Microsoft specific customisation released under a traditional Microsoft product license. But the one in the Manjaro repositories is Code - OSS an open source project without any proprietary code.</p>"},{"location":"Rocinante-Manjaro/#meld","title":"Meld","text":"<p>Files and directories comparison is the task that is often required, Meld takes this job seriously and is considered one of the best tools to perform comparisons between files, directories, and version control projects. It is widely used by Linux desktop users and app developers to cater their daily comparison needs. Here are some of the noteworthy features of this application.</p> <p>Use PAMAC to install Meld (meld)</p> <p>Meld is installed because a add-on package of Code-OSS is using it.</p>"},{"location":"Rocinante-Manjaro/#qt","title":"QT","text":"<p>Unlike Linux Mint and Ubuntu, QT can directly be installed using the PAMAC install tool. With Linux Mint a QT account was required and a download of the QT tools. The QT tools web installer needed to be run to install required QT tools. With Manjaro, start PAMAC and in the search bar enter QT. Five QT packages are listed, select the package required.</p> <p>Use PAMAC to install Qt Assistant (qt5-tools) Use PAMAC to install Qt Creator (qtcreator) Use PAMAC to install Qt Designer (qt5-tools Use PAMAC to install Qt Linguist (qt5-tools) Use PAMAC to install Qt QDBusViewer (qt5-tools)</p>"},{"location":"Rocinante-Manjaro/#tcl-tk","title":"Tcl-Tk","text":"<p>Tcl (Tool Command Language) is a powerful, open source, business-friendly and easy to learn programming language. Tcl is a mature yet evolving language that is truly cross platform, easily deployed and highly extensible. It is suitable for a very wide range of uses, including web and desktop applications, networking, administration, testing and many more.</p> <p>Tk is a graphical user interface toolkit that act as the standard GUI for not only Tcl but for many other languages It can can produce rich, native applications that run unchanged across Windows, Mac OS X, Linux and more.</p> <p>Use PAMAC to install tcl (8.6.14-4) Use PAMAC to install tk (8.6.14-4)</p> <p>Browse the tcl and tk list presented by PAMAC to add options to the tcl and/or tk installation.</p>"},{"location":"Rocinante-Manjaro/#office","title":"Office","text":""},{"location":"Rocinante-Manjaro/#typora","title":"Typora","text":"<p>Typora provides a seamless experience as both a Markdown reader and a writer. As a writer/editor it removes the preview window, mode switcher, syntax symbols of markdown source code, and all other unnecessary distractions of other markdown readers &amp; writers.</p> <p>Use PAMAC to install typora from the AUR repository.</p> <p>A different way to install Typora is to copy the binary tar.gz file (X64) from here (small text button [binary file (X64)] under the screenshot of a terminal window). After saving it locally and uncompressing copy the contents of the <code>/bin</code> directory to the <code>/usr/bin</code> directory. In this case the update system of Manjaro will not auto update Pandoc.</p> <p>Important</p> <p>Typora is no longer a free tool. The cost is $15. But it\u2019s worth it. Pay the money, get a license and register it.</p>"},{"location":"Rocinante-Manjaro/#pandoc","title":"Pandoc","text":"<p>Pandoc is a universal document text converter. Typora is using it to support file import/export features for several file types (pdf, html, docx, ...). If ever using it, the GitHub Atom text edit is also using it.</p> <p>Use PAMAC to install pandoc-cli from the official repositories</p> <p>Another way to get Pandoc is to download it (tar.gz file) from the Pandoc site and after uncompressing it, copy the contents, as root/sudo, of the <code>/bin</code> and <code>/share</code> directories to <code>/usr/bin</code> and <code>/usr/share</code>. As for Typora, in this case the update system of Manjaro will not auto update Pandoc.</p>"},{"location":"Rocinante-Manjaro/#latex-texlive","title":"Latex (TexLive)","text":"<p>TeX Live is an easy way to get up and running with the TeX document production system.</p> <p>Use PAMAC to install texlive-\\ from the official repositories <p>The \\ is what is displayed in the list after typing texlive in the PAMAC search bar. A whole list of texlive addons are displayed together with the necessities.  These texlive tools need to be installed as base using PAMAC: <ul> <li>texlive-basic</li> <li>texlive-bin</li> <li>texlive-latex</li> <li>texlive-latexextra</li> <li>texlive-latexrecommended</li> <li>texlive-pictures</li> <li>texlive-plaingeneric</li> <li>texlive-pstricks</li> </ul> <p>There is always a different way to do things. So is here:</p> <ul> <li> <p>Start a web browser and go to: https://tug.org/texlive/acquire-netinstall.html</p> </li> <li> <p>Click the install-tl-unx.tar.gz or the install-tl.zip file and save it (/Downloads)</p> </li> <li> <p>Uncompress the tar.gz or zip file. The result will be a directory called install-tl-\\&lt;invers-date&gt;</p> </li> <li> <p>Launch a terminal and change into the directory created by the unzip operation.</p> </li> <li> <p>Run the install script <code>./install-tl -gui</code></p> <ul> <li>The most important in the install script is the install location .</li> <li>Provide the install directory <code>/opt/TexLive/&lt;year&gt;</code></li> </ul> </li> <li> <p>Installing TexLive will take a while, so be patient (go drink a cup of coffee, thee or something cold.</p> </li> <li> <p>........ (waiting)</p> </li> <li> <p>When installed, or even during install, add the TexLive installation to the path.</p> <ul> <li> <p>In the user home directory, open with a edit, xed, the .bash_aliases file.</p> </li> <li> <p>Add following lines to the file and save it afterwards.</p> </li> </ul> <pre><code>export TL_ROOT=/opt/TexLive/2024\nexport PATH=$PATH:TL_ROOT/bin/x86_64-linux\n</code></pre> </li> </ul> <p>Note</p> <p>Again, this way, Manjaro PAMAC will not update the LaTeX (texlive) installation.</p>"},{"location":"Rocinante-Manjaro/#latexdraw","title":"LatexDraw","text":"<p>LaTeXDraw is a graphical drawing editor for LaTeX. LaTeXDraw can be used to generate PSTricks code and/or directly create PDF or PS pictures.</p> <p>Latexdraw is available in the AUR repositories but when installing it from there things went always wrong because of missing JAVA things or versioning issues with JAVA. </p> <p>Thus!  Do not use PAMAC to install LaTexDraw</p> <p>To get Latexdraw running it is a bit more work than hitting some buttons in PAMAC.</p> <ul> <li>Go to the latexdraw web page.</li> <li>Click on the link right of Latest version: (At time of writing, it was: 4.0.3)</li> <li>Click the latexdraw-4.0.3-linux-binaries.txz entry and download/save the file.</li> <li>Uncompress the downloaded file and copy as root/sudo the contents (a latexdraw-\\ directory) to the <code>/opt</code> directory.  <li>It is now possible to start Latexdraw as <code>/opt/latexdraw-4.0.3/bin/latexdraw-run</code> but it would be easier to have an entry for Latexdraw in the main [Manjaro Menu] in the left bottom of the screen.</li> <li>Let us create a Latexdraw entry in the [Office] tab of the main menu.<ul> <li>Right click the [Manjaro Menu] button in the bottom left corner of the screen</li> <li>Select in the pop up menu [Configure]</li> <li>A Menu pane pops, select here the [Menu] tab in the top of the pane.</li> <li>Hit, in the middle of the pane, the [Open the menu editor] button</li> <li>A new [Main Menu] pane pops up<ul> <li>Select in the left column [Office] </li> <li>Click now [New Item] in the right button column</li> <li>A small [Launcher Properties] window pops up.<ul> <li>[Name:  Latexdraw]</li> <li>[Command: /opt/latexdraw-4.0.3/bin/latexdraw-run]</li> <li>[Comment: A vector drawing editor for LaTeX.]</li> <li>Click the icon in the top left corner <ul> <li>Click [Applications] in the left column</li> <li>Search and select the icon [latexila]     Or select another, or find the Latexdraw icon or ...</li> <li>Click [Select]</li> </ul> </li> <li>Click [OK]</li> </ul> </li> <li>A new selector [Latexdraw] is now add in the right column for [Office]</li> </ul> </li> <li>Hit [Close]</li> </ul> </li> <li>Let's see if it works<ul> <li>Click the [Manjaro Menu] in the left bottom screen cormer and start typing Latexdraw</li> <li>A selection of application will pop up while typing with in top Latexdraw</li> <li>Select it and see how Latexdraw starts.</li> </ul> </li>"},{"location":"Rocinante-Manjaro/#texstudio","title":"TeXstudio","text":"<p>Writing texts using the LaTeX typesetting system can be done using any text editor. When doing so, the begin will be hard and frustrating. It's also possible and easier to use advanced editors like Code-OSS with a LaTeX writing aid add-on but when having a LaTeX dedicated editor is better. Uing that editor the LaTeX typesetting system can be learned and when fully familiar other editors can be used.</p> <p>TeXstudio is an integrated writing environment for creating LaTeX documents. The goal is to make writing LaTeX as easy and comfortable as possible. Therefore TeXstudio has numerous features like syntax-highlighting, integrated viewer, reference checking, and various assistants. </p> <p>Use PAMAC to install TeXstudio (texstudio) from the official repositories</p>"},{"location":"Rocinante-Manjaro/#sozi","title":"Sozi","text":"<p>A zooming presentation editor and player based on  SVG and JavaScript. Sozi is a piece of software for creating animated presentations. It is generally used to make visual aids for lectures or meetings. With Sozi, a presentation is not organised as a sequence of slides, but rather as a succession of viewpoints on a map that you explore.</p> <ul> <li> <p>Use Sozi as appimage, and download the appimage file from:          https://github.com/sozi-projects/Sozi/releases/tag/v23.07. </p> </li> <li> <p>Download the <code>Sozi-\\&lt;version&gt;.Appimage</code> file:         At time of writing it was: <code>Sozi-23.7.25-1690311612.AppImage</code></p> </li> <li> <p>Save the file on disk and double click or right click and select [Open with AppImageLauncher]</p> </li> <li>Click in the AppImageLauncher pop-up [Integrate and run] button     Sozi will start but is from now on also availabkle from the [Manjaro Menu] </li> </ul> <p>Note</p> <p>Sozi is also available from the AUR repositories. Use PAMAC to install Sozi-bin </p> <p>The Sozi web page can be found here: http://sozi.guide/en/about-sozi.html</p>"},{"location":"Rocinante-Manjaro/#freeplane","title":"Freeplane","text":"<p>Mind mapping and project management tool</p> <p>Use PAMAC to install Freeplane (freeplane) from the official repositories.</p> <p>Install it when required. Unless you need such tool of course</p>"},{"location":"Rocinante-Manjaro/#pdf-reader-writer-organiser","title":"PDF Reader / Writer / Organiser","text":"<p>The default installed PDF reader is xreader in the main menu named as \"Document Viewer\". It's good, fast but allows only read operations. WHen its required to write in a PDF or comment PDFs then another tool is required. For Linux Mint and Ubuntu Foxit Reader was installed for that purpose.</p> <p>For Manjaro two tools are installed, it's on the user to decide what tool to keep. Both tools are capable to manipulate PDF files and both tools have their pro- and cons.</p> <p>Use PAMAC to install Okular (okular) from the official repositories.</p> <p>Use PAMAC to install xournal from the AUR repositories.</p> <p>Okular is the document viewer and annotator tool from the KDE environment but it does a good job in other display environments too.</p> <p>xournal is basically a note taking and sketching tool but it does a very good job in managing PDF files. Load a PDF and when required to save the PDF, export the document as PDF but use a different name.</p> <p>To organise PDF files in Linux Mint and Ubuntu, PDFsam was installed. For Manjaro PDFsam comes out of the AUR repositories and after install it acted weird. Therefor a different, but very capable, tool has been installed</p> <p>Use PAMAC to install xdg-desktop-portal-gtk from the official repositories.</p> <p>Use PAMAC to install PDF Mix Tool (pdfmixtool) from the official repositories.</p> <p>Both tools need to be installed. The PDF Mix Tool uses the xdg-desktop-portal-gtk package.</p>"},{"location":"Rocinante-Manjaro/#internet","title":"Internet","text":""},{"location":"Rocinante-Manjaro/#eid-electronic-id-belgium","title":"eid (Electronic ID Belgium)","text":"<p>The Belgian eID is an essential element in the chain of trust that provides a framework for safe digital exchanges. By its virtue of certifying the identity of the person doing the exchange and protecting access to citizens' data, the Belgian eID card actively participates in the success of e-Government policy.</p> <p>Use PAMAC to install eid-mw from the AUR repositories.</p> <p>Connect a card reader (USB) to the PC and launch the eid-viewer. It reports that there is no card-reader recognised. Thus something is wrong and needs to be solved.</p> <ul> <li>Check if card-reader is recognized by the system,</li> <li>Open a terminal and type: lsusb</li> <li>If the card reader is recognised as USB device, a line in the output of the command looks as:     Bus 001 Device 007: ID 072f:9000 Advanced Card Systems, Ltd ACR38 AC1038-based Smart Card Reader.</li> </ul> <p>Install, using PAMAC, following packages</p> <ul> <li>pcsc-perl</li> <li>Gscriptor (pcsc-tools)</li> <li>pcsclite</li> <li>acsccid</li> <li>ccid</li> <li>opensc</li> </ul> <p>It's best to reboot the PC. After boot, the LED on the card reader blinks steady and it should be possible to read a eid card now.</p> <p>Finally go to this site: https://iamapps.belgium.be/tma/?lang=en</p> <ul> <li>Hit [Start test]</li> <li>Hit [Log in]</li> <li>Click [OK] for the user certificate</li> <li>Provide the passcode</li> <li>Wait for \"Log in Successful\"</li> <li>Click the [Sign Out] button and close the web browser.</li> </ul>"},{"location":"Rocinante-Manjaro/#thunderbird","title":"Thunderbird","text":"<p>Maybe/perhaps the best mail client available. It is default installed when Ubuntu or Linux Mint are installed. Normally one will use the installed Thunderbird software. In the PC setup discussed here mail needs to be stored on an external network connected drive (NAS). For that it was better to completely remove Thunderbird and install it again in the /opt directory. Putting mail storage on an external drive, as a NAS drive, has the advantage that all mail is secure and backed-up.  do:</p> <ul> <li> <p>Browse to: https://www.thunderbird.net</p> </li> <li> <p>Hit the [download] button and save the downloaded \u201cthunderbird-\\&lt;version&gt;.tar.bz2\u201d somewhere.</p> </li> <li> <p>In PAMAC type thunderbird in the search bar and when the tool is displayed click the red square with waste bin (Thunderbird is a default installed tool) . Click the [Apply] button in the bottom right and remove the default installed Thunderbird.</p> </li> <li> <p>Un-compress the .tar.bz2 file, as sudo, in the <code>/opt</code> directory. After the operation there will be a <code>/opt/thunderbird</code> directory available.</p> </li> <li> <p>Add, with a text editor, \u201c/opt/thunderbird\u201d  to the path in the .bash-aliases as:</p> <pre><code># Thunderbird mail client settings\nexport PATH=$PATH:/opt/thunderbird.\n</code></pre> </li> <li> <p>Of course there is now no clickable entry for Thunderbird in the [Manjaro menu]     Create one by:</p> <ul> <li>Right click the menu in the left corner and select \u2018configure\u2019.</li> <li>In the pop up menu select the [Menu] tab and the hit the [Open the menu editor] button.</li> <li>Select [Internet] in the left menu and then hit [New Item] in the right menu.<ul> <li>Name: Thunderbird Mail</li> <li>Command: [Browse] go to /opt/thunderbird and pick thunderbird. Add a space and \u201c%U\u201d.</li> <li>Comment: Send and receive mail with Thunderbird</li> <li>Click the icon and in the popup go to /opt/thunderbird/chrome/icons/default.     Pick an icon from the listed, like default24.png</li> <li>[OK]</li> </ul> </li> </ul> </li> <li> <p>Assume Thunderbird mail need to be stored on a NAS drive or other external drive .      Thunderbird cannot do it by default , but:</p> <p>Important</p> <p>**Do this when Thunderbird is closed / not running! **</p> <ul> <li> <p>Start Thunderbird, it is assumed that Thunderbird is started for the first time, and close it again.</p> </li> <li> <p>Thunderbird creates a .thunderbird directory in the users home directory.     This directory is only available if Thunderbird has been started and closed once.</p> </li> <li> <p>Copy that entire directory to a default mounted directory on the NAS, rename it to thunderbird (remove the \u201d.\u201d).</p> </li> <li> <p>As precaution rename the .thunderbird directory in the users home to something like thunderbird_Org.</p> </li> <li> <p>Open a command terminal in the users home directory and create a symbolic link to the  thunderbird directory on the NAS.</p> <pre><code>ln -s /mnt/MainNasDir/thunderbird .thunderbird\n</code></pre> <p>A directory link .thunderbird  is created in the user home directory. The link shows all directories and files copied earlier to the Thunderbird NAS directory.</p> </li> <li> <p>Now Thunderbird can be started and used. all mail will be stored on the NAS drive.</p> </li> </ul> </li> </ul>"},{"location":"Rocinante-Manjaro/#vivaldi","title":"Vivaldi","text":"<p>Nothing needs to be done as Vivaldi is the default Manjaro browser. It might be smart to install a second web browser as Firefox. Install it from the PAMAC tool or download a appimage and run it that way.</p> <p>Use PAMAC to install Firefox Web Browser (firefox) from the official repositories.</p> <p>OR</p> <p>Download the Firefox appimage file from: https://github.com/srevinsaju/Firefox-Appimage/releases Download the latest <code>firefox &lt;version&gt;</code>file, save it. Double click or right click and tick the AppImageLauncher pop-up [Integrate and run] button.</p> <p>At time of writing the Firefox version was: <code>firefox v128.0.r20240725162350</code></p>"},{"location":"Rocinante-Manjaro/#signal","title":"Signal","text":"<p>Say \"hello\" to a different messaging experience. An unexpected focus on privacy, combined with all of the features you expect</p> <p>Use PAMAC to install Signal (signal-desktop) from the official repositories.</p> <p>Note</p> <p>If Signal was used and running on the old PC, copy the entire <code>/home/&lt;user&gt;/.config/Signal</code> directory from the old PC into the <code>/home/&lt;user&gt;/.config/</code>directory of the new PC. The new PC will then get all settings, messages, ... from the on the old PC running Signal in a  <code>/home/&lt;user&gt;/.config/Signal</code> directory. When launching Signal on the new PC it will start as if it was always used on the new PC.</p>"},{"location":"Rocinante-Manjaro/#deluge","title":"Deluge","text":"<p>Deluge is one of the most used torrent downloaders. It\u2019s stable and easier to use as any other torrent client but the team makes it more stable by providing fix updates.</p> <p>Use PAMAC to install Deluge (deluge-gtk) from the official repositories.</p>"},{"location":"Rocinante-Manjaro/#graphics_1","title":"Graphics","text":""},{"location":"Rocinante-Manjaro/#inkscape","title":"Inkscape","text":"<p>Inkscape is professional quality vector graphics software which runs on Windows, Mac OS X and GNU/Linux. It is used by design professionals and hobbyists worldwide, for creating a wide variety of graphics such as illustrations, icons, logos, diagrams, maps and web graphics. Inkscape uses the W3C open standard SVG (Scalable Vector Graphics) as its native format, and is free and open-source software.</p> <p>Use PAMAC to install Inkscape (inkscape) from the official repositories.</p> <p>OR The better solution: </p> <ul> <li>Download the appimage file from the Inkscape download page. hit the [GNU/Linux] button and the the [An executable file for Linux] button.</li> <li>Save the downloaded file and double click or right click the file and in the AppImageLauncher pop-up hit the [Integrate and run] button.</li> </ul> <p>Tutorials and guides:</p> <ul> <li>http://goinkscape.com/</li> <li>https://daviesmediadesign.com/inkscape-tutorials/</li> </ul>"},{"location":"Rocinante-Manjaro/#freecad","title":"FreeCad","text":"<p>Freedom to build what you want. FreeCAD is an open-source parametric 3D modeler made primarily to           design real-life objects of any size. Parametric modeling allows you to easily modify your design by going back into your model history and changing its parameters. Create 3D from 2D &amp; back. FreeCAD allows you to sketch geometry constrained 2D shapes and use them as a base to build other objects. It contains many components to adjust dimensions or extract design details from 3D models to create high quality production ready drawings.</p> <p>It can be installed using PAMAC or as appimage, what seems the favourite choice of the developers.</p> <ul> <li>Download the appimage file from the FreeCad download page. hit the [x86_64 Appimage] button.</li> <li>Save the downloaded file and double click or right click the file and in the AppImageLauncher pop-up hit the [Integrate and run] button.</li> </ul> <p>Note</p> <ul> <li>Find all information about FreeCad here.</li> <li>A basics tutorial can be found here.</li> <li>Video tutorials on YouTube can be found here, (this is the first tutorial of a series).</li> </ul>"},{"location":"Rocinante-Manjaro/#odafileconverter","title":"ODAfileConverter","text":"<p>DWG and DXF converter for converting between different versions of .dwg and .dxf Useful when used with FreeCad</p> <p>Use PAMAC to install oda-file-converter from the AUR repositories.</p>"},{"location":"Rocinante-Manjaro/#darktable","title":"Darktable","text":"<p>Darktable is an open source photography workflow application and raw developer. A virtual lighttable and darkroom for photographers. It manages your digital negatives in a database, lets you view them through a zoom-able lighttable and enables you to develop raw images and enhance them.</p> <p>Use PAMAC to install darktable (darktable) from the official repositories.</p> <p>Find darktable stuff here</p>"},{"location":"Rocinante-Manjaro/#electronics","title":"Electronics","text":""},{"location":"Rocinante-Manjaro/#virtualbox","title":"VirtualBox","text":"<p>VirtualBox is a general-purpose full virtualizer for x86 hardware, targeted at server, desktop and embedded use. </p> <p>Use PAMAC to install Oracle VM VirtualBox (virtualbox) from the official repositories. Use PAMAC to install virtualbox-guest-utils from the official repositories.</p> <p>Note</p> <p>For several hardware projects, experiments are done with Linux. Download the 21.3 Cinnamon edition form Linux-Mint . Save the downloaded ISO image somewhere on disk and setup and install a virtual machine. Read the details in the Virtualbox document.</p>"},{"location":"Rocinante-Manjaro/#putty","title":"PuTTY","text":"<p>PuTTY is an SSH and telnet client, developed originally by Simon Tatham for the Windows platform. PuTTY is open source software that is available with source code and is developed and supported by a group of volunteers.</p> <p>Use PAMAC to install PuTTY (putty) from the official repositories.</p>"},{"location":"Rocinante-Manjaro/#cutecom","title":"CuteCom","text":"<p>CuteCom is a graphical serial terminal. Currently it runs on Linux, FreeBSD and Mac OS X. It is aimed mainly at hardware developers or other people who need a terminal to talk to their devices. It is free software and distributed under the GNU General Public License Version 2.</p> <p>Use PAMAC to install cutecom from the AUR repositories.</p>"},{"location":"Rocinante-Manjaro/#gtkwave","title":"GTKwave","text":"<p>GTKWave is a fully featured GTK+ based wave form viewer for Unix, Win32, and Mac OSX which reads LXT, LXT2, VZT, FST, and GHW files as well as standard VCD/EVCD files and allows their viewing.</p> <p>Documentation can be found here as PDF file.</p> <p>Use PAMAC to install GTKWave (gtkwave) from the official repositories.</p>"},{"location":"Rocinante-Manjaro/#logisim-evolution","title":"Logisim-Evolution","text":"<p>Logisim-evolution is educational software for designing and simulating digital logic circuits. Logisim-evolution is free, open-source, and cross-platform. Logisim-evolution is a Java application it can thus run on any operating system supporting the Java runtime environment (It requires Java 16 (or newer)).</p> <p>Beside an educational tool it is a nice tool to get things quickly simulated.</p> <p>The GitHub page and project highlights:</p> <ul> <li>easy to use circuit designer,</li> <li>logic circuit simulations,</li> <li>chronogram (to see the evolution of signals in your circuit),</li> <li>electronic board integration (schematics can be simulated on real hardware),</li> <li>VHDL components (components behavior can be specified in VHDL!),</li> <li>TCL/TK console (interfaces between the circuit and the user),</li> <li>huge library of components (LEDs, TTLs, switches, SoCs),</li> <li>supports multiple languages,</li> <li>and more!</li> </ul> <p>Use PAMAC to install logisim-evolution-bin from the AUR repositories.</p>"},{"location":"Rocinante-Manjaro/#kicad","title":"KiCad","text":"<p>KiCad EDA is A Cross Platform and Open Source Electronics Design Automation Suite</p> <p>Use PAMAC to install KiCad (kicad) from the official repositories.</p>"},{"location":"Rocinante-Manjaro/#libaries","title":"Libaries","text":"<p>Use PAMAC to install kicad-library from the official repositories. Use PAMAC to install kicad-library-3d from the official repositories.</p> <p>More information and tips about and working with KiCad can be found in this document</p>"},{"location":"Rocinante-Manjaro/#add-ons","title":"Add-ons","text":"<p>When using PAMAC to install KiCad, the list of presented KiCad software is long and lists lots of good add-ons and side programs to help with design, debug, conversion, ... </p>"},{"location":"Rocinante-Manjaro/#xilinx-tools","title":"Xilinx Tools","text":"<p>This is the big name in Field Programmable Gate Array (FPGA). Install the tools as described in this document</p>"},{"location":"Rocinante-Manjaro/#efinix-tools","title":"Efinix tools","text":"<p>A very promising low cost FPGA vendor </p> <ul> <li>Register onto the Efinix website.</li> <li> <p>Log in onto the support page.</p> </li> <li> <p>Download the software, updates and patches, at the moment of writing the software is:</p> </li> <li>efinity-2024.1.163-ubuntu-x64.tar.bz2</li> <li>efinity-2024.1.163.2.15-ubuntu-x64-patch.zip</li> <li>efinity-riscv-ide-2024.1.0.1-linux-x64.run</li> <li>Install the software as described in this document</li> </ul>"},{"location":"Rocinante-PC/","title":"Rocinante PC","text":""},{"location":"Rocinante-PC/#the-pc-hardware","title":"The PC hardware","text":"<ul> <li>Motherboard: ROG-CROSSHAIR-X670E-HERO-ASUS</li> <li>Processor: AMD Ryzen 9 7950X3D</li> <li>Graphics Card: ASUS TUF Gaming Radeon RX 7900 XTX OC edition</li> <li>Memory: G.Skill Trident Z5 Neo RGB F5-6000J3040G32GX2-TZ5N DDR5 - 64 GB: 2 x 32</li> <li>Disks:<ul> <li>Twice: Corsair MP700 Pro 2 TB - SSD M.2 2280 - PCI Express 5.0 x4 - NVMe</li> <li>One: 2 TB WDC: WD2002FFSX-68PF8N0</li> <li>One: 4 TB WDC: WD40EFRX-68WT0N0</li> </ul> </li> <li> <p>Extra</p> <ul> <li>Installed extra USB, USB-C and card-reader ports via a added:<ul> <li>Graugear Multi-Front Panel USB hub &amp; Card reader</li> </ul> </li> </ul> </li> <li> <p>ASUS ROG-Crosshair changed board settings:</p> <ul> <li>Disabled the on-board wireless and on-board Bluetooth.</li> <li>After assembly and at first power up of the system, upgrade the BIOS to the latest version!     This is easily done using the ASUS motherboard BIOS build in web upgrade functionality.<ul> <li>AMI BIOS upgraded to version 1905 (latest at the moment of writing)- </li> </ul> </li> </ul> </li> </ul> <p>Tip</p> <p>In the first year of using a new motherboard look regularly on the manufacturers web site for an upgraded/updated BIOS and apply it. Updating the BIOS is easy these days. </p>"},{"location":"Rocinante-PC/#disk-partitioning","title":"Disk Partitioning","text":"<p>Installation of Linux can be as simple as leaving the hard disk organisation over to the Linux installer tool. It becomes then installing Linux like installing Microsoft Windows. I've in the past had issues with hard disks and switched to force Linux into my own hard disk partitioning scheme. I make sure things get separated so that if something crashes I don't need to redo everything. Find below a partitioning table used for both Ubuntu(Mint) and Manjaro.</p> nvme0n1 p1 EFI /boot/efi 10 GB p2 ext4 /boot 30 GB p3 ext4 / 250 GB p4 ext4 /tmp **** 200 GB p5 ext4 /var 200 BG p6 ext4 SWAP 200 GB p7 ext4 /home 1.1 TB nvme1n1 p1 ext4 /opt 1 TB p2 ext4 /mnt/VitualMachines 1 TB sda 1 ext4 /mnt/TimeMachine 4 TB sdb 1 ext4 /mnt/Dropbox 2 TB <p>This partitioning is entered while installing the OS. The second or third window in the installation process asks how and where the new Linux version must be installed. Chose for the \u201cdo something else\u201d option and enter the above partition table in the tool, when you use the same set of disks of course.</p> <p>Note</p> <p>In the partition table, a part of the partitions are named nvme... because disks are Flash-PCIe drives.</p> <p>Two other partitions are named following the old disk partition style, sda, sdb, ... because the two disks are old school hard disks.</p> <p>The nvme naming goes: nvmen1 and  = p <p>Note</p> <p>In all previous Linux installs \"/home\" was on a different partition that the OS itself. Now it is on the same partition as the operating system but /home is hourly backed up with Time Machine. When something goes wrong the latest \"/home\" can be retrieved from there.</p> <p>****  Something to know is that finally, for all Linux installations and distributions, what's entered as partition table is saved in a **fstab* file. That file is stored in the /etc directory. But the Manjaro installation made remarks/warnings when booting and in log files about the /tmp partition.</p> <pre><code>system /usr/lib/systemd/system-generators/systemd-fstab-generator failed with exit status 1. system Failed to create unit file '/run/systemd/generator/tmp.mount', as it already exists. Duplicate entry in '/etc/fstab'?\n</code></pre> <p>See the Important note below and to solve this, go to the fstab_issue text.</p> <p>Important</p> <p>This can only be checked, but it should be one of the first things to check, and solved after Ubuntu(Mint) or Manjaro is installed.</p>"},{"location":"Rocinante-Ubuntu/","title":"RocinanteUbuntu","text":""},{"location":"Rocinante-Ubuntu/#introduction","title":"Introduction","text":"<p>Possible installing, configuration and tuning guide for Ubuntu on a brand new PC.</p>"},{"location":"Rocinante-Ubuntu/#install-ubuntu","title":"Install Ubuntu","text":"<ul> <li> <p>Download the Ubuntu ISO, at time of writing; 22.04.04-LTS and 24.04-LTS, and write it to a USB thumb-drive</p> </li> <li> <p>Boot form the thumb-drive and select Try or install Ubuntu from the GRUB menu.</p> <ul> <li>Select the language for the Ubuntu installation</li> <li>If required, set the accessibility options (View, hear, type, ....)</li> <li>Select the keyboard and it's variant</li> <li>Tell how the PC is connected to the internet</li> </ul> </li> <li> <p>Tell to \"Install Ubuntu\" and chose for the:</p> <ul> <li>\"Interactive installation\" when you want to make choices during install.</li> <li>If a \"kind of Windows\" install is wanted, select \"Automated installation\".</li> </ul> </li> <li> <p>Chose to install the \"default Selection\" or \"Extended Selection\" of tools to install.</p> </li> <li> <p>Select to install third party software for graphics and WIFI hardware.</p> <p>[!NOTE]</p> <p>In this case this options doesn't need to be selected because the newest PC has no devices or boards requiring proprietary drivers or software. </p> </li> <li> <p>Select to download and install media formats (codecs).</p> </li> <li> <p>Select:</p> <ul> <li>When accepting the fact that Ubuntu is going to partition the hard disk, select      \"Erase disk and install Ubuntu\"</li> <li>When wanting to force an own partition scheme, chose: \"Manual Installation\"     In the next install screen enter a partition table as the one given in the main \"Rocinante\" document of this series.</li> </ul> </li> <li> <p>Follow the install pages and provide the correct answers.</p> </li> <li> <p>Indicate during the installation to also do software updates but don\u2019t ask to load proprietary software as none is required for the given hardware setup.</p> </li> <li> <p>After install Ubuntu it is the running Linux kernel 6.5</p> </li> </ul> <p>Go and have a cup of coffee, hot chocolate or cup of thee with coffee corner chat and upon return Ubuntu Linux is going to be installed. The installer is asking to remove the USB thumb drive and hit [Enter]. Do it to reboot in Ubuntu.</p>"},{"location":"Rocinante-Ubuntu/#after-the-first-reboot","title":"After the First Reboot","text":"<p>[!IMPORTANT] Installing, updating and/or upgrading software requires root access.  When the Installation, update and/or upgrade is done using GUI type of tools a popup will be presented asking for the root password. When installing, updating and/or upgrading software in a command terminal root access is obtained by the sudo keyword (sudo followed by a command). The command line interface will ask for the root password.</p>"},{"location":"Rocinante-Ubuntu/#updates","title":"Updates","text":"<ul> <li> <p>This is an important part of the whole text!     Updates and backups are life savers!</p> </li> <li> <p>Check if the installer tool implemented the latest updates/upgrades for the OS and pre-installed software tools.</p> </li> <li> <p>Hit the [show apps] button, start typing \"update ...\". While typing the list of possible installed tools will get smaller and after having typed the word \"update \" select the Software Updater</p> </li> <li>When all updates are installed the tools displays: The software on this computer is up to date</li> <li>Anyway, while here it's time to configure the Update Manager tool.</li> <li>Hit the [show apps] button, type \"update ...\". Select Software &amp; Updates<ul> <li> <p>[Ubuntu Software] tab</p> <ul> <li> <p>Leave everything, except \"source code\" selected.</p> </li> <li> <p>Click in \"Download from\", select then [Other ...] and click [ Select Best Server]     The tool will now ping all Ubuntu update servers in the world and highlight the fasted, select it. </p> </li> <li> <p>[Updates] tab</p> </li> <li> <p>Leave everything as is.    The installation is subscribed to get all Ubuntu updates and there is a daily check for updates. Updates are downloaded and installed automatically. Other updates are displayed weekly but need installation after a mouse click. </p> </li> <li> <p>[Ubuntu Pro] tab     Connect the machine to Ubuntu Pro for extra security updates.     This service is free for personal use, but you need an Ubuntu account.</p> </li> <li>[Other Software] and [Authentication] tabs     At the start there are only one or two entries here.      As one installs extra software, mainly through command line and the use of apt, repositories and identification keys will be add.</li> </ul> </li> </ul> </li> </ul> <p>[!NOTE]</p> <p>These tabs are very important because updates and upgrades of the system are coming from the given mirrors. When installing tools from the command line, most of the time one start with typing: <code>sudo apt-add-repository ...</code> , this command adds addresses and keys to the \"Other Software\" / \"Authentication\" lists from were updates are retrieved. More about this in The_Apt_Command.</p> <ul> <li>It might be that when closing the tool a window pops up telling that the information gathered is out of date. Check that all modifications work by clicking [Refresh].</li> </ul>"},{"location":"Rocinante-Ubuntu/#backups","title":"Backups","text":"<ul> <li> <p>Timeshift is the Linux equivalent of Apple's Time Machine. Thus Timeshift is the must have tool. Linux-Mint has this tool installed by default, so should other Linux distributions, but that's not the case for Ubuntu and other Linux disti.</p> </li> <li> <p>Thus install the tool:</p> <ul> <li> <p>Unlike in previous Ubuntu editions, Ubuntu's \"App Center\" is completely SNAP oriented, finding Debian (deb) based tools is ...     Timeshift is available in the Ubuntu Base Universe repository and can thus easily be installed.</p> <ul> <li> <p>Start a command terminal</p> </li> <li> <p>Enter following commands:</p> <ul> <li><code>sudo apt-update</code></li> <li><code>sudo apt install timeshift</code></li> </ul> </li> <li> <p>After installation Timeshift will be available from the [show apps] button and also from the command line but then it will work without GUI interface. </p> </li> <li> <p>Hit the [show apps] button, start typing \"timeshift\".     Double click the timeshift icon to start the GUI version of Timeshift</p> <ul> <li> <p>Click [Settings]</p> <ul> <li> <p>[Location]: indicate where Timeshift can drop it's backups of the system </p> <p>[!NOTE]</p> <p>At least 1 TB to 2 TB is required as a decent backup space. The Timeshift storage location can be set onto the NAS drive (setup is discussed later in this document) as that device has most of the time lots of space. Another option is, like in the the provided partition table shown, to install a 2 TB drive only for Timeshift backups.</p> </li> <li> <p>[Schedule]: Tell the system when to backup and how many backups to keep.     Example: hourly, 1 backup and daily 2 backups.</p> </li> <li> <p>[Filters]: Tell the system what, and what not to backup.</p> </li> <li> <p>Click [OK]</p> </li> </ul> </li> <li> <p>Click [Create] to make the first set of backups.</p> </li> </ul> </li> <li> <p>Close the Timeshift tool</p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"Rocinante-Ubuntu/#logs","title":"Logs","text":"<ul> <li>One thing to know; if warnings and/or errors are listed here, it means they are not blocking or at first harmful to the Linux and desktop environment. That does not mean that the listed items don't need to be solved.</li> <li>After a start or reboot of the PC and Linux, do start the Logs tool and solve any listed item.</li> <li> <p>Type Hit the [show apps] button and start typing \"Logs\" select the Logs tool.</p> <ul> <li>When the tool is started, under Important all warnings and errors that need attention are listed. </li> <li>One of the listed items can be the warning about the /tmp discussed in the main Rocinante document. Go to the tmp_fstab_Issue document and solve the problem.</li> </ul> </li> <li> <p>Reboot and again type \"Logs\" Hit the [show apps] button and start the logs tool.     It is possible that a warning message appears about \u201csomething ... casper\u201d.     This casper tool is not of any use when not porting Linux and can thus be disabled.     Do this as:</p> <p><code>sudo sysemctl disable casper-md5check.service</code></p> </li> <li> <p>Possible the next and only warning left will be about gkr-pam.      This message can safely be ignored.</p> </li> <li> <p>If there are other warnings or errors listed, select the text and copy it in a browser to search for possible solution on the WWW or maybe the warnings can be about the Display Manager.</p> </li> </ul>"},{"location":"Rocinante-Ubuntu/#graphics","title":"Graphics","text":"<ul> <li> <p>For the AMD GPU graphics card installation do:</p> <ul> <li> <p>Download and safe the latest AMD graphical and GPU driver software: \u201camdgpu-install_6.0.60002-1_all.deb\u201c     <code>sudo apt install ./amdgpu-install_6.0.60002-1_all.deb</code></p> </li> <li> <p>Setup the GPU software     <code>amdgpu-install --opencl=rocr --vukan=pro --usecase=workstation</code></p> <p>[!NOTE]</p> <p>Do not run this command as sudo</p> <ul> <li> <p>Add the \\&lt;user&gt; to the \u201cvideo\u201d group     <code>sudo usermod -a -G video &lt;user&gt;</code></p> </li> <li> <p>Change the configuration file:<code>/etc/udev/rules.d/70-amdgpu.rules</code></p> <p>Change: \u201cgroup == video\u201d to \u201cgroup = video\u201d</p> </li> <li> <p>Add: <code>export PATH=$PATH:/opt/amdgpu:/opt/amdgpu-pro:/opt/rocm</code> to the .bash-aliases file.</p> <p>[!NOTE]</p> <p>Do not alter the default .bashrc file but use a .bash-aliases file for all bash customisation. The .bashrc file automatically looks for an existing bash-aliases file. When there is one, it uses it when not is just continues.</p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"Rocinante-Ubuntu/#games","title":"Games","text":"<ul> <li>If you don't play simple games, remove all pre-installed games.</li> </ul>"},{"location":"Rocinante-Ubuntu/#kernel","title":"Kernel","text":"<ul> <li> <p>Ubuntu 22.04.4 comes with Linux core 6.5.</p> <p>Ubuntu 24.04 possible comes with kernel 6.8</p> </li> <li> <p>Maybe it is worth to upgrade Ubuntu 22.04 to Linux kernel 6.8 or newer. </p> </li> <li> <p>To install the Linux kernel easily:</p> <ul> <li>Start a command terminal.     Type Hit the [Linux Mint] icon in the left screen bottom and start typing \"terminal\" select the Terminal tool.</li> <li>Type following lines, press [Enter] after each line to execute the command     <code>sudo add-apt-repository ppa:cappelikan/ppa -y</code> <code>sudo apt update</code>sudo apt install mainline`</li> <li>To upgrade to a new Linux kernel use the graphical mainline tool.     Type Hit the [Linux Mint] icon in the left screen bottom and start typing \"mainline\" select the Mainline tool.</li> </ul> <p>\u200b       If possible use a \u201cgeneric\u201d core instead of a \u201dHWE\u201d core.</p> </li> </ul>"},{"location":"Rocinante-Ubuntu/#numlockx","title":"Numlockx","text":"<p>Useful to have installed is \"numlockx\". It makes the numeric keypad of a keyboard available without the need to push the [Numlock] key.</p> <p><code>sudo apt install numlockx</code></p> <p>After installation check <code>/etc/X11/Xsession.d</code> for a file called <code>55numlockx</code> If the file exist, everything will work If the file does not exist, go to the Numlockx document and create a file as is discussed in the text.</p>"},{"location":"Rocinante-Ubuntu/#remove-snap","title":"Remove SNAP","text":"<p>Ubuntu uses snap for installation of applications, but other applications are installed the normal way using apt and .deb files.</p> <p>[!NOTE] </p> <p>From Wikipedia: Snap is a software packaging and deployment system developed by Canonical for operating systems that use the Linux kernel and the systemd init system. The packages, called snaps, and the tool for using them, snapd, work across a range of Linux distributions and allow upstream software developers to distribute their applications directly to users. Snaps are self-contained applications running in a sandbox with mediated access to the host system. Snap was originally released for cloud applications but was later ported to also work for Internet of Things (IoT) devices and desktop applications.</p> <p>Personally I don't like the mix of installers and thus don\u2019t like snap, so to remove it completely do as described in the Remove_SNAP document.</p>"},{"location":"Rocinante-Ubuntu/#nas-devices","title":"NAS devices","text":"<p>When having a NAS device connected to the network, enable access to its directories</p> <ul> <li> <p>Install the NFS clients software, the NAS is normally the host, which provides NFS functionality without including any server components</p> <pre><code>sudo apt update\nsudo apt install nfs-common\nsudo apt install nfs-kernel-server\n</code></pre> </li> <li> <p>Add the user(s) to the netdev group     <code>sudo usermod -a -G groupname username</code> or for user marc and netdev: <code>sudo usermod -a -G netdev marc</code></p> </li> <li> <p>Add the different users and their directories to the fstab file. The NAS drive users and their directories are mounted, using NFS, as if they were regular drives locally to the computer, this makes it look as if the NAS drive is part of the drives in the PC</p> </li> <li> <p>Open with a text editor the /etc/fstab file     <code>sudo gedit /etc/fstab</code></p> <ul> <li>gedit can be every other text editor as: gnome-text-editor, code, xed, vi, ...</li> </ul> </li> <li> <p>Add the NAS drive and its user directories to the file and provide a mount point for ec     <pre><code>&lt;NAS IP&gt;/&lt;Volume&gt;/&lt;User&gt; /mnt/&lt;NAS Directory&gt; nfs4 &lt;nfs options&gt; 0 0\n</code></pre></p> <p>example:</p> <pre><code>NAS-IP:/volume1/Marc /mnt/Marc nfs4 x-systemd.automount,_netdev,noacl,nocto,rsize=32768,wsize=32768 0   0\n</code></pre> </li> <li> <p>Restart to let the modified fstab file be read.     It will create directories at the given mount points and with the given names.     Example: If the NAS drive/directory is in the fstab file coupled to /mnt/Marc then; after reboot there will be a /Marc directory under the /mnt system directory.</p> </li> <li> <ul> <li>It is possible, most likely, that the created files and possible directories are owned by root and that therefore the content of the directories is not accessible by the user of the machine.         To get this solved do:         - Disable the nfs NAS mount points in the fstab file (Put a # in front of each line).         - Reboot the machine.         - After boot go to the /mnt system directory (the earlier created directories are still there) and change the owner, group and access permissions of the directories, these directories are constructed by nfs due to the execution of the root owned fstab at the first boot.         - Enable the nfs NAS mount lines in the fstab file (remove the #).         - Reboot the machine.         - Now accessing the NAS directories should work.</li> </ul> </li> <li> <p>Directories and other stuff created on the NAS might be owned by a user user. Therefore it might be necessary to make the Linux user part of the group users, by:      <code>sudo usermod -a -G users marc</code> Remark: Other groups the user might be part of:</p> <ul> <li> <p>When planning to use openvpn add the user to nm-openvpn</p> </li> <li> <p>When planning to use one or more virtual machines under VirtualBox, make the user part of vboxsf and vboxusers     Since VirtualBox is not installed yet, the two groups must be created first: <code>sudo groupadd groupname</code></p> </li> <li> <p>I\u2019ve had in the past troubles with Bluetooth. Some of those were solved by making the user part of the Bluetooth group</p> </li> </ul> </li> </ul>"},{"location":"Rocinante-Ubuntu/#enhancements","title":"Enhancements","text":"<ul> <li> <p>Install Ubuntu enhancements and codex with ubuntu-restricted-extras     Ubuntu Restricted Extras is a software package that enhances the user experience on Ubuntu desktops by providing a set of important utilities and codex that are typically not included in the standard installation. This includes media codex necessary to play various audio and video files, support for playing DVDs, and Microsoft TrueType fonts. These are called \u201crestricted\u201d because they are not included with Ubuntu by default due to legal and copyright restrictions in various countries.</p> <p><code>sudo apt update`` sudo apt install ubuntu-restricted-extras</code></p> </li> <li> <p>If the PC is going to be used for software development or an eventual compilation of source code, the ubuntu-essential meta-package can be useful to have. The meta-package contains the GNU Compiler Collection (GCC), being a collection of compilers and libraries for C, C++, Objective-C, Fortran, Ada, Go , and D programming languages. A lot of open-source projects, including the Linux kernel and GNU tools, are compiled using GCC.     <code>sudo apt update</code> <code>sudo apt install build-essential</code> <code>sudo apt-get install manpages-dev</code></p> </li> </ul>"},{"location":"Rocinante-Ubuntu/#bluetooth","title":"Bluetooth","text":"<p>All, 99.9 %, of all new motherboards is equipped with Bluetooth capabilities and the Bluetooth hardware is normally default enabled in the BIOS. But in my experience with now several motherboards, making the on-board Bluetooth work is a real pain. </p> <p>Maybe the first thing one should do is to check if the motherboard is equipped with Bluetooth and it is indeed default enabled in the BIOS. </p> <ul> <li> <p>For a ASUS motherboard; boot or reboot the machine and keep hitting the [DEL] or [F2] key to get the BIOS pages. Check for Bluetooth.</p> </li> <li> <p>Try first to use the on-board Bluetooth, go to 1.</p> <ol> <li> <p>Remove all Bluetooth related tools (<code>sudo apt purge bluetooth bluez bluez-tools rfkill blueman blueman-manager</code> </p> </li> <li> <p>Rebooted the PC, then reinstall Bluetooth stuff as indicated. </p> <pre><code>sudo apt-get install bluetooth bluez bluez-tools rfkill\nsudo apt-get install blueman &amp;&amp; blueman-manager\nsudo rfkill list\nsudo rfkill unblock bluetooth\nsudo service bluetooth start\n</code></pre> </li> <li> <p>Now, normally, Bluetooth should work. If not search for warning or error messages in the logs and search for solutions.</p> </li> </ol> </li> <li> <p>If Bluetooth still doesn't work decently, disable the on-board Bluetooth and plug a Bluetooth dongle in one of the many USB ports. Try to use a USB port on the front or top of the computer case (exposure of the dongle).</p> <p>[!NOTE]</p> <p>These days motherboards seem to have also on-board WIFI. Disable it!. A desktop computer needs to connect to wired Ethernet</p> </li> <li> <p>Check if the Bluetooth dongle is recognised by one of the on-board USB switches.</p> <ul> <li>Start a command terminal and enter <code>lsusb</code></li> <li>One of the returned line can be something as:     <code>Bus 009 Device 003: ID 0a12:0001 Cambridge Silicon Radio, Ltd Bluetooth Dongle (HCI mode)</code>      This is the Bluetooth dongle signature.</li> </ul> </li> <li> <p>Restart from point 1 above and normally Bluetooth should work now.</p> </li> </ul> <p>If Bluetooth don't work or don't decently work or stops working or ... with or without bluetooth dongle, these things can be done to find a possible cause.</p> <ul> <li> <p>Open a command terminal and:</p> <ul> <li> <p>Check the Bluetooth blocking status , enter <code>sudo rfkill list</code></p> <ul> <li>The correct returned answer is no  for soft and hard blocked Bluetooth.</li> <li>If one or both return yes, unblock it by typing <code>sudo rfkill unblock bluetooth</code></li> </ul> </li> <li> <p>Check the Bluetooth service status, enter <code>sudo systemctl status bluetooth.service</code></p> <ul> <li>If the Bluetooth is inactive, start it with: <code>sudo systemctl start bluetooth.service</code></li> </ul> </li> <li> <p>The bluez daemon is the orchestrating Bluetooth part and when that is not up to date all kind of weird issues can pop up. </p> <ul> <li>Check the current version of bluez: <code>apt-show-versions bluez</code></li> <li>Update the bluez daemon: <code>sudo apt install bluez</code></li> </ul> </li> <li> <p>Make Bluetooth persistent</p> <ul> <li> <p>Start a text editor as sudo with a file name bluetooth-restore.service</p> </li> <li> <p>Save the empty file in: /etc/systemd/system</p> </li> <li> <p>Add following lines to the empty file</p> <pre><code>[Unit]\nDescription=Restart Bluetooth after suspend\nAfter=suspend.target \n\n[Service]  \nType=simple\nExecStart=/usr/bin/bash -c \"rfkill unblock bluetooth ; systemctl start bluetooth\"\n\n[Install]  \nWantedBy=suspend.target\n</code></pre> </li> <li> <p>Save the file and close the text editor.</p> </li> <li> <p>Start the just created service: <code>sudo systemctl enable bluetooth-restore.service</code></p> </li> </ul> </li> <li> <p>If audio quality sucks</p> <ul> <li> <p>Command line install: <code>sudo apt install bluetoothctl</code></p> </li> <li> <p>Run the tool, to get device info, by typing in the command terminal: <code>bluetoothctl</code></p> <ul> <li>When having run earlier <code>sudo systemctl status bluetooth.service</code> the Bluetooth device MAC address has been displayed. Run now, from the bluetoothctl prompt:      <code>info &lt;MAC address&gt;</code></li> <li>There should be a mentioning of A2DP in all obtained information.     If it's not displayed and the device support high-quality audio then, force A2DP.</li> </ul> </li> <li> <p>exit the bluetoothctl tool by typing: <code>quit</code></p> <ul> <li> <p>Start a text editor with /etc/bluetooth/main.conf as file to open.</p> </li> <li> <p>Add under the General section:</p> <pre><code>Enable=Source,Sink,Media\nDisable=Socket\n</code></pre> </li> <li> <p>Save the file and restart the daemon: <code>sudo systemctl restart bluetooth</code>.     That explicitly permits A2DP while stopping HFP.</p> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"Rocinante-Ubuntu/#display-manager-dm","title":"Display Manager (DM)","text":"<p>Ubuntu is standard using the Gnome Display Manager (GDM), Linux-Mint on the other hand is using the LIghtDM display manager. Change the display manager only when getting warnings in the log files or when going to install the Cinnamon desktop. </p> <ul> <li>When booting it's possible that two of the warnings in the boot logs are:</li> </ul> <pre><code>\"gdm-session-wor\" - \"GLib-GObject: g_object_unref: assertion 'G_IS_OBJECT (object)' failed\"\n\"gnome-session-b\" - \"GLib-GIO-CRITICAL: g_bus_get_sync: assertion 'error == NULL || *error == NULL' failed\"\n</code></pre> <p>Both are warnings, thus non blocking, but are annoying and have to do with the GDM used by Ubuntu.</p> <ul> <li> <p>Type below in a command terminal as check to detect if GDM is used as display manager:     <pre><code>cat /etc/X11/default-display-manager\n</code></pre></p> <p>The return should be: <code>/usr/bin/gdm3</code></p> </li> <li> <p>To get rid of the warnings change the display manager to LightDM, the default display manager used by Linux-Mint. LightDM is a cross-desktop lightweight display manager and is other than GDM independent of any Desktop Environment.     Main features of lightDM are:</p> <ul> <li>Support different display servers</li> <li>No GNOME dependencies</li> <li>Support GTK and Qt</li> <li>Low memory requirements</li> <li>Fast performance</li> <li>Remote login via XDMCP and VNC</li> <li>Guest sessions</li> </ul> </li> <li> <p>Install and Configure lightDM</p> <pre><code>sudo apt update\nsudo apt install lightdm\n</code></pre> </li> <li> <p>During the installation, a popup ask to consent licenses and a second popup will ask if the default display manager should be GDM3 or LightDM. Select: LightDM</p> </li> <li> <p>AlthoughLighDM doesn\u2019t have its own greeter, choose for slick-greeter</p> </li> </ul> <pre><code>sudo apt install slick-greeter\n</code></pre> <ul> <li> <p>After that, accept the default configuration or configure lightDM per /etc/lightdm/lightdm.conf.d/ using the instructions of \"https://wiki.ubuntu.com/LightDM\".</p> <pre><code>/etc\n\u251c\u2500\u2500 lightdm\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 lightdm.conf.d\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 50-mylightdm.conf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 lightdm-gtk-greeter.conf.d\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 99_mylightdm.conf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 slick-greeter.conf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 users.conf\n</code></pre> </li> <li> <p>Reboot to start using the lightDM display manager.</p> </li> </ul>"},{"location":"Rocinante-Ubuntu/#install-cinnamon","title":"Install Cinnamon","text":"<p>Remember the first post about the why and what of these posts. As long time Linux-Mint Cinnamon user and being against heavy graphical desktop, with lots of mouse clicking, environments is the Cinnamon Desktop is wanted, but due to very new hardware, Ubuntu needed to be installed instead. As also explained and tried, Ubuntu has a Cinnamon targeted version but that is missing a lot of things the Linux-Mint Cinnamon version has by default. Thus the only option is to install the Cinnamon desktop on regular vanila Ubuntu.</p> <p>Thus! when happy with the default Gnome desktop, Keep it and skip this Cinnamon install paragraph.</p> <ul> <li> <p>Make sure the Ubuntu universe repo is enabled.</p> </li> <li> <p>then:</p> <p><code>sudo apt ugrade</code> <code>sudo apt update</code> <code>sudo apt install cinnamon-desktop-environment</code></p> </li> <li> <p>Reboot</p> </li> <li> <p>Click or enter the user name</p> </li> <li> <p>Select Cinnamon from the list, button in right bottom, to use the Cinnamon desktop environment and make it the default.</p> </li> </ul> <p>Remark:</p> <ul> <li> <p>If you want the Budgie desktop instead of Cinnamon, do: <code>sudo apt install ubuntu-budgie-desktop</code></p> </li> <li> <p>When asked during install, select LightDM as desktop manager. LightDM is preferred for its efficiency and compatibility with Budgie.</p> </li> <li>Reboot</li> <li>Upon reaching the login screen, select Budgie from the desktop environment optionst, button in right bottom, to ensure to log in to Budgie by default.</li> </ul>"},{"location":"Rocinante-Ubuntu/#tuning-cinnamon","title":"Tuning Cinnamon","text":"<p>Tuning is user's choice or otherwise said, it's the problem\u201d of the user. Thus as user, do with it what you like but find here the tuning experiment to make Cinnamon running on Ubuntu as a close copy of the Linux-Mint Cinnamon desktop on other (older) PCs. It will never be exactly the same and it does not need to be, but it must have the looks and feel for let's say 90%.</p> <p>[!NOTE] </p> <p>One need to be root or operate as sudo to execute most of the commands explained below</p> <p>After the reboot and selection of Cinnamon as desktop, it already looks a bit as Cinnamon but needs settings for:</p> <ul> <li> <p>Background</p> <ul> <li>The typical Linux-Mint background is; dark gray Linux Mint eDesigner with LM sign in left bottom quadrant of the screen.</li> <li> <p>For the eDesigner background, you\u2019ll need a Linux-Mint system in the neighbourhood.</p> <ul> <li>Go to a machine running Linux-Mint<ul> <li>Browse to \u201c/usr/share/backgrounds\u201d (This is the directory with all system backgrounds).</li> <li>Copy, to a USB drive, the \u201clinuxmint\u201d directory.</li> </ul> </li> <li>Plug the USB drive into the new machine and copy or move the \u201clinuxmint\u201d directory to \u201c/usr/share/backgrounds\u201d</li> <li>Open SystemSettings - Backgrounds and add (+) the \u201c/usr/share/backgrounds/linuxmint\u201d directory to the backgrounds list (left size). Select and click \u201clinuxmint\u201d and make a choice in the right pane.</li> </ul> </li> <li> <p>If no Linux-Mint machine is available, find beautiful and stylish backgrounds here:     https://wallpapersafari.com/linux-mint-wallpaper-hd/</p> </li> </ul> </li> <li> <p>Fonts and themes.</p> <ul> <li> <p>Go to: https://github.com/orgs/linuxmint/repositories</p> <ul> <li>Select the \u201cmint-y-Icons\u201d repository and download the zip file</li> <li>Select the \u201cmint-themes\u201d repository and download the zip file.</li> </ul> <p>Open the \u201cmint-y-icons-master.zip\u201d file and extract the contents of \u201c/usr/share/icons\u201d directory to the \u201c/usr/share/icons\u201d directory of the machine. Open the \u201cmint-themes-master.zip\u201d file and extract the contents of \u201c/files/usr/share/themes\u201d directory to the \u201c/usr/share/themes\u201d directory of the machine.</p> </li> <li> <p>Themes</p> <ul> <li>Window borders: Mint-Y</li> <li>icons: Mint-Y</li> <li>Controls: Mint-Y</li> <li>Mouse pointer: DMZ-white</li> <li>Desktop: Mint-Y-black</li> </ul> </li> </ul> </li> <li> <p>Preferences</p> <ul> <li>Applets: Selected (turned on) are:<ul> <li>Sticky Notes , Calendar (select the configuration wheel and enter the custom date format \u201c%H:%M:%S %n %d %b %y\u201d), Grouped Window List, Menu, Network Manger, Notifications, Power Manger</li> <li>Printers, Removable Drives, Rubbish Bin, Sound, System Tray, Workspaces Switcher, XApp Status Applet</li> </ul> </li> <li>Date and Time<ul> <li>Network Time</li> <li>24h clock, with date and seconds</li> <li>First day of the week : Monday</li> </ul> </li> <li>Desktop<ul> <li>Nothing is selected here. There are thus no desktop icons.</li> </ul> </li> <li>Panel<ul> <li>Always show panel</li> <li>Panel Height is 40</li> <li>Left, centre and right zone font size is 7.0 with a coloured optimally sized to the panel.</li> </ul> </li> <li>Privacy<ul> <li>Recent files and check connectivity are on.</li> </ul> </li> <li>Screensaver<ul> <li>Turns on after 10 minutes.</li> <li>The machine locks immediately when going to sleep and when the screen-saver starts.</li> </ul> </li> </ul> </li> <li> <p>Program and tool settings</p> <ul> <li> <p>Copy the play and listen list for Rhythmbox from the previous PC to the new.     These things can be found in:</p> <pre><code>~/.local/share/rhythmbox\n</code></pre> <p>Copy the content of above directory from one PC to the other.</p> </li> </ul> </li> </ul>"},{"location":"Rocinante-Ubuntu/#installing-user-software","title":"Installing user software","text":"<p>The software installed on a PC is the choice of the user. If you have a machine like the one discussed here, there is plenty of room for all kinds of software. Provided here is a list of software tools installed on my machines. These tools are not used daily but let\u2019s say at least ones an week and certainly more of the tools are used weekly.</p> <p>The tool install instructions are provided as command lines and are expressed as a  bubble.  Start a command terminal by hitting the [show apps] button and then start typing \"terminal\". When it's displayed hit [Enter]. In the terminal type and execute, [Enter], each given command line to install a software tool.</p>"},{"location":"Rocinante-Ubuntu/#system","title":"System","text":""},{"location":"Rocinante-Ubuntu/#timeshift","title":"Timeshift","text":"<p>A tool I liked to appreciate in Linux-Mint. It saved me a couple of times from getting a stroke. Timeshift is a tool to take automatically backups of the system. It can take hourly and daily backups and store several backups on disk (use an external disk!).</p> <pre><code>sudo add-apt-repository ppa:teejee2008/timeshift\nsudo apt update\nsudo apt instal timeshift\n</code></pre> <p>After installing the tool, take a first snapshot of the system till now.</p> <ul> <li>Select the snapshot type : RSYNC</li> <li>It starts estimating the snapshot size and then comes back with a list of disks. During install of Ubuntu the 4 TB WDC siak has been reserved for timeshift. It got the name TimeMachine and is mounted as /mnt/TimeMachine. Select that disk and click[Next].</li> <li>Set the snapshot levels you want (Monthly, Weekly, Daily, Hourly, Boot) and determine how many snapshots to keep. Example: Daily: 3 and Hourly: 6.</li> <li>Determine what to backup and what not.</li> <li>[Finish], hit the [Create] tab to get the first snapshot.</li> </ul> <p>Remark:</p> <p>It is a good idea to make a first new snapshot when all tools are installed and configured.</p>"},{"location":"Rocinante-Ubuntu/#appimagelauncher","title":"AppImageLauncher","text":"<p>Integrate AppImages to your application launcher with one click, and manage, update and remove them from there. Double-click AppImages to open them, without having to make them executable first.</p> <p><pre><code>sudo add-apt-repository ppa:appimagelauncher-team/stable\nsudo apt update\nsudo apt install appimagelauncher\n</code></pre> An appimage file  is kind of a compressed directory containing all files and directories required bij the tool the appimage file is representing. The only thing an appimage file has not is the files representing the customisation of the tool. Customisation of tools can be found in the users home directory under .config and .local directories.</p> <p>Installing and removing tools using appimages is thus very easy. download the tools appimage file (\\&lt;File_Name&gt;.appimage) and pass it through AppImageLauncher. Removing a tool is done by deleting the appimage file.</p>"},{"location":"Rocinante-Ubuntu/#configure-appimagelauncher","title":"Configure AppImageLauncher","text":"<ul> <li> <p>Create, as root/sudo, in /opt a directory AppImages and change the owner, group and properties of the directory. Use a file browser (Nemo) to do that or use a command line terminal.</p> <ul> <li><code>cd /opt     sudo chown &lt;user&gt; AppImages     sudo chgrp &lt;user&gt; AppImages     sudo chmod 775 AppImages</code></li> <li>Click the [Menu] button in the left bottom corner of the screen and start typing appimagelauncher. The first presented option is: AppImageLauncher Settings, select it.</li> </ul> </li> <li> <p>[AppimageLauncher] tab</p> <ul> <li>Tick the box left of \"Ask whether to move AppImage files ... \"</li> <li>Set the location were to store the appimage files and were to execute them from to     /opt/AppImages</li> </ul> </li> <li> <p>[AppimageLauncherd] tab</p> <ul> <li>Tick the box left of \"Auto start auto-integration ... \"</li> </ul> </li> <li> <p>Click [OK]</p> </li> </ul>"},{"location":"Rocinante-Ubuntu/#how-to-run-a-tool-disguised-as-appimage","title":"How to run a tool disguised as appimage","text":"<ul> <li>Download the tool .appimage file and save it somewhere on disk</li> <li>Right click the appimage file and select \"Open with AppImageLauncher\" (Double click the file also works).</li> <li>A pop-up pane will ask (2 buttons): [Run Once] - [Integrate and run]     Chose for [Integrate and run] as then the tool will become available in the general menu of the system.</li> <li>The installed tool is, GUI or apt, installed tools available in the [Linux Mint] icon in the left screen bottom  and updates for the tool are going to be handled by the AppImageLauncher.</li> </ul>"},{"location":"Rocinante-Ubuntu/#gdebi","title":"GDebi","text":"<p>According to the utility's official documentation: \"GDebi lets you install local deb packages resolving and installing its dependencies. apt does the same, but only for remote (http, ftp) located packages.\". Normally it is pre-installed but in case it is not:</p> <pre><code>sudo apt install gdebi\n</code></pre>"},{"location":"Rocinante-Ubuntu/#bitwarden","title":"Bitwarden","text":"<p>Best password storage and sharing tool. The best Password storage and sharing application. It's a desktop tool (Windows/Linux/IOS), a phone app (Android/IOS) and a browser plugin. Thus when used passwords are available from any and for any system. It is possible to sync the PC version with the web browser version, this is easy to keep things nicely arranged.</p> <ul> <li>Download as Appimage file from the Bitwarden web site, </li> <li>Save the file on disk</li> <li>Double click the saved file and for the popped-up pane click the [Integrate and Run] button</li> <li>Bitwarden will start and ask for credentials.</li> </ul> <p>What happened is; the saved appimage file is copied to the /opt/AppImages directory and the AppImageLauncher created an input for the [Manjaro main] menu so that when clicking the [Memu] button one can type bitwarden and launch bitwarden from the menu structure. The AppImageLauncher tool will also take care of regularly updating the Bitwarden tool.</p> <p>[!TIP]</p> <p>In case of ... On regularly base export the vault, using the PC version, of all passwords as csv or json file and store that file somewhere safe (in another personal vault).Dropbox</p> <p>Keep everything that\u2019s important to you and your family shareable and safe in one place. Back up files in the cloud, share photos and videos, and more.</p> <p><pre><code>https://www.dropbox.com/install\ndropbox_2024.01.22_amd64.deb\n</code></pre> After downloading the .deb file install it with the GDebi Package Installer</p>"},{"location":"Rocinante-Ubuntu/#pyenv","title":"Pyenv","text":"<p>Manage Multiple Python Versions With pyenv. Use another Python environment to play with than the system installed Python so you cannot break anything in your system.</p> <p>For a in depth discussion about installing and using pyenv read the Install and Manager Pyenv document Discussed with the installation of pyenv the installation and configuration of the required/wanted Python version(s) and packages is discussed.</p>"},{"location":"Rocinante-Ubuntu/#administration","title":"Administration","text":""},{"location":"Rocinante-Ubuntu/#bleachbit","title":"BleachBit","text":"<p>Keep the computer clean and sane use BleachBit. BleachBit guards privacy. With BleachBit you can free cache, delete cookies, clear Internet history, shred temporary files, delete logs, and discard junk you even didn't know was there. Designed for Linux and Windows systems, it  wipes clean thousands of applications including Firefox, Internet  Explorer, Adobe Flash, Google Chrome, Opera, Safari,and more.  Beyond simply deleting files, BleachBit includes advanced features such as shredding files to prevent recovery, wiping free disk space to hide traces of files deleted by other applications, and vacuuming Firefox to make it faster. Better than free, BleachBit is open source.</p> <pre><code>sudo apt install bleachbit\n</code></pre> <p>Remark: Do not run sudo or root functions, in deep-scan and system, in the user or non-sudo version of the tool. There is a dedicated sudo version of the tool and both are installed at the same time.</p>"},{"location":"Rocinante-Ubuntu/#gparted","title":"Gparted","text":"<p>GNOME partition editor (Hard Disk management tool). This tool can help managing partitions, add disks and/or portable disks and USB drives.</p> <pre><code>sudo apt install gparted\n</code></pre>"},{"location":"Rocinante-Ubuntu/#dconf-editor","title":"dconf Editor","text":"<p>dconf  is a low-level configuration system, the configuration system is based  on keys, which stores the settings for most applications. The  configuration keys are in the unstructured database (keys are logically  interconnected grouped into categories), the key database is stored in a  binary file located:</p> <pre><code>sudo apt install dconf-editor\n</code></pre>"},{"location":"Rocinante-Ubuntu/#sound-video","title":"Sound &amp; Video","text":""},{"location":"Rocinante-Ubuntu/#obs-studio","title":"OBS Studio","text":"<p>OBS Studio, also known as Open Broadcaster Software Studio, serves content creators, streamers, and video professionals as top-tier open-source software.</p> <pre><code>sudo apt update\nsudo add-apt-repository ppa:obsproject/obs-studio -y\nsudo apt install obs-studio -y\n</code></pre>"},{"location":"Rocinante-Ubuntu/#vlc-media-player","title":"VLC Media Player","text":"<p>VLC is a free and open-source multimedia player. It supports a wide range of multimedia formats such as MKV, MP4, MPEG, MPEG-2, MPEG-4, DivX, MOV, WMV, QuickTime, WebM, FLAC, MP3, Ogg/Vorbis files, BluRays, DVDs, VCDs, podcasts, and multimedia streams from various network sources.</p> <pre><code>sudo apt update\nsudo apt install vlc\nsudo apt install vlc-plugin-access-extra\n</code></pre>"},{"location":"Rocinante-Ubuntu/#pulse-audio-volume-control-pavu","title":"Pulse Audio Volume Control (PAVU)","text":"<p>PulseAudio Volume Control (pavucontrol) is a simple GTK+ based volume control tool (mixer) for the PulseAudio sound server. In contrast to classic mixer tools this one allows you to control the volume of hardware devices and of each playback stream separately. It also allows you to redirect a playback stream to another output device without interrupting playback.</p> <pre><code>sudo apt update\nsudo apt -y install pavucontrol\n</code></pre>"},{"location":"Rocinante-Ubuntu/#programming","title":"Programming","text":""},{"location":"Rocinante-Ubuntu/#git-git-cola","title":"GIT - Git-Cola","text":"<p>Git Cola is a sleek and powerful graphical user interface for Git and It is mainly for use with GitHub. Git Cola is free software and written in Python.</p> <pre><code>sudo apt update\nsudo apt install git-cola\n</code></pre>"},{"location":"Rocinante-Ubuntu/#visual-studio-code","title":"Visual Studio Code","text":"<p>Installing Visual Studio Code is a fundamental step for anyone looking to create a powerful coding environment. Visual Studio Code, often abbreviated as VS Code, is a by Microsoft re-owned code editor (Git atom) appreciated for its lightweight nature and extensible.  Good to know is:</p> <ul> <li>That Visual Studio Code is a distribution of the Code - OSS repository with Microsoft specific customisation released under a traditional Microsoft product license.</li> <li>Code - OSS is an open source project without any proprietary code.</li> </ul> <p>Both can be installed and used, but below instructions are for the Microsoft version</p> <ul> <li>Add the GPG key   <code>curl -sSL https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -</code></li> <li>Two issues will pop up: curl is not installed and key format is deprecated. </li> <li>Install curl: <code>sudo apt install curl</code></li> <li>Bring the gpg key up to date.        Read details about this in the Updating Keyring Files document</li> <li>Add the Visual Studio Code repository   <code>sudo add-apt-repository \"deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main\"</code></li> <li>update the system's package lists.   <code>sudo apt update</code></li> <li>Install Vs-Code   <code>sudo apt install code</code></li> </ul> <p>Since code is a flexible text editor there are lots of extensions available making it a versatile and specialised  text and code editor for general and (very) specific tasks. The list of all current extensions is hidden under the, on the left side showed, extensions button or after pressing [CTRL]+[SHIFT]+X. Click an extension, browse to its web site and maybe install it.</p>"},{"location":"Rocinante-Ubuntu/#meld","title":"Meld","text":"<p>Files and directories comparison is the task that is often required, Meld takes this job seriously and is considered one of the best tools to perform comparisons between files, directories, and version control projects. It is widely used by Linux desktop users and app developers to cater their daily comparison needs. Here are some of the noteworthy features of this application.</p> <pre><code>sudo apt update\nsudo apt install meld\n</code></pre> <p>Meld is installed because a extension installed in the code editor is using it.</p>"},{"location":"Rocinante-Ubuntu/#qt-qute","title":"QT (QuTe)","text":"<p>All the tools you need for creating software applications or embedded devices, from planning and design to development, testing, and future-proofing your products. QT is a tool that needs to be purchased and licensed, but there is a open source version available for the non-commercial developer (Hobby or home user). the rules are described here: <pre><code>https://www.qt.io/download-open-source\n</code></pre></p> <p>READ the page about what can/must be done and cannot be done using the open source license. Download the online installer here:</p> <pre><code>https://doc.qt.io/qt-6/qt-online-installation.html#2-download-qt-online-installer\n</code></pre> <p>Select the option to go for the open-source version.</p>"},{"location":"Rocinante-Ubuntu/#tcl-tk","title":"Tcl-Tk","text":"<p>Tcl (Tool Command Language) is a powerful, open source, business-friendly and easy to learn programming language. Tcl is a mature yet evolving language that is truly cross platform, easily deployed and highly extensible. It is suitable for a very wide range of uses, including web and desktop applications, networking, administration, testing and many more.</p> <p>Tk is a graphical user interface toolkit that act as the standard GUI for not only Tcl but for many other languages It can can produce rich, native applications that run unchanged across Windows, Mac OS X, Linux and more.</p> <ul> <li>Normally both TCL and TK are default installed (run tclsh and type <code>info patchlevel</code>)</li> <li>The main Tcl-Tk web can be found here</li> <li>On the software page of the Tcl-Tk web page several ways to get and install the software are presented. The Tcl-Tk version preferably used is that from ActiveState and can be downloaded here.     ActiveState actively maintains the latest version and updates of Tcl-Tk, but to keep up withe new version releases of the language one must regularly visit the ActiveState web page, download and install new versions when required.</li> </ul> <p>Find here beside software; tutorials, manuals and links to all kind of other related stuff.</p> <ul> <li> <p>A full development system with the latest version of the Tcl-Tk software can be downloaded from the ActiveState web side (Probably you\u2019ll need to make an account in order to get it).</p> </li> <li> <p>Save the download on the machine.</p> </li> <li> <p>Uncompress the file in the /Download directory.     A directory ActiveTcl--x86_64-linux-glibc- will be created. <li> <p>start a terminal and change into the above given directory.     <code>cd ActiveTcl-8.6.9.8609.2-x86_64-linux-glibc-2.5-dcd3ff05d</code></p> </li> <li> <p>Run the install.sh script as root (sudo) and install the Tcl-Tk tooling in /opt/ActiveState.</p> <ul> <li> <p>Accept the list of what is going to be installed, hit [enter].</p> </li> <li> <p>Accept the license of ActiveState by typing [A]</p> </li> <li> <p>Provide the path where ActiveState Tcl-Tk will be installed or accept the default value.     The default value is /opt/ActiveTcl-8.6     Hit [enter]cd ..</p> </li> </ul> <p>-</p> <ul> <li> <p>Provide the path where demo design will dropped or accept the default. Hit [enter]</p> </li> <li> <p>Specify the runtime installation or accept the default given value. Hit [enter]</p> </li> <li> <p>Hit [enter] to start the installation.</p> </li> <li> <p>At the end of the installation some settings are provided.     Open the .bash_aliases or .bashrc file with a text editor <code>~/.bash_aliases</code> .</p> </li> <li> <p>Add following lines to one of the files.</p> <pre><code># TCL-TK settings (ActiveState)\nexport TCLTK_ROOT=/opt/ActiveTcl-8.6\nexport PATH=$PATH:$TCLTK_ROOT/bin:$TCLTK_ROOT/lib\nexport MANPATH=$TCLTK_ROOT/man\n</code></pre> </li> </ul> </li>"},{"location":"Rocinante-Ubuntu/#office","title":"Office","text":""},{"location":"Rocinante-Ubuntu/#typora","title":"Typora","text":"<p>Typora provides a seamless experience as both a Markdown reader and a writer. It removes the preview window, mode switcher, syntax symbols of markdown source code, and all other unnecessary distractions of other markdown readers &amp; writers.</p> <p>[!NOTE]</p> <p>Typora is no longer a free tool. The cost is $15. But it\u2019s worth it.  Pay the money, get a license it and download it.</p> <pre><code>sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE\nwget -qO - https://typora.io/linux/public-key.asc | sudo tee /etc/apt/trusted.gpg.d/typora.asc\n</code></pre> <p>Add Typora's repository to the list of repositories</p> <pre><code>sudo add-apt-repository 'deb https://typora.io/linux ./'\n</code></pre> <p>Install Typora <pre><code>sudo apt-get update\nsudo apt-get install typora\n</code></pre></p> <p>Markdown documents can easily be turned into complex static documentation web sites with a tool as: MkDocs</p>"},{"location":"Rocinante-Ubuntu/#pandoc","title":"Pandoc","text":"<p>Pandoc is a universal document text converter. Typora is using it to support file import/export features for several file types (pdf, html, docx, ...). If ever using it, the GitHub Atom text edit is also using it.</p> <p><code>sudo apt install pandoc</code></p>"},{"location":"Rocinante-Ubuntu/#texlive-latex","title":"TexLive - Latex","text":"<p>TeX Live is an easy way to get up and running with the TeX document production system.</p> <ul> <li> <p>Start a web browser and go to: https://tug.org/texlive/acquire-netinstall.html</p> </li> <li> <p>Click on the download for a install-tl.zip file and save it (/Downloads)</p> </li> <li> <p>Extract the zip file. The result will be a directory called install-tl-\\&lt;invers-date&gt;</p> </li> <li> <p>Launch a terminal and change into the directory created by the unzip operation.</p> </li> <li> <p>Run the install script <code>./install-tl -gui</code></p> <ul> <li>The most important in the install script is the install location .</li> <li>Provide the install directory <code>/opt/TexLive/&lt;year&gt;</code></li> </ul> </li> <li> <p>Installing TexLive will take a while, so be patient.</p> </li> <li> <p>........ (waiting)</p> </li> <li> <p>When installed, or even during install, add the TexLive installation to the path.</p> <ul> <li> <p>In the user home directory, open with a edit, xed, the .bash_aliases file.</p> </li> <li> <p>Add following lines to the file and save it afterwards.</p> </li> </ul> <pre><code>export TL_ROOT=/opt/TexLive/2024\nexport PATH=$PATH:TL_ROOT/bin/x86_64-linux\n</code></pre> </li> </ul>"},{"location":"Rocinante-Ubuntu/#latexdraw","title":"LatexDraw","text":"<p>LaTeXDraw is a graphical drawing editor for LaTeX. LaTeXDraw can be used to:</p> <ul> <li>Generate PSTricks code</li> <li>Directly create PDF or PS pictures.</li> </ul> <pre><code>sudo apt update\nsudo apt install latexdraw\n</code></pre>"},{"location":"Rocinante-Ubuntu/#texmaker","title":"TexMaker","text":"<p>Texmaker is a free, modern and cross-platform LaTeX editor for linux systems that integrates many tools needed to develop documents with LaTeX, in just one application. It includes unicode support, spell checking, auto-completion, code folding and a built-in pdf viewer with synctex support and continuous view mode. Texmaker is easy to use and to configure. Texmaker is released under the GPL license .</p> <ul> <li>In a web browser go to: https://www.xm1math.net/texmaker/download.html</li> <li>Select, download and save the Linux Package for Ubuntu 22.04</li> <li>Double click the saved texmaker_... .deb file.</li> <li>Gdebi will start and install TexMaker.</li> <li>For updates, a timely visit to the Texmaker website or click the [Help] tab in Textmaker selecting [Check for Updates].</li> </ul>"},{"location":"Rocinante-Ubuntu/#sozi","title":"Sozi","text":"<p>Sozi is a piece of software for creating animated presentations. It is generally used to make visual aids for lectures or meetings. With Sozi, a presentation is not organised as a sequence of slides, but rather as a succession of viewpoints on a map that you explore.</p> <p>The Sozi web page can be found here: http://sozi.guide/en/about-sozi.html</p> <p>Go to this page for the installation: http://sozi.guide/en/installation.html</p> <p>Double click the downloaded file from GitHub to install with Gdebi the tool.</p>"},{"location":"Rocinante-Ubuntu/#freeplane","title":"Freeplane","text":"<p>This is a mind mapping tool</p> <p>Maybe don\u2019t install it immediately (Unless you need such tool of course) Install it when required.</p>"},{"location":"Rocinante-Ubuntu/#foxit-reader","title":"Foxit Reader","text":"<p>Foxit Reader is a fast, free, lightweight alternative to Adobe Reader for opening and displaying PDF files. It's also feature-packed. I've been using Foxit Reader since back in the day\u2026 The day when Adobe Reader had become a fat slob of a program that took forever to boot and load files. Adobe has improved greatly, but so has Foxit Reader.</p> <ul> <li>Go to: https://www.foxit.com/downloads/</li> <li>Click the Foxit PDF Reader button</li> <li>Save the downloaded file somewhere on the system</li> <li>Extract the \"FoxitReader.enu.setup..x64.run.tar.gz\" file. <li>Open a terminal and change directory to /Downloads when the extracted file is stored there.</li> <li>Rename the extracted file to FoxitReader.enu.setup.\\&lt;version&gt;.x64.run     Remove the number between the ( )</li> <li>Type: <code>sudo ./FoxitReader.enu.setup.&lt;version&gt;.x64.run</code></li> <li>Follow the install GUI!<ul> <li>Install the Foxit PDF reader in \"/opt/Foxitsoftware/FoxitReader\"</li> <li>Accept the license</li> <li>Wait till Foxit is installed and click [Finish].</li> </ul> </li> <li>Start Foxit Reader and set the preferences; [Edit]-[Preferences]     There is a Foxit Reader icon in the Linux-Mint Menu - Office</li>"},{"location":"Rocinante-Ubuntu/#pdfsam","title":"PdfSam","text":"<p>PDFsam Visual PDFsam Visual is a powerful tool to visually compose PDF files, reorder pages, delete pages. Split PDF files into individual pages, delete or rotate pages, easily merge PDF files together or edit and modify PDF files. A free and open source application, a powerful visual tool or a professional PDF editor, join thousands of happy users, we have the solution you are looking for.</p> <ul> <li>Go to: https://pdfsam.org</li> <li>Click the [Download] button/tab.</li> <li>Download the .deb file of the PDFsam Basic.</li> <li>Save the downloaded file.</li> <li>Open a file browser and open the directory were the file is saved.</li> <li>Double click the \"pdfsam_\\&lt;version&gt;_amd64.deb\" file to make Gdebi start and load the file for installation.</li> <li>Let GDebi install the tool.</li> </ul>"},{"location":"Rocinante-Ubuntu/#internet","title":"Internet","text":""},{"location":"Rocinante-Ubuntu/#eid-electronic-id-belgium","title":"eid (Electronic ID Belgium)","text":"<p>The Belgian eID is an essential element in the chain of trust that provides a framework for safe digital exchanges. By its virtue of certifying the identity of the person doing the exchange and protecting access to citizens' data, the Belgian eID card actively participates in the success of e-Government policy. Go to:</p> <pre><code>https://eid.belgium.be/en/block/18/popup?width=970&amp;height=570&amp;top=10\n</code></pre> <p>Select the \u201cDownload for Linux\u201d button and download: eid-archive.deb</p> <p>When the .deb file is saved, install it (double click the file and allow GDebi to install it).</p> <pre><code>sudo apt update (the terminal output should include repositories for Eid)\nsudo apt install eid-mw\nsudo apt install eid-viewer\n</code></pre> <ul> <li>Attach a card reader or use the build in card reader.</li> <li>Restart the computer.</li> <li>Go to the main menu or show apps button and start the eid-viewer.</li> <li>Plug your eid card into the reader.</li> <li>Normally, when everything is working the eid-viewer should show the data on the eid card.</li> <li>Leave the card in the reader.</li> <li> <p>Finally go to this site: https://iamapps.belgium.be/tma/?lang=en</p> <ul> <li>Hit [Start test]</li> <li>Hit [Log in]</li> <li>Click [OK] for the user certificate</li> <li>Provide the passcode</li> <li>Wait for \"Log in Successful\"</li> <li>Click the [Sign Out] button and close the web browser.</li> </ul> </li> </ul>"},{"location":"Rocinante-Ubuntu/#thunderbird","title":"Thunderbird","text":"<p>Maybe, perhaps the best mail client available. It is default installed when Ubuntu is installed. Normally one will use the installed Thunderbird software but here mail needed to be stored on an external network connected drive and then it was better to completely remove Thunderbird and install it again in the /opt directory. To do this and put all mail on a NAS or network drive do:</p> <ul> <li> <p>Browse to: https://www.thunderbird.net</p> </li> <li> <p>Hit the [download] button and save the downloaded \u201cthunderbird-\\&lt;version&gt;.tar.bz2\u201d</p> </li> <li> <p>In a command terminal do:</p> <pre><code>sudo apt remove --purge thunderbird\n</code></pre> </li> <li> <p>Un-compress the .tar.bz2 file, as sudo, in the /opt directory. After the operation there will be a /opt/thunderbird directory available.</p> </li> <li> <p>Add \u201c/opt/thunderbird\u201d  to the path.     Open .bash-aliases with a text editor and add</p> <pre><code># Thunderbird mail client settings\nexport PATH=$PATH:/opt/thunderbird.\n</code></pre> </li> <li> <p>Of course there is now no menu clickable entry for Thunderbird, create one by:</p> <ul> <li>Right click the menu in the left corner and select \u2018configure\u2019.</li> <li>In the pop up menu select the [Menu] tab and the hit the [Open the menu editor] button.</li> <li>Select [Internet] in the left menu and then hit [New Item] in the right menu.<ul> <li>Name: Thunderbird Mail</li> <li>Command: [Browse] go to /opt/thunderbird and pick thunderbird. Add a space and \u201c%U\u201d.</li> <li>Comment: Send and receive mail with Thunderbird</li> <li>Click the icon and in the popup go to /opt/thunderbird/chrome/icons/default.     Pick an icon from the listed, like default24.png</li> <li>[OK]</li> </ul> </li> </ul> </li> <li> <p>Assume Thunderbird is started for the first time and mail need to be stored on a NAS drive. Thunderbird cannot do it by default ,  but:</p> <ul> <li> <p>**Do this when Thunderbird is closed / not running! **</p> </li> <li> <p>Thunderbird creates a .thunderbird directory in a users home directory.     If there in no such directory yet, start Thunderbird and the close it again.</p> </li> <li> <p>Copy that entire directory to a default mounted directory on the NAS, rename it to thunderbird (remove the \u201d.\u201d).</p> </li> <li> <p>A precaution rename the .thunderbird directory in the users home to something like thunderbird_Org.</p> </li> <li> <p>Open a command terminal in the users home directory and create a symbolic link to the NAS Thunderbird directory.</p> <pre><code>ln -s /mnt/MainNasDir/thunderbird .thunderbird\n</code></pre> <p>A directory link .thunderbird  is created in the user home directory. The link shows all directories and files copied earlier to the Thunderbird NAS directory.</p> </li> <li> <p>Now Thunderbird can be started and used. all mail will nbe stored on the NAS drive.</p> </li> </ul> </li> </ul>"},{"location":"Rocinante-Ubuntu/#vivladi","title":"Vivladi","text":"<p>Get a browser with unrivalled customisation options and built-in features for better performance, productivity, and privacy.</p> <ul> <li>Go to: https://vivaldi.com/download/</li> <li>Click the \u201cVivaldi x.x for Linux DEB\u201d button</li> <li>Save te file and let GDebi install the browser.</li> </ul>"},{"location":"Rocinante-Ubuntu/#signal","title":"Signal","text":"<p>Say \"hello\" to a different messaging experience. An unexpected focus on privacy, combined with all of the features you expect</p> <ul> <li>Install the official public software signing key:</li> </ul> <pre><code>wget -O- https://updates.signal.org/desktop/apt/keys.asc | gpg --dearmor &gt; signal-desktop-keyring.gpg\ncat signal-desktop-keyring.gpg | sudo tee /usr/share/keyrings/signal-desktop-keyring.gpg &gt; /dev/null\n</code></pre> <ul> <li>Add the repository to the list of repositories:</li> </ul> <pre><code>echo 'deb [arch=amd64 signed-by=/usr/share/keyrings/signal-desktop-keyring.gpg] https://updates.signal.org/desktop/apt xenial main' | sudo tee /etc/apt/sources.list.d/signal-xenial.list\n</code></pre> <ul> <li>Update the package database and install Signal:</li> </ul> <pre><code>sudo apt update\nsudo apt install signal-desktop\n</code></pre> <ul> <li>Add signal to the startup applications BUT first:<ul> <li>Make it run minimised and stored in the system tray. To do so:</li> <li>Right click the menu in the left corner and select \u2018configure\u2019.</li> <li>In the pop up menu select the [Menu] tab and the hit the [Open the menu editor] button.</li> <li>Select [Internet] in the left menu, select \u201cSignal\u201d in the right menu and then click the [Properties] button.</li> <li>Add to the Command: line: <code>--no-sandbox --use-tray-icon</code></li> <li>Do the same when adding Signal to the startup applications.</li> </ul> </li> </ul>"},{"location":"Rocinante-Ubuntu/#deluge","title":"Deluge","text":"<p>Deluge is one of the most used torrent downloaders. It\u2019s stable and easier to use as any other torrent client but the team makes it more stable by providing fix updates.</p> <pre><code>sudo add-apt-repository ppa:deluge-team/ppa\nsudo apt update\nsudo apt install deluge\n</code></pre>"},{"location":"Rocinante-Ubuntu/#graphics_1","title":"Graphics","text":""},{"location":"Rocinante-Ubuntu/#inkscape","title":"Inkscape","text":"<p>Inkscape is professional quality vector graphics software which runs on Windows, Mac OS X and GNU/Linux. It is used by design professionals and hobbyists worldwide, for creating a wide variety of graphics such as illustrations, icons, logos, diagrams, maps and web graphics. Inkscape uses the W3C open standard SVG (Scalable Vector Graphics) as its native format, and is free and open-source software.</p> <p>With below install Inkscape 1.3.2</p> <pre><code>sudo add-apt-repository ppa:inkscape.dev/stable\nsudo apt update\nsudo apt install inkscape\n</code></pre> <p>I've had all kind of issues with this latest version of Inkscape so I went back to the previous version and use it as appimage. Go to the Inkscape website, select the [Download] tab and then [Current Stable Version]. At the right under Version select 1.2. The screen refreshes for version 1.2.2. Click the [GNU/Linux] button and then the [An Executable file for Linux] button. Save the downloaded appimage file. Right click the file, select appimagelauncher, start it and select [Integrate and Run] Tutorials and guides:</p> <ul> <li>http://goinkscape.com/</li> <li>https://daviesmediadesign.com/inkscape-tutorials/</li> </ul>"},{"location":"Rocinante-Ubuntu/#freecad","title":"FreeCad","text":"<p>Freedom to build what you want. FreeCAD is an open-source parametric 3D modeler made primarily to           design real-life objects of any size. Parametric modeling allows you to easily modify your design by going back into your model history and changing its parameters. Create 3D from 2D &amp; back. FreeCAD allows you to sketch geometry constrained 2D shapes and use them as a base to build other objects. It contains many components to adjust dimensions or extract design details from 3D models to create high quality production ready drawings.</p> <p>It can be installed as appimage and that seems the favourite choice of the developers, but it can alse be installed from PPA.</p> <pre><code>sudo add-apt-repository ppa:freecad-maintainers/freecad-stable\nsudo apt update\nsudo apt install freecad\n</code></pre> <ul> <li> <p>Find all information about FreeCad here.</p> </li> <li> <p>A basics tutorial can be found here.</p> </li> <li> <p>Video tutorials on YouTube can be found here, (this is the first tutorial of a series).</p> </li> </ul>"},{"location":"Rocinante-Ubuntu/#odafileconverter","title":"ODAfileConverter","text":"<p>ODA DWG-DXF CONVERTER For converting between different versions of .dwg and .dxf Useful when used with FreeCad</p> <ul> <li>Click the (DEB) button in the Downloads area</li> <li>Save the downloaded file.</li> <li>Double click the file and let GDebi install the tool</li> </ul>"},{"location":"Rocinante-Ubuntu/#darktable","title":"Darktable","text":"<p>Darktable is an open source photography workflow application and raw developer. A virtual lighttable and darkroom for photographers. It manages your digital negatives in a database, lets you view them through a zoom-able lighttable and enables you to develop raw images and enhance them.</p> <pre><code>sudo add-apt-repository ppa:pmjdebruijn/darktable-release\nsudo apt-get update\nsudo apt install darktable\n</code></pre> <p>Find darktable stuff here</p>"},{"location":"Rocinante-Ubuntu/#electronics","title":"Electronics","text":""},{"location":"Rocinante-Ubuntu/#virtualbox","title":"VirtualBox","text":"<p>VirtualBox is a general-purpose full virtualizer for x86 hardware, targeted at server, desktop and embedded use. Download VirtualBox from here. Click the Ubuntu 22.04 version and save the downloaded file. Download the VirtualBox Extension pack from here.  Double click the downloaded .deb file to allow Gdebi to install the tool.</p> <p>Note</p> <p>For several hardware projects, experiments are done with Linux. Download the 21.3 Cinnamon edition form Linux-Mint . Save the downloaded ISO image somewhere on disk and setup and install a virtual machine. Read the details in the Virtualbox document.</p>"},{"location":"Rocinante-Ubuntu/#putty","title":"PuTTY","text":"<p>PuTTY is an SSH and telnet client, developed originally by Simon Tatham for the Windows platform. PuTTY is open source software that is available with source code and is developed and supported by a group of volunteers.</p> <pre><code>sudo apt update\nsudo apt install putty\n</code></pre>"},{"location":"Rocinante-Ubuntu/#cutecom","title":"CuteCom","text":"<p>CuteCom is a graphical serial terminal. Currently it runs on Linux, FreeBSD and Mac OS X. It is aimed mainly at hardware developers or other people who need a terminal to talk to their devices. It is free software and distributed under the GNU General Public License Version 2, which can find in the file COPYING. It is written using the Qt library by Trolltech. Follow this link to visit the sourceforge project page. CuteCom doesn't use the autotools (autoconf, automake, libtool, etc.) Instead \"configure\" is simply a wrapper script which calls qmake. To uninstall CuteCom simply delete the file \"cutecom\" and the file \"cutecom.desktop\" and you're done. The config file is ~/.config/CuteCom/CuteCom.conf (was ~/.qt/cutecomrc in the Qt3-based versions).</p> <pre><code>sudo apt update\nsudo apt install cutecom\n</code></pre>"},{"location":"Rocinante-Ubuntu/#gtkwave","title":"GTKwave","text":"<p>GTKWave is a fully featured GTK+ based wave viewer for Unix, Win32, and Mac OSX which reads LXT, LXT2, VZT, FST, and GHW files as well as standard Verilog VCD/EVCD files and allows their viewing.</p> <p>Documentation can be found here as PDF file.</p> <p>There is NO repository for GTK-wave, thus for updates a timely visit to the gtkwave web site is required. That visit is necessary when the most up to date version is wanted because earlier (older) versions are available in Ubuntu repositories and can simply be installed by typing:</p> <pre><code>sudo apt update\nsudo apt install gtkwave\n</code></pre> <p>The more extended way, when the latest version is required, to install it is described in GTK Wave Installation. With this extended install it is also possible to install GtkWave in a chosen directory.</p>"},{"location":"Rocinante-Ubuntu/#logisim-evolution","title":"Logisim-Evolution","text":"<p><code>Logisim-evolution</code> is educational software for designing and simulating digital logic circuits. <code>Logisim-evolution</code> is free, open-source, and cross-platform.</p> <p>Project highlights:</p> <ul> <li>easy to use circuit designer,</li> <li>logic circuit simulations,</li> <li>chronogram (to see the evolution of signals in your circuit),</li> <li>electronic board integration (schematics can be simulated on real hardware),</li> <li>VHDL components (components behavior can be specified in VHDL!),</li> <li>TCL/TK console (interfaces between the circuit and the user),</li> <li>huge library of components (LEDs, TTLs, switches, SoCs),</li> <li>supports multiple languages,</li> <li>and more!</li> </ul> <p>To install it go to the GitHub page</p> <pre><code>https://github.com/logisim-evolution/logisim-evolution\n</code></pre> <p>Logisim-evolution is a Java application it can thus run on any operating system supporting the Java runtime enviroment. It requires Java 16 (or newer).</p> <p>Click the following platform specific packages, they include the Java runtime and do not require it to be installed separately:</p>"},{"location":"Rocinante-Ubuntu/#kicad","title":"KiCad","text":"<p>KiCad EDA is A Cross Platform and Open Source Electronics Design Automation Suite</p> <pre><code>sudo add-apt-repository ppa:kicad/kicad-8.0-releases\nsudo apt update\nsudo apt install kicad\n</code></pre>"},{"location":"Rocinante-Ubuntu/#kicad-libraries","title":"KiCad Libraries","text":"<p>Libraries are included along with KiCad installation. Downloading the libraries is only necessary when a newer version is required than the one offered with the installed KiCad version. Libraries can be kept up to date with the latest additions by cloning the library repositories using Git. Tracking the library repositories using Git means that only the changes to the libraries need to be downloaded, rather than retrieving the entire library set each time. It is also a good idea to download the libraries and keep them up to date in case there is no internet connection available.</p> <ul> <li>Schematic symbols: https://kicad.github.io/symbols</li> <li>PCB footprints: https://kicad.github.io/footprints</li> <li>3D models: https://kicad.github.io/packages3d</li> <li>Library data are updated weekly, and track the KiCad GitHub repositories.</li> </ul> <p>There are also third party libraries available form:</p> <ul> <li>Digi-Key maintains an atomic parts library for KiCad on their GitHub page. These libraries are licensed under an agreement similar to the official libraries.</li> <li>SparkFun Electronics provide KiCad library files for many of their products on their GitHub page. These libraries are based on the SparkFun Eagle libraries.</li> <li>SnapEDA provides KiCad symbol and footprint libraries for their customers.  The libraries are freely available and can be found on their KiCad library page.  The library license can be found on their terms of service page.</li> </ul>"},{"location":"Rocinante-Ubuntu/#xilinx-tools","title":"Xilinx Tools","text":"<p>This is the big name in Field Programmable Gate Array (FPGA). Install the tools as described in the Xilinx Tools Setup document.</p>"},{"location":"Rocinante-Ubuntu/#efinix-tools","title":"Efinix tools","text":"<p>A very promising low cost FPGA vendor. Install and configure the software as described in Efinix_Installation document.</p>"},{"location":"Rocinante/","title":"Rocinante","text":""},{"location":"Rocinante/#introduction","title":"Introduction","text":"<p>This is the exercise journey to install a Linux distribution on a brand new, high performance PC build from a set of brand new independent components.</p> <p>Nearly all hardware development needs software these days and software runs on a PC, so it is for hardware enthusiasts a necessity to have a good and decent working PC. Speaking with colleagues, conculeagues and friends about PC things I learned that in a lot of cases this is a real issue.  Lot of them buy a ready made PC that comes pre-installed with Microsoft Windows and some of them go for Apple iOS (not discussed here).  because \"easy to configure and use\". Some install Linux in a Virtual Machine (VM) or the brave go for a dual boot machine because Linux is required for some task. Most stay with Microsoft because the VM and/or dual boot install didn't go smooth. A minority goes for a Linux distribution but complain about \"configuration, use, maintenance, and ...\".  It has been written already a lot times; Installing Linux is now-a-days easy. it's even easier than installing Microsoft Windows. Configuring and installing things afterwards is where most people have/get issues. </p> <p>The goal is to provide in following two documents an overview of install instructions with \"tips &amp; tricks\" to easily install, configure and \"turn it to your hand\" guide into Linux.</p> <p>As about every five years, I bought a set of components and assembled a new PC. In contrary to a ready build PC from the shop with installed OS, after the assembly  of the hardware, the OS and software needs to be installed. This method brings a customised top of the range PC alive. As OS the choice has always been Linux and in particular the Linux-Mint Cinnamon distribution.</p> <p>What I learned during the years is that when installing software on a new PC surprises are part of the deal. So I always write in short the how, what, from where and what issues popped up while installing and configuring a new PC. It really helps when switching to a new PC that needs installing and configuring. Now I will write the experience down with whistles and bells to possibly help other.</p> <p>This time, even with the notes from the previous installation, its a search and kind of try exercise. It was an even longer search and try due to the switch from Intel to the newest AMD CPU and switch from Nvidia to newest AMD graphics card. </p>"},{"location":"Rocinante/#linux-mint-ubuntu","title":"Linux Mint / Ubuntu","text":"<p>I started by installing Linux-Mint 21.3 because I'm a long time Linux-Mint Cinnamon user, but that didn\u2019t really work well since the new motherboard needed a distribution running Linux 6 and that is/was not yet supported. Downloaded the \u201cEdge\u201d version of Linux-Mint 21.3 because it\u2019s using Linux 6.5 but after install got issues with the downloaded graphics card driver from AMD. Installing the latest graphics driver did not work as it should, because it\u2019s seems that it is made for Ubuntu 22.04 and I guess it checks for that.</p> <p>Went to Ubuntu, searched through the different desktop versions, downloaded and installed the Ubuntu Cinnamon targeted version because it uses Linux 6.5 and the graphics driver should now have no issues. Found out that that Ubuntu version is not a Ubuntu Long Time Support (LTS). Got again issues with the AMD GPU software. Besides the GPU software issues, the Ubuntu Cinnamon version is missing a lot of good stuff compared to the Linux-Mint Cinnamon.</p> <p>Back to Ubuntu's web site and after checking it seemed that the latest version of vanilla Ubuntu 22.04 (22.04.4) after a first update also get Linux 6.5. as kernel. Thus downloaded and installed vanilla Ubuntu 22.04 with the latest AMD GPU drivers and that went smooth. After the update directly following the install the Linux kernel was version 6.5. For me, the vanilla Ubuntu comes with a far to graphically busy and mouse click rich desktop (GNOME). For me, my opinion, all desktop environments beside Cinnamon and Budgie, are to busy and/or to fancy (to much mouse clicks to do something that can be done with one click). Budgie looks out of the box too Apple what leaves Cinnamon. What I wanted is the Mint Cinnamon desktop back and that came with extra installation and tuning work as described in the RocinanteUbuntu document.</p> <p>Finally after install and tuning it all wasn't what I really wanted and things got stuck or where hanging, quite often.</p>"},{"location":"Rocinante/#manjaro","title":"Manjaro","text":"<p>Searching for what I really wanted brought me to Arch Linux and the Arch based, easy to install and maintain counterpart Manjaro. What really won me over is the the native Manjaro Cinnamon version and the fact that Manjaro is using a rolling update system (All Arch based systems are rolling update systems).  A rolling update Linux distribution works by updating the apps and services to the latest versions as soon as updates are available. The rolling update system works without all the repositories Ubuntu/Linux Mint need, so there is no hassle with repositories to keep installed tools up to date. Another advantage is that with the rolling update system it is easy to update to a newer kernel and that is a very plus in these Linux version 6.x days.</p> <p>Downloaded and installed Manjaro and all things worked out of the box.  The installer uses the latest stable Linux kernel and during the installation run a hardware configuration tool discovers the hardware components of the machine and installs all necessary drivers. Even the drivers for the AMD graphics card were installed out of the box.</p> <p>Manjaro: why didn't I discover this earlier?</p>"},{"location":"Rocinante/#the-reason-why","title":"The reason why:","text":"<p>Forgot to tell why the title: Rocinante. The PC is a work horse for me, so a suited name for the machine was/is required. </p> <ul> <li> <p>Rocinante is Don Quixote's horse in the novel by Miguel de Cervantes.</p> <ul> <li>Roc\u00edn in Spanish means a work horse. </li> <li>The suffix, -ante in Spanish is adverbial; rocinante refers to functioning as, or being, a roc\u00edn.</li> </ul> <p>In many ways, Rocinante is not only Don Quixote's horse, but also his double and there the name Rocinante, signifies the change from the \"old nag\" to the \"foremost\" steed.</p> </li> <li> <p>The Rocinante is in the series The Expanse a former Martian Congressional Republic Navy (MRCN)  Corvette-class light frigate. It turned-independent and is now capable of functioning, a a work horse, in multiple combat roles.</p> </li> </ul>"},{"location":"The_Apt_Command/","title":"The APT commands","text":""},{"location":"The_Apt_Command/#appendix-b-the-apt-command","title":"Appendix B: The apt command","text":"<p>Installing software is easy, start the software installation tool, search what's needed and install it. Most of the tools found and installed this way are updated through the Main and Base mirrors set in the Software Sources. If a tool installed from teh for Debian based systems require that </p>"},{"location":"Updating_Keyring_Files/","title":"Updating Keyring Files","text":""},{"location":"Updating_Keyring_Files/#updating-keyring-files","title":"Updating Keyring Files","text":"<p>Handling \"apt-key is deprecated. Manage keyring files in trusted.gpg.d instead\" </p> <p>There is already a key added and it went in: \"/etc/apt/trusted.gpg\" file</p> <ul> <li> <p>List the keys with this command:</p> <p><code>sudo apt-key list</code></p> <p>A list of all keys, including the correct ones, is spit out in the terminal. For a deprecated key the output looks as the example handling the Spotify repository:</p> <pre><code>/etc/apt/trusted.gpg\n--------------------\npub   rsa4096 2021-10-27 [SC] [expires: 2023-01-20]\n      F9A2 1197 6ED6 62F0 0E59  361E 5E3C 45D7 B312 C643\nuid           [ unknown] Spotify Public Repository Signing Key &lt;tux@spotify.com&gt;\n</code></pre> </li> <li> <p>Copy the last 8 characters of the second line under pub. In this case, it is <code>B312 C643</code>.      Remove the space between the numbers and use it like this:     <code>sudo apt-key export B312C643 | sudo gpg --dearmour -o /etc/apt/trusted.gpg.d/spotify.gpg</code></p> </li> <li> <p>The output file could be named anything but it is better to use a name that is associated with the package or repository. The <code>gpg --dearmour</code> part is important because the mechanism expects you to have the keys in binary format.</p> </li> </ul> <p>The external keys haven\u2019t been add yet</p> <ul> <li> <p>In that case, get the keys and add it to your trusted.gpg.d directory.</p> </li> <li> <p>If only it was that simple. The keys can be in several file formats like .asc, .gpg etc. and the keys can be armored.</p> </li> <li> <p>An armored GPG file is encrypted but shows random text instead of being in binary format. An armored GPG key starts with:     <code>-----BEGIN PGP PUBLIC KEY BLOCK-----</code></p> </li> <li> <p>But the GPG key should not be \u2018armored\u2019. It should be in binary format (try to read an armored key shows gibberish).</p> <pre><code>ay`\ufffd\ufffd\ufffd\ufffd\ufffd?o;\ufffd\ufffd\ufffdLh\ufffd\ufffd\ufffd\ufffd\u0487\ufffd^j?\ufffd,4\ufffd@8\ufffdXh\ufffd]\ufffdj\ufffdF\ufffd\ufffdQ\ufffd\ufffdW\ufffd\u0103|,%C\ufffdn\ufffd\ufffdnG\ufffdt\ufffd\ufffd\ufffd\u05fa\ufffd\ufffd\ufffdb%/Ka\ufffd\ufffd\ufffd\ufffdi\ufffd\ufffd\ufffd\n</code></pre> <p>This is why it is important to use <code>sudo gpg --dearmour</code> while handling the keys. If the added keys are not in the binary  format, you\u2019ll start seeing this message in the output of apt update  command:</p> <pre><code>The key(s) in the keyring /etc/apt/trusted.gpg.d/spotify.gpg are ignored as the file has an unsupported filetype.\n</code></pre> <ul> <li> <p>Use this file command to check if the key is armored or not.     <code>file repo-key.gpg</code>     if the output is like \u2018PGP public key block\u2019, it is an armored file and needs to be converted to binary.</p> </li> <li> <p><code>file /etc/apt/trusted.gpg.d/spotify.gpg      /etc/apt/trusted.gpg.d/spotify.gpg: PGP public key block Public-Key (old)</code></p> </li> </ul> </li> <li> <p>So, the steps here involve:</p> <ul> <li> <p>Downloading the keys and checking if it is armored or not</p> </li> <li> <p>If the file is armored, it needs to be dearmored in binary format</p> </li> <li> <p>Then the dearmored key is added to its own file under \"/etc/apt/trusted.gpg.d\" directory</p> </li> </ul> </li> <li> <p>All combined in a single command:</p> <pre><code>curl -sS https://download.spotify.com/debian/pubkey_5E3C45D7B312C643.gpg | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/spotify.gpg\n</code></pre> </li> </ul>"},{"location":"UseKiCad/","title":"Use KiCad","text":"<p>All about software and certainly all about CAD software depends on the easiness of operation, manipulation, tunability and the easiness of setting up projects. the tool itself can then have flaws in such and so corner but as long as the four earlier named characteristics are met the tool is good to perfect. For CAD tools the extra great thing rises and dies with available, customisable and adaptable libraries. For KiCAd a default and extended set of libraries is installed is <code>/usr/share/kicad/</code>. These libraries are during life adapted, modified and components are add, meaning that the libraries need to be updated on a regularly base and that is normally faster than updating the CAD tool itself. Also for each self respecting CAD tool there are third party libraries available and working with CAD tools means that the operators make their own libraries.</p> <p>All this to say libraries, keeping libraries up to date and organising libraries is very important.</p> <p>Another thing is the way how to one works with a CAD tool. Are the work and libraries going to be a mess, then the tool how performant it might be, is going to be a bad tool. A the work and libraries organised then the tool might have flaws but it will be a good tool.</p>"},{"location":"UseKiCad/#libraries","title":"Libraries","text":"<p>As earlier written, default libraries are installed when the CAD tool is installed and by default they are updated when a newer version of the tool is installed. KiCad libraries can be kept up to date with the latest additions by cloning the library repositories using Git. Tracking the library repositories using Git means that only the changes to the libraries need to be downloaded, rather than retrieving the entire library set each time. Another idea is to keep the libraries up to date by downloading and replacing them manually (track the differences yourself)</p> <ul> <li>Schematic symbols: https://kicad.github.io/symbols</li> <li>PCB footprints: https://kicad.github.io/footprints</li> <li>3D models: https://kicad.github.io/packages3d</li> <li>Library data are updated weekly, and track the KiCad GitHub repositories</li> </ul> <p>There are KiCad third party libraries available form:</p> <ul> <li>Digi-Key maintains an atomic parts library for KiCad on their GitHub page.      These libraries are licensed under an agreement similar to the official libraries.</li> <li>SparkFun Electronics provide KiCad library files for many of their products on their GitHub page.      These libraries are based on the SparkFun Eagle libraries.</li> <li>SnapEDA provides KiCad symbol and footprint libraries for their customers.     The libraries are freely available and can be found on their KiCad library page.     The library license can be found on their terms of service page.</li> </ul> <p>The default KiCad libraries are installed in the Linux file system directory <code>/usr/share/kicad</code>. One needs to be root/sudo in order to access that directory. It's thus not the easies way to keep, as user, thing up to date.</p> <p>The way, I use, to keep libraries in one place and easily up to date is:</p> <ul> <li> <p>Create as root/sudo in <code>/opt</code>a directory KiCad and modify the properties so that the user can read, modify, write all created sub directories.     <pre><code>sudo mkdir /opt/KiCad\nsudo chown &lt;user&gt; /opt/KiCad\nsudo chgrp &lt;user&gt; /opt/KiCad\nsudo chmod 775 /opt/KiCad\n</code></pre></p> <p>In that directory all libraries for KiCad get a own directory. There is a kicad directory mimicking the default installed libraries. A copy of the latest downloaded libraries for GitHub or other online source is kept in the directory LibUpdates and there is a directory KicadUser to store 3<sup>th</sup> party and user created libraries.  </p> </li> <li> <p>Set a dynamic link for the default libraries to the <code>/opt/KiCad</code> directory (why /opt, see note)</p> <pre><code>sudo ln -s /usr/share/kicad /opt/KiCad/kicad\n</code></pre> <p>All default libraries, templates, demos and other user things are going to be available to the user from the <code>/opt</code> directory but remain under root/sudo control. Since everything is going to be in one place it is easy to manipulate and modify. What is modified in <code>/opt/KiCad/kicad</code> sub-folders is modified in the default installation <code>/usr/.share/kicad</code> and vice-versa.</p> </li> </ul> <p>Note</p> <p>Why /opt?</p> <p>/opt (Optional Software): The /opt directory is used for optional software installed on the system. This directory can be used for installing software that is not included in the system\u2019s package manager.</p> <p>Optional files such as vendor supplied application programs should be located here.</p>"},{"location":"UseKiCad/#work-method","title":"Work Method","text":"<p>As earlier written, the usefulness and easiness (call it feeling) of a CAD tool is closely related to how one organises work and operates the CAD tool.  When that is done in a smooth and consistent way, flaws of the tooling can mostly be forgiven and solved. As showed in the libraries paragraph the setup of libraries is important and the organisation of a project leans very close to the organisation of libraries. Because all things need a place and storage. The cleaner the organisation the easier one can work. The structure of the default installed libraries already shows a useful way how to organise the things of a project.</p> <p>In short, a project starts, after brainstorming and project goal and calculation writing, with a \"project idea\" schematic on a sheet of paper (nowadays on a tablet). From that drawing a list of required, necessary and wanted components is created. The list ends in a search for and download of data sheets and from the data sheets a list of footprints rises. </p> <p>KiCad library organisation is almost following the same path because footprints and symbols and other things are each fit in their own directory. So create a project in similar way.</p> <ul> <li> <p>Project</p> <p>Everything that has to do with the project goes into a sub-directory. The listed sub-directories are given as guide, nothing hold one to create extra directories (like sub-directories for PCB or mechanical issues or a sub-directory for return &amp; repair or ... ).</p> <ul> <li> <p>DataSheets</p> <p>Store here the data sheets of all for the project required components. Even the data sheets of used resistors and capacitors must be stored here so that all relevant information captured at the moment of the project run stays together in one place</p> </li> <li> <p>Documents</p> <ul> <li> <p>Documents</p> <p>Store here the documentation as pre-studies, calculations, user guide and more of the project </p> </li> <li> <p>Figures</p> <p>Store here the figures (png, svg, ...) used in the various documents of the sub-directories of the top level /Documents directory.</p> </li> <li> <p>Mechanics</p> <p>Storage for all information that has to do with mechanical dimensions and behaviour of the project. Example: store here all measurements of a PCB (dimensions of the PCB, dimensions of the mounting holes, cut-outs, ...)</p> </li> <li> <p>Partslist</p> <p>The complete parts list goes here. In case of a PSB it's the list of all electric and electronic components but also the list of all mechanical things as screws, housing, ...</p> </li> <li> <p>Production</p> <p>Store here all documentation related to the production of the project. documentation about how to mount things, hints and tips, notes, ...</p> </li> </ul> </li> <li> <p>Lib3d</p> <p>This directory will contain 3D models created for this project. Copy 3D models present in the default library <code>/opt/KiCad/kicad/3dmodels</code>and/or 3<sup>th</sup> party and/or global user created 3D models into this directory. This way, again, everything that has to do with the project stays with the project. </p> </li> <li> <p>LibSymbols</p> <p>Symbols of components created for this project are stored here. Copy symbols present in the default library <code>/opt/KiCad/kicad/symbols</code>and/or 3<sup>th</sup> party and/or global user created symbols into this directory. This way, again, everything that has to do with the project stays with the project. </p> </li> <li> <p>LibFootpints</p> <p>Idem dito as for the Lib3d and LibSymbols directories, store footprints made for the project here and copy footprints from the other footprint libraries inhere.</p> </li> </ul> <p>Tip</p> <p>When the project is stable, schematics, PCB and mechanics are checked and the functioning of the whole is proven 3d models, symbols and footprints can be copied to the <code>/opt/KicadUser</code> sub-directories. </p> <p>Of course all of this takes time and attention, but once the habit of it kicks in it makes things so easy. After years all information about a project is still available without any effort to spend. Once models, symbols, footprints, mechanical stuff has proven to be correct and working it can be copied to the global user libraries.</p> <ul> <li> <p>GerberFiles</p> <p>Outputs of PCB design work required for manufacturing go here.</p> </li> <li> <p>Schemas</p> <p>As the directory title reads, a place to store all schematics</p> </li> <li> <p>Pdfs</p> <p>Usually from schematics, gerbers, layouts, gerbers and other thinsg PDF documents are created. Store them here.</p> </li> </ul> </li> </ul>"},{"location":"UseKiCad/#kicad-steup","title":"KiCAd Steup","text":"<p>All directories can be setup in KiCad using the Preferences , **Configure paths</p>"},{"location":"VirtualBox/","title":"VirtualBox","text":""},{"location":"VirtualBox/#configure-virtualbox","title":"Configure VirtualBox","text":"<ul> <li> <p>Start virtual box (Oracle VM VirtualBox) from the main menu or show apps button.</p> </li> <li> <p>Click [File] - [Preferences]</p> <ul> <li>Under General set the \"Default Machine Folder\" to <code>/mnt/VirtualMachines</code>     Remember, from the disk partitioning table that an entire drive of 1GB has been designated for the use of a virtual machine.</li> <li>Tick under Update the \"Check for Updates\" box<ul> <li>Once per: 1day</li> <li>Check for: Stable Release Versions</li> </ul> </li> </ul> </li> <li> <p>Hit [OK]</p> </li> <li> <p>Click [File] - [Tools] - [Extension Pack Manager] and then click [Extension] - [Install]</p> <ul> <li>Browse to where the downloaded extension pack is saved and click [Open] on the selected extension pack.</li> <li>Read the text in the small pop-up menu and click [Install]</li> <li>Pull the slider down of the VirtualBox License pop-up and click [I Agree]</li> <li>Enter the sudo password and let the tool install the extension pack.</li> </ul> </li> </ul>"},{"location":"VirtualBox/#install-and-run-a-virtual-machine","title":"Install and Run a Virtual Machine","text":"<ul> <li> <p>Install a virtual machine (As example Linux-Mint 21.3 is installed as guest OS)</p> <ul> <li> <p>Click [Machine] - [New]</p> </li> <li> <p>Normally selected by default [Guided Mode], but check if it's correct. else click the [Expert Mode] button at the bottom of the window to change it into [Guided Mode].</p> </li> <li> <p>Name and Operating System</p> <ul> <li>Give the VM a useful name, like: LinuxMint213</li> <li>The folder were the guest OS is going to be installed should be correct (<code>/mnt/VirtualMachines</code>), if not browse to <code>/mnt/VirtualMachines</code> and select that directory.</li> <li>As ISO image select the downloaded Linux-Mint 21.3 Cinnamon ISO file. Click the down-pointing arrow at the right of the entry filed and select \"Other\". Browse to were the ISO file is downloaded and select it. Click [Open].</li> <li>Type and version are greyed out but should be indicating: Linux, Ubuntu (64-bit)</li> <li>Tick the voting box: Skip Unattended Installation</li> </ul> </li> <li> <p>Hardware</p> <ul> <li>Base Memory: Move the slider to the right until 16384 MB is indicated in the amount of memory box.</li> <li>Processors: Move the slider to the right until 4 CPUs is shown</li> </ul> </li> <li> <p>Hard Disk</p> <ul> <li>\"Create a Virtual Machine Now\" should be ticked (voted for) by default. If not select this option.     The \"Hard Disk File Location and Size\" bar should display this path /mnt/VirtualMachines/\\/\\.vdi     were: \\ is in this example: LinuxMint213     and*\\*.vdi will be set to LinuxMint213.vdi <li>Select, vote for, \"Pre-Allocate Full Size\"</li> <li> <p>Hit the [Finish] button</p> </li> <li> <p>The base for the Linux-Mint virtual machine is setup.      Now the Linux-Mint version needs to be installed.      Follow the guidelines below.</p> <ul> <li>Click the [Settings] button<ul> <li>General - [Advanced]<ul> <li>Enable \"Shared Clipboard\" and \"Drag'n'Drop\".      Make these Bidirectional</li> </ul> </li> <li>System - [Motherboard]<ul> <li>Untick floppy and move Hard Disk to the top in boot Order</li> </ul> </li> <li>System - [Processor]<ul> <li>Select Extended Features: Enable PAE/NX and Enable Nested VT-x/AMD-V</li> </ul> </li> <li>Display - [Screen]<ul> <li>Select; Enable 3D Acceleration as extended Feature</li> </ul> </li> <li>USB - <ul> <li>Select USB3.0 (xHCI) Controller</li> </ul> </li> </ul> </li> <li>Click [OK]</li> </ul> </li> <li> <p>Click the [Start] button</p> <ul> <li>The Linux-Mint installation will start and show as for a normal installation a Linux-Mint tryout system with on desktop a icon-button to install Linux Mint.</li> <li>Double click the icon-button</li> <li>Install Linux Mint as if it's going to be installed on a PC.     Fllow the GUI setup and anwser the questions and provide information to the installer</li> <li> <p>When Linux Mint is installed configure it as a normal Linux installation.</p> </li> <li> <p>Extra things one can do to make life easier</p> </li> </ul> </li> <li> <p>Click [Devices] - [Insert Guest Additions CD image ...]</p> </li> <li> <p>Double click the icon-link on the desktop and follow the instructions     After installation,install the Guest Additions upgrade ([Devices] - [Upgrade Guest Additions]).</p> </li> <li> <p>Share a directory or directories of the host machine with the Virtual Machine.</p> <ul> <li>Click in the \"Oracle VM VirtualBox Manager\" the entry Shared folders.     Click Machine Folders and then the +.     Browse to the folder (other) on the host that needs sharing.</li> <li>Do this for one or multiple directories</li> </ul> </li> <li> <p>Click [Machine] and in the drop down menu click [Create Shortcut on Desktop]     With this the Virtual Machine simply starts when double clicking the shortcut.</p> </li>"},{"location":"tmp_fstab_Issue/","title":"tmp fstab issue","text":"<p>Working with a manual created partition table as the table provided in the base Rocinante document makes Linux Mint and Ubuntu work without warnings about the system partitioning. Arch Linux and thus also Manjaro uses the automatic <code>systemd /tmp mount</code> what results in a warning about the partitioning of the system.  This can only be checked (it should be one of the first things to check) and solved after Ubuntu(Mint) or Manjaro is installed and boot logs can be examined.</p> <ul> <li> <p>Ubuntu and Mint are happy with the partitioning table as provided above and there will be no complaints about the partitioning table in any log file.</p> </li> <li> <p>Manjaro is not that happy and produces a warning in the boot log file about the /tmp partition.</p> </li> </ul> <p>Note</p> <p>The explication in this document shows how to solve a possible warning about the system partitioning when using the automatic /tmp mount setting. When knowing that Manjaro is going to be used and before installation, remove the /tmp partition from the partitioning table and add the size spend to the /tmp partitioning to the users /home partitioning. This will avoid the need to use this document to solve a boot warning about partitioning issues.</p>"},{"location":"tmp_fstab_Issue/#the-log-warming-message","title":"The log warming message","text":"<pre><code>system /usr/lib/systemd/system-generators/systemd-fstab-generator failed with exit status 1. system Failed to create unit file '/run/systemd/generator/tmp.mount', as it already exists. Duplicate entry in '/etc/fstab'?\n</code></pre> <p>Tip</p> <p>To easily get the above warning and in general get notified about errors, warnings, and other hardware and software messages normally written in different logs files, install after the first boot the gnome logs tool.</p> <ul> <li> <p>In the Add/Remove Software tool, click the magnifying glass and type in the search bar logs</p> </li> <li> <p>The top of the list shows a magnifying glass with title Logs (gnome-logs) and some brief comments.</p> </li> <li> <p>Hit the blue square with white down pointing arrow to install the logs tool and click [Apply].</p> </li> <li> <p>After the tool is installed the blue square with white down pointing arrow is replaced by a red square with wastebasket.</p> </li> <li> <p>Click the Manjaro button at the left bottom of the screen and start typing \"logs\". A logs icon with magnifier glass will appear, click that and discover what might or should be solved to make the system run smooth.</p> </li> </ul>"},{"location":"tmp_fstab_Issue/#solved-the-warning","title":"Solved the warning","text":"<p>The reason for this warning is that the system probably has the systemd tmp.mount setting enabled. The reported warning is no shows stopper, as the PC boots perfectly. What's happening is that at boot a /tmp is created bij the OS and the partition setup as /tmp is not used. Due to that, if the warning is not checked or there is no solution applied for the warning, a complete disk partition will never be used. A solution for this is presented later in this document.</p> <p>Check if systemd tmp.mount is used by typing: <code>systemctl status tmp.mount</code> in a command terminal.</p> <ol> <li> <p>The response to the command when systemd tmp.mount is running is:</p> <pre><code>tmp.mount - /tmp\n     Loaded: loaded (/etc/fstab; generated)\n     Active: active (mounted) since Wed 2024-06-26 18:24:32 CEST; 20h ago\n      Where: /tmp\n       What: tmpfs\n       Docs: man:fstab(5)\n             man:systemd-fstab-generator(8)\n      Tasks: 0 (limit: 76762)\n     Memory: 8.0K (peak: 1.5M)\n        CPU: 3ms\n     CGroup: /system.slice/tmp.mount\njun 26 18:24:32 Rocinante systemd[1]: Mounting /tmp...\njun 26 18:24:32 Rocinante systemd[1]: Mounted /tmp.\n</code></pre> </li> <li> <p>When the response to the command is something else, systemd tmp.mount is not running.</p> </li> </ol> <p>When 1 go and edit the /etc/fstab file, else do nothing.</p> <ul> <li>Start a command terminal</li> <li>Go to the /etc directory (cd /etc)</li> <li>Start a text editor as root user an load the fstab file (sudo \\ fstab)     \\ can be: gedit, xed, code, vim, ... <li>Comment (#) the line dictating the /tmp partition.<ul> <li>If the fstab file content looks as fstab A then check the partition table to find out what partition represents /tmp and comment that out.</li> <li>if the fstab file looks as fstab B comment the line with /tmp</li> </ul> </li> <li>Save the file and close the text editor.</li> <li>When rebooting <ul> <li>The log file should have no warning anymore about the /tmp.</li> <li>A disk check (in a command terminal type: <code>gnome-disks</code>) will reveal that one partition, the original defined /tmp partition, is no longer used or mounted. It is thus not available for the system nor for the user.     The best thing to do is to append the partition in a previous or next partition.</li> </ul> </li>"},{"location":"tmp_fstab_Issue/#remove-and-resize-a-disk-partition","title":"Remove and Resize a disk partition","text":"<p>The easiest to do this is by using the gparted tool. For Manjaro gparted is installed by default.  In case it is not installed do:</p> <ul> <li>In the Add/Remove Software tool, click the magnifying glass and type in the search bar gparted</li> <li>The top of the list shows a icon of a hard disk with title GParted Partition Editor (gparted) and some brief comments.</li> <li>Hit the blue square with white down pointing arrow to install the logs tool and click [Apply]</li> <li>After the tool is installed the blue square with white down pointing arrow is replaced by a red square with wastebasket.</li> </ul> <p>Click the Manjaro button at the left bottom of the screen and start typing \"gparted\". A icon with gparted text appears, click that, end the root/sudo password, and discover in the popped up GUI the partitioning setup of all hard disks of the system.</p> <ul> <li> <p>In the top tab menu click [GParted] . Clicking the [Devices] option allow selection of all drives in the system and show for each drive it's partitioning. Default the first or main drive partitioning table should be showed.</p> </li> <li> <p>When a partitioning table as the one provided in the base  Rocinante  document is used, the  /dev/nvme0n1p4 or /tmp partition will show up as unmounted.</p> </li> <li> <p>To not wate the size of the unused and unmounted partition it is best to append it to neighbour partition. As /tmp is auto-mounted in the system from the systemd it sounds logical to append the size of the unused /tmp to the root or / partition. Make that grow by the size of the unmounted partition and allow by that an auto-mounted /tmp partition of that size.</p> </li> <li> <p>First thing to do is to delete the unused and unmounted partition. The cleared space can then be used to add it onto an existing partition.</p> <ul> <li>Select the /dev/nvme0n1p4  /tmp partition and click the [Partition] tab. In the fall down menu select [Delete].</li> <li>The space occupied by the partition is freed and can be used for something else as add it onto an exiting partition.</li> </ul> </li> <li> <p>Second thing, enlarge the /dev/nvme0n1p3 / partition with the size of the just removed /dev/nvme0n1p4 partition.</p> <ul> <li> <p>Select the /dev/nvme0n1p3 / partition, right click and in the pop-up menu chose [Resize/Move]</p> </li> <li> <p>A new pup-up GUI pane appears</p> <ul> <li>Free space preceding (MiB): should be left as is (normally this is geyed out)</li> <li>New size (Mib): Add the MiB of the freed space to the displayed value.</li> <li>Free space following (MiB): leave it or set it to 0</li> <li>Align to: MiB</li> </ul> <p>Hit the [Resize] button.</p> </li> <li> <p>Till now nothing happened and everything can be reset as it is/was without any damage.</p> </li> <li> <p>Hit the [V] (Apply All Operations) button to start making the required changes.     When everything is done the / partition grew with the extra size of the formal /tmp partition.</p> </li> </ul> </li> <li> <p>Close GParted.</p> </li> </ul>"},{"location":"tmp_fstab_Issue/#fstab-a","title":"fstab A","text":"<p>Consult the partitioning table and find out what partition is occupied by /tmp.  Here it is the line starting with /dev/nvme0n1p4.</p> <p>Important</p> <p>The lines indicating the mount points of the NAS drive are not included here.</p> <p>/dev/nvme0n1p7: UUID=\"da728a9f-47b3-4784-9aa0-942d78536418\" BLOCK_SIZE=\"4096\" TYPE=\"ext4\" PARTUUID=\"4f19ce30-7825-4724-958d-e10ddb540199\" /dev/nvme0n1p5: UUID=\"da9dfb0b-df66-4a7f-9391-408d4c735ee2\" BLOCK_SIZE=\"4096\" TYPE=\"ext4\" PARTUUID=\"42c60059-7008-42a5-96e4-4917ab9e276b\" /dev/nvme0n1p3: UUID=\"0f23c13a-2fba-48aa-8e8a-66ebe579bdd5\" BLOCK_SIZE=\"4096\" TYPE=\"ext4\" PARTUUID=\"1ea974c9-9f97-45ea-8f0a-cd8292e823f3\" /dev/nvme0n1p1: UUID=\"0514-B43A\" BLOCK_SIZE=\"512\" TYPE=\"vfat\"                             PARTUUID=\"09378e87-5a92-4b6e-9050-9f115e6050fc\" /dev/nvme0n1p6: UUID=\"94fc2177-2a79-4bdc-a6a9-91ed9a92f5e9\" TYPE=\"swap\"                   PARTUUID=\"2bc06b3d-7d07-44a2-8fb7-4495cacd3c42\" # /dev/nvme0n1p4: UUID=\"a5424545-6a80-4ae7-a12e-6b48bdfe992f\" BLOCK_SIZE=\"4096\" TYPE=\"ext4\" PARTUUID=\"dec78de3-f683-4011-bddc-147ff448e530\" /dev/nvme0n1p2: UUID=\"c3c08eef-a84f-415d-8ca0-ae5aff560974\" BLOCK_SIZE=\"4096\" TYPE=\"ext4\" PARTUUID=\"7f317f4d-6b63-485f-a4b6-072602cfa4c9\" /dev/sdb1:      UUID=\"6ed0c36e-ae98-4e58-930e-d4bc7810f082\" BLOCK_SIZE=\"4096\" TYPE=\"ext4\" PARTUUID=\"20848443-5946-4acd-a86a-93a9acf53741\" /dev/nvme1n1p2: UUID=\"cf3acd37-243d-4bd5-9385-500576b25164\" BLOCK_SIZE=\"4096\" TYPE=\"ext4\" PARTUUID=\"f2aff194-0e33-40c4-a24b-968f0025e2f8\" /dev/nvme1n1p1: UUID=\"37db1472-d722-42bd-8cf1-48080d098072\" BLOCK_SIZE=\"4096\" TYPE=\"ext4\" PARTUUID=\"849eed55-4e0e-47bd-9d0b-40867b8cdbd3\" /dev/sda1:      UUID=\"5e8c3765-4ced-447b-b81e-88bd2be15863\" BLOCK_SIZE=\"4096\" TYPE=\"ext4\" PARTUUID=\"239d98a5-16c9-45d6-864c-aa1db4832122\"</p>"},{"location":"tmp_fstab_Issue/#fstab-b","title":"fstab B","text":"<p>Important</p> <p>The lines indicating the mount points of the NAS drive are not included here.</p> <pre><code># /etc/fstab: static file system information.\n#\n# Use 'blkid' to print the universally unique identifier for a device; this may\n# be used with UUID= as a more robust way to name devices that works even if\n# disks are added and removed. See fstab(5).\n#\n# &lt;file system&gt;             &lt;mount point&gt;  &lt;type&gt;  &lt;options&gt;  &lt;dump&gt;  &lt;pass&gt;\nUUID=0514-B43A                            /boot/efi      vfat    umask=0077 0 2\nUUID=c3c08eef-a84f-415d-8ca0-ae5aff560974 /boot          ext4    defaults,noatime 0 2\nUUID=0f23c13a-2fba-48aa-8e8a-66ebe579bdd5 /              ext4    defaults,noatime 0 1\n# Comment below line as &lt;systemd tmp.mount&gt; is running\n# UUID=a5424545-6a80-4ae7-a12e-6b48bdfe992f /tmp           ext4    defaults,noatime 0 2\n\nUUID=da9dfb0b-df66-4a7f-9391-408d4c735ee2 /var           ext4    defaults,noatime 0 2\nUUID=da728a9f-47b3-4784-9aa0-942d78536418 /home          ext4    defaults,noatime 0 2\nUUID=37db1472-d722-42bd-8cf1-48080d098072 /opt           ext4    defaults,noatime 0 2\nUUID=cf3acd37-243d-4bd5-9385-500576b25164 /mnt/VirtualMachines ext4  defaults,noatime 0 2\nUUID=5e8c3765-4ced-447b-b81e-88bd2be15863 /mnt/TimeMachine ext4    defaults,noatime 0 2\nUUID=6ed0c36e-ae98-4e58-930e-d4bc7810f082 /mnt/Dropbox   ext4    defaults,noatime 0 2\ntmpfs                              /tmp           tmpfs   defaults,noatime,mode=1777 0 0\n</code></pre>"}]}